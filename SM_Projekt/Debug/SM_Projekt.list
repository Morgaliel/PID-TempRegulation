
SM_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800cc28  0800cc28  0001cc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d14c  0800d14c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d14c  0800d14c  0001d14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d154  0800d154  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d158  0800d158  0001d158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d15c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  200001fc  0800d358  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800d358  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7ff  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003310  00000000  00000000  0003ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0003ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c3f  00000000  00000000  00041820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5c6  00000000  00000000  0006645f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b6c  00000000  00000000  00080a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076c4  00000000  00000000  0015a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cc10 	.word	0x0800cc10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800cc10 	.word	0x0800cc10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <BMP280_Read8+0x4c>)
 80010ea:	f002 f885 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <BMP280_Read8+0x50>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	230a      	movs	r3, #10
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2302      	movs	r3, #2
 8001100:	f003 ff45 	bl	8004f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2110      	movs	r1, #16
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <BMP280_Read8+0x4c>)
 800110a:	f002 f875 	bl	80031f8 <HAL_GPIO_WritePin>
	return tmp[1];
 800110e:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020000 	.word	0x40020000
 800111c:	20000238 	.word	0x20000238

08001120 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112e:	7b3b      	ldrb	r3, [r7, #12]
 8001130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001134:	b2db      	uxtb	r3, r3
 8001136:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	480f      	ldr	r0, [pc, #60]	; (800117c <BMP280_Read16+0x5c>)
 800113e:	f002 f85b 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <BMP280_Read16+0x60>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f107 010c 	add.w	r1, r7, #12
 800114e:	230a      	movs	r3, #10
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2303      	movs	r3, #3
 8001154:	f003 ff1b 	bl	8004f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <BMP280_Read16+0x5c>)
 800115e:	f002 f84b 	bl	80031f8 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020000 	.word	0x40020000
 8001180:	20000238 	.word	0x20000238

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc5 	bl	8001120 <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <BMP280_Write8+0x54>)
 80011e0:	f002 f80a 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <BMP280_Write8+0x58>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 020c 	add.w	r2, r7, #12
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	230a      	movs	r3, #10
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2302      	movs	r3, #2
 80011f6:	f003 feca 	bl	8004f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <BMP280_Write8+0x54>)
 8001200:	f001 fffa 	bl	80031f8 <HAL_GPIO_WritePin>
#endif
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020000 	.word	0x40020000
 8001210:	20000238 	.word	0x20000238

08001214 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001228:	b2db      	uxtb	r3, r3
 800122a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2110      	movs	r1, #16
 8001230:	480e      	ldr	r0, [pc, #56]	; (800126c <BMP280_Read24+0x58>)
 8001232:	f001 ffe1 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <BMP280_Read24+0x5c>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	230a      	movs	r3, #10
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2303      	movs	r3, #3
 8001248:	f003 fea1 	bl	8004f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <BMP280_Read24+0x58>)
 8001252:	f001 ffd1 	bl	80031f8 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	4313      	orrs	r3, r2
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	4313      	orrs	r3, r2
#endif
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40020000 	.word	0x40020000
 8001270:	20000238 	.word	0x20000238

08001274 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	70fb      	strb	r3, [r7, #3]
 8001286:	460b      	mov	r3, r1
 8001288:	70bb      	strb	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800128e:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <BMP280_Init+0x154>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2110      	movs	r1, #16
 8001298:	484c      	ldr	r0, [pc, #304]	; (80013cc <BMP280_Init+0x158>)
 800129a:	f001 ffad 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f001 fc4e 	bl	8002b40 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2110      	movs	r1, #16
 80012a8:	4848      	ldr	r0, [pc, #288]	; (80013cc <BMP280_Init+0x158>)
 80012aa:	f001 ffa5 	bl	80031f8 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ae:	787b      	ldrb	r3, [r7, #1]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d901      	bls.n	80012b8 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 80012b4:	2303      	movs	r3, #3
 80012b6:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012b8:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <BMP280_Init+0x15c>)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012be:	787b      	ldrb	r3, [r7, #1]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d901      	bls.n	80012d2 <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012ce:	2305      	movs	r3, #5
 80012d0:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012d2:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <BMP280_Init+0x160>)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d901      	bls.n	80012e2 <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012de:	2305      	movs	r3, #5
 80012e0:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <BMP280_Init+0x164>)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012e8:	bf00      	nop
 80012ea:	20d0      	movs	r0, #208	; 0xd0
 80012ec:	f7ff feee 	bl	80010cc <BMP280_Read8>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b58      	cmp	r3, #88	; 0x58
 80012f4:	d1f9      	bne.n	80012ea <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80012f6:	2088      	movs	r0, #136	; 0x88
 80012f8:	f7ff ff44 	bl	8001184 <BMP280_Read16LE>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <BMP280_Init+0x168>)
 8001302:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001304:	208a      	movs	r0, #138	; 0x8a
 8001306:	f7ff ff3d 	bl	8001184 <BMP280_Read16LE>
 800130a:	4603      	mov	r3, r0
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <BMP280_Init+0x16c>)
 8001310:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001312:	208c      	movs	r0, #140	; 0x8c
 8001314:	f7ff ff36 	bl	8001184 <BMP280_Read16LE>
 8001318:	4603      	mov	r3, r0
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <BMP280_Init+0x170>)
 800131e:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001320:	208e      	movs	r0, #142	; 0x8e
 8001322:	f7ff ff2f 	bl	8001184 <BMP280_Read16LE>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <BMP280_Init+0x174>)
 800132c:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800132e:	2090      	movs	r0, #144	; 0x90
 8001330:	f7ff ff28 	bl	8001184 <BMP280_Read16LE>
 8001334:	4603      	mov	r3, r0
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <BMP280_Init+0x178>)
 800133a:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800133c:	2092      	movs	r0, #146	; 0x92
 800133e:	f7ff ff21 	bl	8001184 <BMP280_Read16LE>
 8001342:	4603      	mov	r3, r0
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <BMP280_Init+0x17c>)
 8001348:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800134a:	2094      	movs	r0, #148	; 0x94
 800134c:	f7ff ff1a 	bl	8001184 <BMP280_Read16LE>
 8001350:	4603      	mov	r3, r0
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <BMP280_Init+0x180>)
 8001356:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001358:	2096      	movs	r0, #150	; 0x96
 800135a:	f7ff ff13 	bl	8001184 <BMP280_Read16LE>
 800135e:	4603      	mov	r3, r0
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <BMP280_Init+0x184>)
 8001364:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001366:	2098      	movs	r0, #152	; 0x98
 8001368:	f7ff ff0c 	bl	8001184 <BMP280_Read16LE>
 800136c:	4603      	mov	r3, r0
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <BMP280_Init+0x188>)
 8001372:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001374:	209a      	movs	r0, #154	; 0x9a
 8001376:	f7ff ff05 	bl	8001184 <BMP280_Read16LE>
 800137a:	4603      	mov	r3, r0
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <BMP280_Init+0x18c>)
 8001380:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001382:	209c      	movs	r0, #156	; 0x9c
 8001384:	f7ff fefe 	bl	8001184 <BMP280_Read16LE>
 8001388:	4603      	mov	r3, r0
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <BMP280_Init+0x190>)
 800138e:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001390:	209e      	movs	r0, #158	; 0x9e
 8001392:	f7ff fef7 	bl	8001184 <BMP280_Read16LE>
 8001396:	4603      	mov	r3, r0
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <BMP280_Init+0x194>)
 800139c:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	015b      	lsls	r3, r3, #5
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	78bb      	ldrb	r3, [r7, #2]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	20f4      	movs	r0, #244	; 0xf4
 80013bc:	f7ff fefc 	bl	80011b8 <BMP280_Write8>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000238 	.word	0x20000238
 80013cc:	40020000 	.word	0x40020000
 80013d0:	2000023f 	.word	0x2000023f
 80013d4:	2000023e 	.word	0x2000023e
 80013d8:	2000022a 	.word	0x2000022a
 80013dc:	2000023c 	.word	0x2000023c
 80013e0:	2000022c 	.word	0x2000022c
 80013e4:	20000224 	.word	0x20000224
 80013e8:	20000230 	.word	0x20000230
 80013ec:	20000226 	.word	0x20000226
 80013f0:	20000240 	.word	0x20000240
 80013f4:	20000244 	.word	0x20000244
 80013f8:	2000022e 	.word	0x2000022e
 80013fc:	20000234 	.word	0x20000234
 8001400:	20000228 	.word	0x20000228
 8001404:	20000232 	.word	0x20000232
 8001408:	20000242 	.word	0x20000242

0800140c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <BMP280_ReadTemperature+0xfc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d16d      	bne.n	80014f6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800141a:	20f4      	movs	r0, #244	; 0xf4
 800141c:	f7ff fe56 	bl	80010cc <BMP280_Read8>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	4619      	mov	r1, r3
 8001438:	20f4      	movs	r0, #244	; 0xf4
 800143a:	f7ff febd 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800143e:	20f4      	movs	r0, #244	; 0xf4
 8001440:	f7ff fe44 	bl	80010cc <BMP280_Read8>
 8001444:	4603      	mov	r3, r0
 8001446:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001450:	7dbb      	ldrb	r3, [r7, #22]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d14f      	bne.n	80014f6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001456:	20f4      	movs	r0, #244	; 0xf4
 8001458:	f7ff fe38 	bl	80010cc <BMP280_Read8>
 800145c:	4603      	mov	r3, r0
 800145e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001460:	7dbb      	ldrb	r3, [r7, #22]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001468:	7dbb      	ldrb	r3, [r7, #22]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d000      	beq.n	8001470 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800146e:	e7f2      	b.n	8001456 <BMP280_ReadTemperature+0x4a>
				  break;
 8001470:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001472:	20fa      	movs	r0, #250	; 0xfa
 8001474:	f7ff fece 	bl	8001214 <BMP280_Read24>
 8001478:	4603      	mov	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	111b      	asrs	r3, r3, #4
 8001480:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	10da      	asrs	r2, r3, #3
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <BMP280_ReadTemperature+0x100>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <BMP280_ReadTemperature+0x104>)
 8001490:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	12db      	asrs	r3, r3, #11
 800149a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	111b      	asrs	r3, r3, #4
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <BMP280_ReadTemperature+0x100>)
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	1112      	asrs	r2, r2, #4
 80014aa:	4918      	ldr	r1, [pc, #96]	; (800150c <BMP280_ReadTemperature+0x100>)
 80014ac:	8809      	ldrh	r1, [r1, #0]
 80014ae:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <BMP280_ReadTemperature+0x108>)
 80014b8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014c0:	139b      	asrs	r3, r3, #14
 80014c2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <BMP280_ReadTemperature+0x10c>)
 80014cc:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <BMP280_ReadTemperature+0x10c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3380      	adds	r3, #128	; 0x80
 80014da:	121b      	asrs	r3, r3, #8
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800151c <BMP280_ReadTemperature+0x110>
 80014f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014f4:	e001      	b.n	80014fa <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80014f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001520 <BMP280_ReadTemperature+0x114>
 80014fa:	eef0 7a47 	vmov.f32	s15, s14
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000023f 	.word	0x2000023f
 800150c:	2000023c 	.word	0x2000023c
 8001510:	2000022c 	.word	0x2000022c
 8001514:	20000224 	.word	0x20000224
 8001518:	20000248 	.word	0x20000248
 800151c:	42c80000 	.word	0x42c80000
 8001520:	c2c60000 	.word	0xc2c60000

08001524 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001528:	b09c      	sub	sp, #112	; 0x70
 800152a:	af00      	add	r7, sp, #0
 800152c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800152e:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001530:	f7ff ff6c 	bl	800140c <BMP280_ReadTemperature>
 8001534:	eef0 7a40 	vmov.f32	s15, s0
 8001538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153a:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 800153e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001714 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001548:	eef4 7a47 	vcmp.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d101      	bne.n	8001556 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001552:	23ff      	movs	r3, #255	; 0xff
 8001554:	e1d8      	b.n	8001908 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001556:	20f7      	movs	r0, #247	; 0xf7
 8001558:	f7ff fe5c 	bl	8001214 <BMP280_Read24>
 800155c:	4603      	mov	r3, r0
 800155e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001562:	111b      	asrs	r3, r3, #4
 8001564:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001570:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001574:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001578:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800157c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800157e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001580:	fb03 f102 	mul.w	r1, r3, r2
 8001584:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001588:	fb03 f302 	mul.w	r3, r3, r2
 800158c:	18ca      	adds	r2, r1, r3
 800158e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001590:	fba3 4503 	umull	r4, r5, r3, r3
 8001594:	1953      	adds	r3, r2, r5
 8001596:	461d      	mov	r5, r3
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015a4:	fb02 f005 	mul.w	r0, r2, r5
 80015a8:	fb04 f103 	mul.w	r1, r4, r3
 80015ac:	4401      	add	r1, r0
 80015ae:	fba4 2302 	umull	r2, r3, r4, r2
 80015b2:	4419      	add	r1, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80015ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80015be:	4b58      	ldr	r3, [pc, #352]	; (8001720 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015cc:	fb03 f001 	mul.w	r0, r3, r1
 80015d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015d2:	fb02 f101 	mul.w	r1, r2, r1
 80015d6:	4408      	add	r0, r1
 80015d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015da:	fba1 2302 	umull	r2, r3, r1, r2
 80015de:	18c1      	adds	r1, r0, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	f04f 0000 	mov.w	r0, #0
 80015e6:	f04f 0100 	mov.w	r1, #0
 80015ea:	0459      	lsls	r1, r3, #17
 80015ec:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80015f0:	0450      	lsls	r0, r2, #17
 80015f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015f6:	eb12 0800 	adds.w	r8, r2, r0
 80015fa:	eb43 0901 	adc.w	r9, r3, r1
 80015fe:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001608:	b21a      	sxth	r2, r3
 800160a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	00d1      	lsls	r1, r2, #3
 8001618:	2000      	movs	r0, #0
 800161a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800161e:	1814      	adds	r4, r2, r0
 8001620:	61bc      	str	r4, [r7, #24]
 8001622:	414b      	adcs	r3, r1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800162e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001632:	fb03 f102 	mul.w	r1, r3, r2
 8001636:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163a:	fb03 f302 	mul.w	r3, r3, r2
 800163e:	18ca      	adds	r2, r1, r3
 8001640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001642:	fba3 4503 	umull	r4, r5, r3, r3
 8001646:	1953      	adds	r3, r2, r5
 8001648:	461d      	mov	r5, r3
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <BMP280_ReadTemperatureAndPressure+0x204>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	b21a      	sxth	r2, r3
 8001652:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001656:	fb02 f005 	mul.w	r0, r2, r5
 800165a:	fb04 f103 	mul.w	r1, r4, r3
 800165e:	4401      	add	r1, r0
 8001660:	fba4 2302 	umull	r2, r3, r4, r2
 8001664:	4419      	add	r1, r3
 8001666:	460b      	mov	r3, r1
 8001668:	f04f 0800 	mov.w	r8, #0
 800166c:	f04f 0900 	mov.w	r9, #0
 8001670:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001674:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001678:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <BMP280_ReadTemperatureAndPressure+0x208>)
 800167e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001682:	b21a      	sxth	r2, r3
 8001684:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001688:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800168a:	fb03 f001 	mul.w	r0, r3, r1
 800168e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001690:	fb02 f101 	mul.w	r1, r2, r1
 8001694:	1844      	adds	r4, r0, r1
 8001696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001698:	fba1 0102 	umull	r0, r1, r1, r2
 800169c:	1863      	adds	r3, r4, r1
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	030b      	lsls	r3, r1, #12
 80016aa:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016ae:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016b0:	eb18 0102 	adds.w	r1, r8, r2
 80016b4:	6139      	str	r1, [r7, #16]
 80016b6:	eb49 0303 	adc.w	r3, r9, r3
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016c0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80016c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016c8:	1c11      	adds	r1, r2, #0
 80016ca:	6439      	str	r1, [r7, #64]	; 0x40
 80016cc:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <BMP280_ReadTemperatureAndPressure+0x20c>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016e0:	4629      	mov	r1, r5
 80016e2:	fb02 f001 	mul.w	r0, r2, r1
 80016e6:	4621      	mov	r1, r4
 80016e8:	fb01 f103 	mul.w	r1, r1, r3
 80016ec:	4401      	add	r1, r0
 80016ee:	4620      	mov	r0, r4
 80016f0:	fba0 2302 	umull	r2, r3, r0, r2
 80016f4:	4419      	add	r1, r3
 80016f6:	460b      	mov	r3, r1
 80016f8:	f04f 0000 	mov.w	r0, #0
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	1058      	asrs	r0, r3, #1
 8001702:	17d9      	asrs	r1, r3, #31
 8001704:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8001708:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800170c:	4313      	orrs	r3, r2
 800170e:	d111      	bne.n	8001734 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001710:	2300      	movs	r3, #0
 8001712:	e0f9      	b.n	8001908 <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001714:	c2c60000 	.word	0xc2c60000
 8001718:	20000248 	.word	0x20000248
 800171c:	20000234 	.word	0x20000234
 8001720:	2000022e 	.word	0x2000022e
 8001724:	20000244 	.word	0x20000244
 8001728:	20000240 	.word	0x20000240
 800172c:	20000226 	.word	0x20000226
 8001730:	20000230 	.word	0x20000230
	  }
	  p = 1048576 - adc_P;
 8001734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001736:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800173a:	461a      	mov	r2, r3
 800173c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001740:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001746:	105b      	asrs	r3, r3, #1
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174c:	07db      	lsls	r3, r3, #31
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001750:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001754:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001758:	4621      	mov	r1, r4
 800175a:	ebb1 0a02 	subs.w	sl, r1, r2
 800175e:	4629      	mov	r1, r5
 8001760:	eb61 0b03 	sbc.w	fp, r1, r3
 8001764:	4652      	mov	r2, sl
 8001766:	465b      	mov	r3, fp
 8001768:	1891      	adds	r1, r2, r2
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	415b      	adcs	r3, r3
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001774:	eb12 020a 	adds.w	r2, r2, sl
 8001778:	eb43 030b 	adc.w	r3, r3, fp
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0199      	lsls	r1, r3, #6
 8001786:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800178a:	0190      	lsls	r0, r2, #6
 800178c:	1812      	adds	r2, r2, r0
 800178e:	eb41 0303 	adc.w	r3, r1, r3
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0099      	lsls	r1, r3, #2
 800179c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017a0:	0090      	lsls	r0, r2, #2
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	eb12 020a 	adds.w	r2, r2, sl
 80017aa:	eb43 030b 	adc.w	r3, r3, fp
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	0099      	lsls	r1, r3, #2
 80017b8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017bc:	0090      	lsls	r0, r2, #2
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	eb12 010a 	adds.w	r1, r2, sl
 80017c6:	6339      	str	r1, [r7, #48]	; 0x30
 80017c8:	eb43 030b 	adc.w	r3, r3, fp
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017d6:	f7ff fa77 	bl	8000cc8 <__aeabi_ldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	b218      	sxth	r0, r3
 80017ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017ee:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	0b62      	lsrs	r2, r4, #13
 80017fc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001800:	136b      	asrs	r3, r5, #13
 8001802:	fb02 f501 	mul.w	r5, r2, r1
 8001806:	fb00 f403 	mul.w	r4, r0, r3
 800180a:	442c      	add	r4, r5
 800180c:	fba0 0102 	umull	r0, r1, r0, r2
 8001810:	1863      	adds	r3, r4, r1
 8001812:	4619      	mov	r1, r3
 8001814:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	0b62      	lsrs	r2, r4, #13
 8001822:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001826:	136b      	asrs	r3, r5, #13
 8001828:	fb02 f501 	mul.w	r5, r2, r1
 800182c:	fb00 f403 	mul.w	r4, r0, r3
 8001830:	442c      	add	r4, r5
 8001832:	fba0 0102 	umull	r0, r1, r0, r2
 8001836:	1863      	adds	r3, r4, r1
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	0e42      	lsrs	r2, r0, #25
 8001844:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001848:	164b      	asrs	r3, r1, #25
 800184a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	b21a      	sxth	r2, r3
 8001856:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800185a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800185c:	fb03 f001 	mul.w	r0, r3, r1
 8001860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001862:	fb02 f101 	mul.w	r1, r2, r1
 8001866:	1844      	adds	r4, r0, r1
 8001868:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800186a:	fba1 0102 	umull	r0, r1, r1, r2
 800186e:	1863      	adds	r3, r4, r1
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	0cc2      	lsrs	r2, r0, #19
 800187c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001880:	14cb      	asrs	r3, r1, #19
 8001882:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001886:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800188a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800188e:	1884      	adds	r4, r0, r2
 8001890:	62bc      	str	r4, [r7, #40]	; 0x28
 8001892:	eb41 0303 	adc.w	r3, r1, r3
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800189c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018a0:	4621      	mov	r1, r4
 80018a2:	1889      	adds	r1, r1, r2
 80018a4:	6239      	str	r1, [r7, #32]
 80018a6:	4629      	mov	r1, r5
 80018a8:	eb43 0101 	adc.w	r1, r3, r1
 80018ac:	6279      	str	r1, [r7, #36]	; 0x24
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ba:	4623      	mov	r3, r4
 80018bc:	0a18      	lsrs	r0, r3, #8
 80018be:	462b      	mov	r3, r5
 80018c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018c4:	462b      	mov	r3, r5
 80018c6:	1219      	asrs	r1, r3, #8
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <BMP280_ReadTemperatureAndPressure+0x3f8>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	b21c      	sxth	r4, r3
 80018d0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	012b      	lsls	r3, r5, #4
 80018de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018e2:	0122      	lsls	r2, r4, #4
 80018e4:	1884      	adds	r4, r0, r2
 80018e6:	603c      	str	r4, [r7, #0]
 80018e8:	eb41 0303 	adc.w	r3, r1, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <BMP280_ReadTemperatureAndPressure+0x3da>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001904:	601a      	str	r2, [r3, #0]

	  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3770      	adds	r7, #112	; 0x70
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001912:	bf00      	nop
 8001914:	20000242 	.word	0x20000242
 8001918:	20000232 	.word	0x20000232
 800191c:	20000228 	.word	0x20000228

08001920 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	f043 030c 	orr.w	r3, r3, #12
 800193e:	b2db      	uxtb	r3, r3
 8001940:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	b2db      	uxtb	r3, r3
 800194a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	f043 030c 	orr.w	r3, r3, #12
 8001952:	b2db      	uxtb	r3, r3
 8001954:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	b2db      	uxtb	r3, r3
 800195e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001960:	f107 0208 	add.w	r2, r7, #8
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2304      	movs	r3, #4
 800196a:	214e      	movs	r1, #78	; 0x4e
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <lcd_send_cmd+0x5c>)
 800196e:	f001 fda1 	bl	80034b4 <HAL_I2C_Master_Transmit>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000290 	.word	0x20000290

08001980 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f023 030f 	bic.w	r3, r3, #15
 8001990:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	f043 030d 	orr.w	r3, r3, #13
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f043 0309 	orr.w	r3, r3, #9
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	f043 030d 	orr.w	r3, r3, #13
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	f043 0309 	orr.w	r3, r3, #9
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	2364      	movs	r3, #100	; 0x64
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2304      	movs	r3, #4
 80019ca:	214e      	movs	r1, #78	; 0x4e
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <lcd_send_data+0x5c>)
 80019ce:	f001 fd71 	bl	80034b4 <HAL_I2C_Master_Transmit>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000290 	.word	0x20000290

080019e0 <lcd_clear>:

void lcd_clear (void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80019e6:	2080      	movs	r0, #128	; 0x80
 80019e8:	f7ff ff9a 	bl	8001920 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	e005      	b.n	80019fe <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80019f2:	2020      	movs	r0, #32
 80019f4:	f7ff ffc4 	bl	8001980 <lcd_send_data>
	for (int i=0; i<70; i++)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b45      	cmp	r3, #69	; 0x45
 8001a02:	ddf6      	ble.n	80019f2 <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f804 	bl	8001a14 <lcd_put_cur>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
    switch (row)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <lcd_put_cur+0x18>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d005      	beq.n	8001a36 <lcd_put_cur+0x22>
 8001a2a:	e009      	b.n	8001a40 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	603b      	str	r3, [r7, #0]
            break;
 8001a34:	e004      	b.n	8001a40 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a3c:	603b      	str	r3, [r7, #0]
            break;
 8001a3e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff6b 	bl	8001920 <lcd_send_cmd>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <lcd_init>:


void lcd_init (void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a56:	2032      	movs	r0, #50	; 0x32
 8001a58:	f001 f872 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a5c:	2030      	movs	r0, #48	; 0x30
 8001a5e:	f7ff ff5f 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001a62:	2005      	movs	r0, #5
 8001a64:	f001 f86c 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a68:	2030      	movs	r0, #48	; 0x30
 8001a6a:	f7ff ff59 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f001 f866 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a74:	2030      	movs	r0, #48	; 0x30
 8001a76:	f7ff ff53 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(10);
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f001 f860 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001a80:	2020      	movs	r0, #32
 8001a82:	f7ff ff4d 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f001 f85a 	bl	8002b40 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001a8c:	2028      	movs	r0, #40	; 0x28
 8001a8e:	f7ff ff47 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f001 f854 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001a98:	2008      	movs	r0, #8
 8001a9a:	f7ff ff41 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f001 f84e 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff ff3b 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f001 f848 	bl	8002b40 <HAL_Delay>
	HAL_Delay(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f001 f845 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ab6:	2006      	movs	r0, #6
 8001ab8:	f7ff ff32 	bl	8001920 <lcd_send_cmd>
	HAL_Delay(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f001 f83f 	bl	8002b40 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ac2:	200c      	movs	r0, #12
 8001ac4:	f7ff ff2c 	bl	8001920 <lcd_send_cmd>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	while (*str)
 8001ad4:	e006      	b.n	8001ae4 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff4e 	bl	8001980 <lcd_send_data>
	while (*str)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f4      	bne.n	8001ad6 <lcd_send_string+0xa>
	}
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	sscanf((char*)receive,"%f",&setvalue);
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_UART_RxCpltCallback+0x24>)
 8001b02:	4907      	ldr	r1, [pc, #28]	; (8001b20 <HAL_UART_RxCpltCallback+0x28>)
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <HAL_UART_RxCpltCallback+0x2c>)
 8001b06:	f006 fec1 	bl	800888c <siscanf>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)receive, 5);
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	4905      	ldr	r1, [pc, #20]	; (8001b24 <HAL_UART_RxCpltCallback+0x2c>)
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <HAL_UART_RxCpltCallback+0x30>)
 8001b10:	f004 fe96 	bl	8006840 <HAL_UART_Receive_IT>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000071c 	.word	0x2000071c
 8001b20:	0800cc28 	.word	0x0800cc28
 8001b24:	20000720 	.word	0x20000720
 8001b28:	2000024c 	.word	0x2000024c

08001b2c <PID>:



float PID(pid* pid, float setvalue, float temperature){
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b38:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0, P, I, D, error = 0, integral = 0, derivative = 0;
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]

	if(setvalue != 0){
 8001b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d076      	beq.n	8001c50 <PID+0x124>
	error = setvalue - temperature;
 8001b62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	P = pid->p.Kp * error;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	edc7 7a07 	vstr	s15, [r7, #28]

	integral = pid->previous_int + (error +(3*pid->windup)+ pid->previous_err);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b90:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001b94:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid->previous_int = integral;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki * integral * (pid->p.dt/2.0);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7fe fcdd 	bl	8000588 <__aeabi_f2d>
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcd6 	bl	8000588 <__aeabi_f2d>
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be4:	f7fe fe52 	bl	800088c <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fd22 	bl	8000638 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff f814 	bl	8000c28 <__aeabi_d2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	61bb      	str	r3, [r7, #24]

	derivative = (error - pid->previous_err)/pid->p.dt;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1c:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_err = error;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c24:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd * derivative;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a05 	vstr	s15, [r7, #20]

	u = P + I + D;
 8001c38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}
	return u;
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	ee07 3a90 	vmov	s15, r3
}
 8001c56:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}

08001c60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d17d      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x10e>
		 	  duty_f = 0;
 8001c72:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
			  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001c7a:	4941      	ldr	r1, [pc, #260]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c7c:	4841      	ldr	r0, [pc, #260]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c7e:	f7ff fc51 	bl	8001524 <BMP280_ReadTemperatureAndPressure>
			  u=PID(&pid1, setvalue, temperature);
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	eef0 0a47 	vmov.f32	s1, s14
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	483d      	ldr	r0, [pc, #244]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c98:	f7ff ff48 	bl	8001b2c <PID>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
			  if(u > 1){
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	dd0d      	ble.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x76>
					pid1.windup = 1.0 - u;
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cca:	edc3 7a06 	vstr	s15, [r3, #24]
					duty_f = 999.0;
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001cd0:	4a30      	ldr	r2, [pc, #192]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e024      	b.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0xc0>
				}
				else if(u < 0){
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d50e      	bpl.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0xa4>
					pid1.windup = 0.0 - u;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001d98 <HAL_TIM_PeriodElapsedCallback+0x138>
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cf6:	edc3 7a06 	vstr	s15, [r3, #24]
					duty_f = 0;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e00d      	b.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0xc0>
				}
				else{
					pid1.windup = 0.0;
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
					duty_f = 999 * u;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d9c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
				}
			  duty = (uint16_t) duty_f;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2a:	ee17 3a90 	vmov	r3, s15
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d32:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d36:	881a      	ldrh	r2, [r3, #0]
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
			  sprintf((char*)text, "%.2f, %u, \n\r", temperature, duty);
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc20 	bl	8000588 <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4914      	ldr	r1, [pc, #80]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d4e:	8809      	ldrh	r1, [r1, #0]
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4915      	ldr	r1, [pc, #84]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001d54:	4815      	ldr	r0, [pc, #84]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d56:	f006 fd79 	bl	800884c <siprintf>
			  //sprintf((char*)text, "%.2f, ", temperature);
			  HAL_UART_Transmit_IT(&huart3, (uint8_t*)text, strlen(text));
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d5c:	f7fe fa58 	bl	8000210 <strlen>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4911      	ldr	r1, [pc, #68]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d68:	4811      	ldr	r0, [pc, #68]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d6a:	f004 fd24 	bl	80067b6 <HAL_UART_Transmit_IT>

	}
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40001400 	.word	0x40001400
 8001d7c:	200007c8 	.word	0x200007c8
 8001d80:	20000704 	.word	0x20000704
 8001d84:	200006ec 	.word	0x200006ec
 8001d88:	2000071c 	.word	0x2000071c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000818 	.word	0x20000818
 8001d94:	4479c000 	.word	0x4479c000
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	4479c000 	.word	0x4479c000
 8001da0:	200007cc 	.word	0x200007cc
 8001da4:	20000780 	.word	0x20000780
 8001da8:	0800cc2c 	.word	0x0800cc2c
 8001dac:	20000708 	.word	0x20000708
 8001db0:	2000024c 	.word	0x2000024c

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f000 fe50 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 f862 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f000 fa34 	bl	800222c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001dc4:	f000 f9da 	bl	800217c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001dc8:	f000 fa02 	bl	80021d0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001dcc:	f000 f8f4 	bl	8001fb8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001dd0:	f000 f8c4 	bl	8001f5c <MX_I2C1_Init>
  MX_TIM7_Init();
 8001dd4:	f000 f99c 	bl	8002110 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001dd8:	f000 f924 	bl	8002024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	2101      	movs	r1, #1
 8001de2:	481e      	ldr	r0, [pc, #120]	; (8001e5c <main+0xa8>)
 8001de4:	f7ff fa46 	bl	8001274 <BMP280_Init>
  lcd_init();
 8001de8:	f7ff fe33 	bl	8001a52 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001dec:	481c      	ldr	r0, [pc, #112]	; (8001e60 <main+0xac>)
 8001dee:	f003 fca9 	bl	8005744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001df2:	2100      	movs	r1, #0
 8001df4:	481b      	ldr	r0, [pc, #108]	; (8001e64 <main+0xb0>)
 8001df6:	f003 fd6f 	bl	80058d8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)receive, 4);
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	491a      	ldr	r1, [pc, #104]	; (8001e68 <main+0xb4>)
 8001dfe:	481b      	ldr	r0, [pc, #108]	; (8001e6c <main+0xb8>)
 8001e00:	f004 fd1e 	bl	8006840 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_clear ();
 8001e04:	f7ff fdec 	bl	80019e0 <lcd_clear>
	  lcd_put_cur(0, 0);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe02 	bl	8001a14 <lcd_put_cur>
	  sprintf((char*)text, "Temp. %.2f C", temperature);
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <main+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbb7 	bl	8000588 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4915      	ldr	r1, [pc, #84]	; (8001e74 <main+0xc0>)
 8001e20:	4815      	ldr	r0, [pc, #84]	; (8001e78 <main+0xc4>)
 8001e22:	f006 fd13 	bl	800884c <siprintf>
	  lcd_send_string(text);
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <main+0xc4>)
 8001e28:	f7ff fe50 	bl	8001acc <lcd_send_string>

	  lcd_put_cur(1, 0);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff fdf0 	bl	8001a14 <lcd_put_cur>
	  sprintf((char*)text, "Set Temp. %.1f C",setvalue);
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <main+0xc8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fba5 	bl	8000588 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	490f      	ldr	r1, [pc, #60]	; (8001e80 <main+0xcc>)
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <main+0xc4>)
 8001e46:	f006 fd01 	bl	800884c <siprintf>
	  lcd_send_string(text);
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <main+0xc4>)
 8001e4c:	f7ff fe3e 	bl	8001acc <lcd_send_string>

	  HAL_Delay(1000);
 8001e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e54:	f000 fe74 	bl	8002b40 <HAL_Delay>
	  lcd_clear ();
 8001e58:	e7d4      	b.n	8001e04 <main+0x50>
 8001e5a:	bf00      	nop
 8001e5c:	20000728 	.word	0x20000728
 8001e60:	200007d0 	.word	0x200007d0
 8001e64:	20000780 	.word	0x20000780
 8001e68:	20000720 	.word	0x20000720
 8001e6c:	2000024c 	.word	0x2000024c
 8001e70:	200006ec 	.word	0x200006ec
 8001e74:	0800cc3c 	.word	0x0800cc3c
 8001e78:	20000708 	.word	0x20000708
 8001e7c:	2000071c 	.word	0x2000071c
 8001e80:	0800cc4c 	.word	0x0800cc4c

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b094      	sub	sp, #80	; 0x50
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	2234      	movs	r2, #52	; 0x34
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fe52 	bl	8007b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <SystemClock_Config+0xd0>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <SystemClock_Config+0xd0>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <SystemClock_Config+0xd0>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <SystemClock_Config+0xd4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <SystemClock_Config+0xd4>)
 8001ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <SystemClock_Config+0xd4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ee4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ee8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eea:	2302      	movs	r3, #2
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ef8:	23a8      	movs	r3, #168	; 0xa8
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f00:	2307      	movs	r3, #7
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fd17 	bl	8004940 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f18:	f000 fa4a 	bl	80023b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f20:	2302      	movs	r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	2105      	movs	r1, #5
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 ff0a 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f46:	f000 fa33 	bl	80023b0 <Error_Handler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3750      	adds	r7, #80	; 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <MX_I2C1_Init+0x54>)
 8001f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_I2C1_Init+0x58>)
 8001f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <MX_I2C1_Init+0x50>)
 8001f9a:	f001 f947 	bl	800322c <HAL_I2C_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 fa04 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000290 	.word	0x20000290
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	000186a0 	.word	0x000186a0

08001fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_SPI1_Init+0x64>)
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <MX_SPI1_Init+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_SPI1_Init+0x64>)
 8001fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_SPI1_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_SPI1_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_SPI1_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_SPI1_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_SPI1_Init+0x64>)
 8001fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_SPI1_Init+0x64>)
 8001fec:	2218      	movs	r2, #24
 8001fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_SPI1_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_SPI1_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_SPI1_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_SPI1_Init+0x64>)
 8002004:	220a      	movs	r2, #10
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_SPI1_Init+0x64>)
 800200a:	f002 ff37 	bl	8004e7c <HAL_SPI_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002014:	f000 f9cc 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000728 	.word	0x20000728
 8002020:	40013000 	.word	0x40013000

08002024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <MX_TIM2_Init+0xe8>)
 8002056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <MX_TIM2_Init+0xe8>)
 800205e:	2253      	movs	r2, #83	; 0x53
 8002060:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <MX_TIM2_Init+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <MX_TIM2_Init+0xe8>)
 800206a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <MX_TIM2_Init+0xe8>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <MX_TIM2_Init+0xe8>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800207c:	4823      	ldr	r0, [pc, #140]	; (800210c <MX_TIM2_Init+0xe8>)
 800207e:	f003 fb11 	bl	80056a4 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002088:	f000 f992 	bl	80023b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002096:	4619      	mov	r1, r3
 8002098:	481c      	ldr	r0, [pc, #112]	; (800210c <MX_TIM2_Init+0xe8>)
 800209a:	f003 feaf 	bl	8005dfc <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020a4:	f000 f984 	bl	80023b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <MX_TIM2_Init+0xe8>)
 80020aa:	f003 fbbb 	bl	8005824 <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020b4:	f000 f97c 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	4619      	mov	r1, r3
 80020c6:	4811      	ldr	r0, [pc, #68]	; (800210c <MX_TIM2_Init+0xe8>)
 80020c8:	f004 fa98 	bl	80065fc <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020d2:	f000 f96d 	bl	80023b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	; 0x60
 80020d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <MX_TIM2_Init+0xe8>)
 80020ee:	f003 fdc3 	bl	8005c78 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020f8:	f000 f95a 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <MX_TIM2_Init+0xe8>)
 80020fe:	f000 fa61 	bl	80025c4 <HAL_TIM_MspPostInit>

}
 8002102:	bf00      	nop
 8002104:	3738      	adds	r7, #56	; 0x38
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000780 	.word	0x20000780

08002110 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002116:	463b      	mov	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_TIM7_Init+0x64>)
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <MX_TIM7_Init+0x68>)
 8002122:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_TIM7_Init+0x64>)
 8002126:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800212a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_TIM7_Init+0x64>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_TIM7_Init+0x64>)
 8002134:	f242 720f 	movw	r2, #9999	; 0x270f
 8002138:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_TIM7_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM7_Init+0x64>)
 8002142:	f003 faaf 	bl	80056a4 <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800214c:	f000 f930 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_TIM7_Init+0x64>)
 800215e:	f004 fa4d 	bl	80065fc <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002168:	f000 f922 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200007d0 	.word	0x200007d0
 8002178:	40001400 	.word	0x40001400

0800217c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <MX_USART3_UART_Init+0x50>)
 8002184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800218c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021b4:	f004 fab2 	bl	800671c <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021be:	f000 f8f7 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000024c 	.word	0x2000024c
 80021cc:	40004800 	.word	0x40004800

080021d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021de:	2206      	movs	r2, #6
 80021e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f0:	2202      	movs	r2, #2
 80021f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002208:	2201      	movs	r2, #1
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002214:	f001 fc55 	bl	8003ac2 <HAL_PCD_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800221e:	f000 f8c7 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002e4 	.word	0x200002e4

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	4b55      	ldr	r3, [pc, #340]	; (800239c <MX_GPIO_Init+0x170>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a54      	ldr	r2, [pc, #336]	; (800239c <MX_GPIO_Init+0x170>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b52      	ldr	r3, [pc, #328]	; (800239c <MX_GPIO_Init+0x170>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	4b4e      	ldr	r3, [pc, #312]	; (800239c <MX_GPIO_Init+0x170>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a4d      	ldr	r2, [pc, #308]	; (800239c <MX_GPIO_Init+0x170>)
 8002268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b4b      	ldr	r3, [pc, #300]	; (800239c <MX_GPIO_Init+0x170>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <MX_GPIO_Init+0x170>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a46      	ldr	r2, [pc, #280]	; (800239c <MX_GPIO_Init+0x170>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b44      	ldr	r3, [pc, #272]	; (800239c <MX_GPIO_Init+0x170>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b40      	ldr	r3, [pc, #256]	; (800239c <MX_GPIO_Init+0x170>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a3f      	ldr	r2, [pc, #252]	; (800239c <MX_GPIO_Init+0x170>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <MX_GPIO_Init+0x170>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b39      	ldr	r3, [pc, #228]	; (800239c <MX_GPIO_Init+0x170>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a38      	ldr	r2, [pc, #224]	; (800239c <MX_GPIO_Init+0x170>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b36      	ldr	r3, [pc, #216]	; (800239c <MX_GPIO_Init+0x170>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <MX_GPIO_Init+0x170>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a31      	ldr	r2, [pc, #196]	; (800239c <MX_GPIO_Init+0x170>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b2f      	ldr	r3, [pc, #188]	; (800239c <MX_GPIO_Init+0x170>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2110      	movs	r1, #16
 80022ee:	482c      	ldr	r0, [pc, #176]	; (80023a0 <MX_GPIO_Init+0x174>)
 80022f0:	f000 ff82 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f244 0181 	movw	r1, #16513	; 0x4081
 80022fa:	482a      	ldr	r0, [pc, #168]	; (80023a4 <MX_GPIO_Init+0x178>)
 80022fc:	f000 ff7c 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	4828      	ldr	r0, [pc, #160]	; (80023a8 <MX_GPIO_Init+0x17c>)
 8002306:	f000 ff77 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800230a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002310:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4822      	ldr	r0, [pc, #136]	; (80023ac <MX_GPIO_Init+0x180>)
 8002322:	f000 fdd5 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002326:	2310      	movs	r3, #16
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <MX_GPIO_Init+0x174>)
 800233e:	f000 fdc7 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002342:	f244 0381 	movw	r3, #16513	; 0x4081
 8002346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <MX_GPIO_Init+0x178>)
 800235c:	f000 fdb8 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <MX_GPIO_Init+0x17c>)
 8002378:	f000 fdaa 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_GPIO_Init+0x17c>)
 8002390:	f000 fd9e 	bl	8002ed0 <HAL_GPIO_Init>

}
 8002394:	bf00      	nop
 8002396:	3730      	adds	r7, #48	; 0x30
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40020800 	.word	0x40020800

080023b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <Error_Handler+0x8>
	...

080023bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_I2C_MspInit+0x84>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12c      	bne.n	8002488 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800244a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	2312      	movs	r3, #18
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245c:	2304      	movs	r3, #4
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	480c      	ldr	r0, [pc, #48]	; (8002498 <HAL_I2C_MspInit+0x8c>)
 8002468:	f000 fd32 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800247a:	6413      	str	r3, [r2, #64]	; 0x40
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_I2C_MspInit+0x88>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40005400 	.word	0x40005400
 8002494:	40023800 	.word	0x40023800
 8002498:	40020400 	.word	0x40020400

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d133      	bne.n	8002526 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a14      	ldr	r2, [pc, #80]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_SPI_MspInit+0x98>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	23e0      	movs	r3, #224	; 0xe0
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002506:	2305      	movs	r3, #5
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <HAL_SPI_MspInit+0x9c>)
 8002512:	f000 fcdd 	bl	8002ed0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2023      	movs	r0, #35	; 0x23
 800251c:	f000 fc0f 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002520:	2023      	movs	r0, #35	; 0x23
 8002522:	f000 fc28 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013000 	.word	0x40013000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d116      	bne.n	800257c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	201c      	movs	r0, #28
 8002570:	f000 fbe5 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002574:	201c      	movs	r0, #28
 8002576:	f000 fbfe 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800257a:	e01a      	b.n	80025b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_TIM_Base_MspInit+0x84>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d115      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0x80>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2037      	movs	r0, #55	; 0x37
 80025a8:	f000 fbc9 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025ac:	2037      	movs	r0, #55	; 0x37
 80025ae:	f000 fbe2 	bl	8002d76 <HAL_NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40001400 	.word	0x40001400

080025c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d11d      	bne.n	8002622 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002602:	2301      	movs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4619      	mov	r1, r3
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <HAL_TIM_MspPostInit+0x6c>)
 800261e:	f000 fc57 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002622:	bf00      	nop
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_UART_MspInit+0x94>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d134      	bne.n	80026c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_UART_MspInit+0x98>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x98>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800268e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026a0:	2307      	movs	r3, #7
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <HAL_UART_MspInit+0x9c>)
 80026ac:	f000 fc10 	bl	8002ed0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2027      	movs	r0, #39	; 0x27
 80026b6:	f000 fb42 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026ba:	2027      	movs	r0, #39	; 0x27
 80026bc:	f000 fb5b 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40004800 	.word	0x40004800
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020c00 	.word	0x40020c00

080026d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0a0      	sub	sp, #128	; 0x80
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	225c      	movs	r2, #92	; 0x5c
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fa21 	bl	8007b3c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d14e      	bne.n	80027a2 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800270a:	2300      	movs	r3, #0
 800270c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fc38 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800271e:	f7ff fe47 	bl	80023b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800273e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002742:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002750:	230a      	movs	r3, #10
 8002752:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002758:	4619      	mov	r1, r3
 800275a:	4815      	ldr	r0, [pc, #84]	; (80027b0 <HAL_PCD_MspInit+0xdc>)
 800275c:	f000 fbb8 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002772:	4619      	mov	r1, r3
 8002774:	480e      	ldr	r0, [pc, #56]	; (80027b0 <HAL_PCD_MspInit+0xdc>)
 8002776:	f000 fbab 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	6353      	str	r3, [r2, #52]	; 0x34
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_PCD_MspInit+0xd8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3780      	adds	r7, #128	; 0x80
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 f97e 	bl	8002b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM2_IRQHandler+0x10>)
 800280e:	f003 f92b 	bl	8005a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000780 	.word	0x20000780

0800281c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <SPI1_IRQHandler+0x10>)
 8002822:	f002 fd57 	bl	80052d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000728 	.word	0x20000728

08002830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <USART3_IRQHandler+0x10>)
 8002836:	f004 f833 	bl	80068a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000024c 	.word	0x2000024c

08002844 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <TIM7_IRQHandler+0x10>)
 800284a:	f003 f90d 	bl	8005a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200007d0 	.word	0x200007d0

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_kill>:

int _kill(int pid, int sig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002872:	f005 f939 	bl	8007ae8 <__errno>
 8002876:	4603      	mov	r3, r0
 8002878:	2216      	movs	r2, #22
 800287a:	601a      	str	r2, [r3, #0]
	return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_exit>:

void _exit (int status)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ffe7 	bl	8002868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800289a:	e7fe      	b.n	800289a <_exit+0x12>

0800289c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00a      	b.n	80028c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ae:	f3af 8000 	nop.w
 80028b2:	4601      	mov	r1, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf0      	blt.n	80028ae <_read+0x12>
	}

return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e009      	b.n	80028fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf1      	blt.n	80028e8 <_write+0x12>
	}
	return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_close>:

int _close(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return -1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002936:	605a      	str	r2, [r3, #4]
	return 0;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_isatty>:

int _isatty(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	return 1;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
	return 0;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f005 f89e 	bl	8007ae8 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20020000 	.word	0x20020000
 80029d8:	00000400 	.word	0x00000400
 80029dc:	20000218 	.word	0x20000218
 80029e0:	20000830 	.word	0x20000830

080029e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a0e:	490e      	ldr	r1, [pc, #56]	; (8002a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a24:	4c0b      	ldr	r4, [pc, #44]	; (8002a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a32:	f7ff ffd7 	bl	80029e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a36:	f005 f85d 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3a:	f7ff f9bb 	bl	8001db4 <main>
  bx  lr    
 8002a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002a4c:	0800d15c 	.word	0x0800d15c
  ldr r2, =_sbss
 8002a50:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002a54:	20000830 	.word	0x20000830

08002a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC_IRQHandler>
	...

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <HAL_Init+0x40>)
 8002a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_Init+0x40>)
 8002a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_Init+0x40>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 f94f 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f808 	bl	8002aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7ff fc94 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x54>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_InitTick+0x58>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f967 	bl	8002d92 <HAL_SYSTICK_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00e      	b.n	8002aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d80a      	bhi.n	8002aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f000 f92f 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae0:	4a06      	ldr	r2, [pc, #24]	; (8002afc <HAL_InitTick+0x5c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000001c 	.word	0x2000001c
 8002af8:	20000024 	.word	0x20000024
 8002afc:	20000020 	.word	0x20000020

08002b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x20>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_IncTick+0x24>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <HAL_IncTick+0x24>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000024 	.word	0x20000024
 8002b24:	2000081c 	.word	0x2000081c

08002b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_GetTick+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000081c 	.word	0x2000081c

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff ffee 	bl	8002b28 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffde 	bl	8002b28 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000024 	.word	0x20000024

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff29 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d50:	f7ff ff3e 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff ff8e 	bl	8002c7c <NVIC_EncodePriority>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff31 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <SysTick_Config>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff feb6 	bl	8002b28 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d008      	beq.n	8002ddc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e052      	b.n	8002e82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0216 	bic.w	r2, r2, #22
 8002dea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <HAL_DMA_Abort+0x62>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0208 	bic.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2c:	e013      	b.n	8002e56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e2e:	f7ff fe7b 	bl	8002b28 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d90c      	bls.n	8002e56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e015      	b.n	8002e82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e4      	bne.n	8002e2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	223f      	movs	r2, #63	; 0x3f
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e00c      	b.n	8002ec2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2205      	movs	r2, #5
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e165      	b.n	80031b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8154 	bne.w	80031b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80ae 	beq.w	80031b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_GPIO_Init+0x300>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_GPIO_Init+0x300>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_GPIO_Init+0x300>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <HAL_GPIO_Init+0x308>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x21a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4e      	ldr	r2, [pc, #312]	; (80031dc <HAL_GPIO_Init+0x30c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x216>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_GPIO_Init+0x310>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x212>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4c      	ldr	r2, [pc, #304]	; (80031e4 <HAL_GPIO_Init+0x314>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x20e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_GPIO_Init+0x318>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x20a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_GPIO_Init+0x31c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x206>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x320>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x202>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x304>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <HAL_GPIO_Init+0x324>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae96 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003214:	e003      	b.n	800321e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	041a      	lsls	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e12b      	b.n	8003496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff f8da 	bl	800240c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003290:	f000 fe52 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a81      	ldr	r2, [pc, #516]	; (80034a0 <HAL_I2C_Init+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d807      	bhi.n	80032b0 <HAL_I2C_Init+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_I2C_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e006      	b.n	80032be <HAL_I2C_Init+0x92>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7d      	ldr	r2, [pc, #500]	; (80034a8 <HAL_I2C_Init+0x27c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e7      	b.n	8003496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a78      	ldr	r2, [pc, #480]	; (80034ac <HAL_I2C_Init+0x280>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_I2C_Init+0x274>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <HAL_I2C_Init+0xd4>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e009      	b.n	8003314 <HAL_I2C_Init+0xe8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_I2C_Init+0x284>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	495c      	ldr	r1, [pc, #368]	; (80034a0 <HAL_I2C_Init+0x274>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d819      	bhi.n	8003368 <HAL_I2C_Init+0x13c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e59      	subs	r1, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_I2C_Init+0x138>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb1 f3f3 	udiv	r3, r1, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	e051      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003364:	2304      	movs	r3, #4
 8003366:	e04f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_I2C_Init+0x168>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_I2C_Init+0x18e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x196>
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_I2C_Init+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e58      	subs	r0, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6911      	ldr	r1, [r2, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	000186a0 	.word	0x000186a0
 80034a4:	001e847f 	.word	0x001e847f
 80034a8:	003d08ff 	.word	0x003d08ff
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	461a      	mov	r2, r3
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
 80034c4:	4613      	mov	r3, r2
 80034c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff fb2e 	bl	8002b28 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	f040 80e0 	bne.w	800369c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2319      	movs	r3, #25
 80034e2:	2201      	movs	r2, #1
 80034e4:	4970      	ldr	r1, [pc, #448]	; (80036a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f964 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0d3      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x50>
 8003500:	2302      	movs	r3, #2
 8003502:	e0cc      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d007      	beq.n	800352a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	; 0x21
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2210      	movs	r2, #16
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <HAL_I2C_Master_Transmit+0x1f8>)
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f89c 	bl	80036b0 <I2C_MasterRequestWrite>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e08d      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003598:	e066      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f9de 	bl	8003960 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d107      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06b      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d11b      	bne.n	800363c <HAL_I2C_Master_Transmit+0x188>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6a39      	ldr	r1, [r7, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9ce 	bl	80039e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e01a      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d194      	bne.n	800359a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	00100002 	.word	0x00100002
 80036ac:	ffff0000 	.word	0xffff0000

080036b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	460b      	mov	r3, r1
 80036be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d006      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d003      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d107      	bne.n	8003704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f84f 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d103      	bne.n	8003734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e035      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e01b      	b.n	800378c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	11db      	asrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f063 030f 	orn	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	490e      	ldr	r1, [pc, #56]	; (80037ac <I2C_MasterRequestWrite+0xfc>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f875 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e010      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <I2C_MasterRequestWrite+0x100>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f865 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010008 	.word	0x00010008
 80037b0:	00010002 	.word	0x00010002

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e025      	b.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d021      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7ff f9ab 	bl	8002b28 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e023      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	e00c      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0b6      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003870:	e051      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d123      	bne.n	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0204 	orr.w	r2, r3, #4
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e046      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d021      	beq.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7ff f929 	bl	8002b28 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e020      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	e00b      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d18d      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f878 	bl	8003a64 <I2C_IsAcknowledgeFailed>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e02d      	b.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d021      	beq.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7ff f8cf 	bl	8002b28 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d116      	bne.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e007      	b.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d1ca      	bne.n	800396e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ee:	e02d      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f837 	bl	8003a64 <I2C_IsAcknowledgeFailed>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e02d      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d021      	beq.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7ff f88e 	bl	8002b28 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d1ca      	bne.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7a:	d11b      	bne.n	8003ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0204 	orr.w	r2, r3, #4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac4:	b08f      	sub	sp, #60	; 0x3c
 8003ac6:	af0a      	add	r7, sp, #40	; 0x28
 8003ac8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e116      	b.n	8003d02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe fdf0 	bl	80026d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2203      	movs	r2, #3
 8003af8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fd6f 	bl	80075f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	687e      	ldr	r6, [r7, #4]
 8003b20:	466d      	mov	r5, sp
 8003b22:	f106 0410 	add.w	r4, r6, #16
 8003b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b36:	1d33      	adds	r3, r6, #4
 8003b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b3a:	6838      	ldr	r0, [r7, #0]
 8003b3c:	f003 fcfa 	bl	8007534 <USB_CoreInit>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0d7      	b.n	8003d02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fd5d 	bl	8007618 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e04a      	b.n	8003bfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	333d      	adds	r3, #61	; 0x3d
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	b298      	uxth	r0, r3
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3342      	adds	r3, #66	; 0x42
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	333f      	adds	r3, #63	; 0x3f
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	; 0x44
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3348      	adds	r3, #72	; 0x48
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3350      	adds	r3, #80	; 0x50
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d3af      	bcc.n	8003b64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e044      	b.n	8003c94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3301      	adds	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3b5      	bcc.n	8003c0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	687e      	ldr	r6, [r7, #4]
 8003ca6:	466d      	mov	r5, sp
 8003ca8:	f106 0410 	add.w	r4, r6, #16
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cbc:	1d33      	adds	r3, r6, #4
 8003cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc0:	6838      	ldr	r0, [r7, #0]
 8003cc2:	f003 fcf5 	bl	80076b0 <USB_DevInit>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e014      	b.n	8003d02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f80a 	bl	8003d0a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fe93 	bl	8007a26 <USB_DevDisconnect>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	f043 0303 	orr.w	r3, r3, #3
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fe70 	bl	8002b28 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fe6c 	bl	8002b28 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 fb7f 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fdd0 	bl	8002aa0 <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	0800cc6c 	.word	0x0800cc6c
 8003f18:	2000001c 	.word	0x2000001c
 8003f1c:	20000020 	.word	0x20000020

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000001c 	.word	0x2000001c

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800cc7c 	.word	0x0800cc7c

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f64:	f7ff ffdc 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	0800cc7c 	.word	0x0800cc7c

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	496c      	ldr	r1, [pc, #432]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003fee:	4b64      	ldr	r3, [pc, #400]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	4960      	ldr	r1, [pc, #384]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d017      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401c:	4b58      	ldr	r3, [pc, #352]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4955      	ldr	r1, [pc, #340]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d101      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004058:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800405a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	4946      	ldr	r1, [pc, #280]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d101      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004078:	2301      	movs	r3, #1
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 808a 	beq.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a38      	ldr	r2, [pc, #224]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040b2:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a33      	ldr	r2, [pc, #204]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040be:	f7fe fd33 	bl	8002b28 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7fe fd2f 	bl	8002b28 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e278      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040d8:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040e4:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d028      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004102:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800410c:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004118:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d114      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe fcfd 	bl	8002b28 <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe fcf9 	bl	8002b28 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e240      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004160:	d114      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	4902      	ldr	r1, [pc, #8]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]
 800417c:	e00c      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40007000 	.word	0x40007000
 8004188:	42470e40 	.word	0x42470e40
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a49      	ldr	r2, [pc, #292]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004192:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004196:	6093      	str	r3, [r2, #8]
 8004198:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800419a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	4944      	ldr	r1, [pc, #272]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80041be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fc:	492e      	ldr	r1, [pc, #184]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d011      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004210:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	4926      	ldr	r1, [pc, #152]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422e:	d101      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004230:	2301      	movs	r3, #1
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	491a      	ldr	r1, [pc, #104]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425e:	2b00      	cmp	r3, #0
 8004260:	d011      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004268:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004270:	4911      	ldr	r1, [pc, #68]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004280:	d101      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004282:	2301      	movs	r3, #1
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d005      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004294:	f040 80ff 	bne.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f7fe fc43 	bl	8002b28 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a4:	e00e      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042a6:	f7fe fc3f 	bl	8002b28 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d907      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e188      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80042b8:	40023800 	.word	0x40023800
 80042bc:	424711e0 	.word	0x424711e0
 80042c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c4:	4b7e      	ldr	r3, [pc, #504]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ea      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d028      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d124      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042f8:	4b71      	ldr	r3, [pc, #452]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	3301      	adds	r3, #1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800430a:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004310:	0e1b      	lsrs	r3, r3, #24
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	431a      	orrs	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	431a      	orrs	r2, r3
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	4961      	ldr	r1, [pc, #388]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004360:	2b00      	cmp	r3, #0
 8004362:	d035      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d130      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800436e:	4b54      	ldr	r3, [pc, #336]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004380:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	0f1b      	lsrs	r3, r3, #28
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	019b      	lsls	r3, r3, #6
 8004398:	431a      	orrs	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	3b01      	subs	r3, #1
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	431a      	orrs	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	071b      	lsls	r3, r3, #28
 80043b0:	4943      	ldr	r1, [pc, #268]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043be:	f023 021f 	bic.w	r2, r3, #31
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	493d      	ldr	r1, [pc, #244]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d029      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e4:	d124      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043f8:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fe:	0f1b      	lsrs	r3, r3, #28
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	019b      	lsls	r3, r3, #6
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	431a      	orrs	r2, r3
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	431a      	orrs	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	071b      	lsls	r3, r3, #28
 8004428:	4925      	ldr	r1, [pc, #148]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	3b01      	subs	r3, #1
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	071b      	lsls	r3, r3, #28
 8004462:	4917      	ldr	r1, [pc, #92]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004470:	f7fe fb5a 	bl	8002b28 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004478:	f7fe fb56 	bl	8002b28 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e09f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 8095 	bne.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044a4:	f7fe fb40 	bl	8002b28 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044aa:	e00f      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044ac:	f7fe fb3c 	bl	8002b28 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d908      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e085      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	42470068 	.word	0x42470068
 80044c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d8:	d0e8      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d127      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004502:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	431a      	orrs	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	4928      	ldr	r1, [pc, #160]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800453a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	3b01      	subs	r3, #1
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4922      	ldr	r1, [pc, #136]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01d      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004566:	d118      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	019b      	lsls	r3, r3, #6
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	4910      	ldr	r1, [pc, #64]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fe fac2 	bl	8002b28 <HAL_GetTick>
 80045a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045a8:	f7fe fabe 	bl	8002b28 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e007      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c6:	d1ef      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3730      	adds	r7, #48	; 0x30
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	42470070 	.word	0x42470070

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b088      	sub	sp, #32
 80045e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f8:	4bce      	ldr	r3, [pc, #824]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b0c      	cmp	r3, #12
 8004602:	f200 818d 	bhi.w	8004920 <HAL_RCC_GetSysClockFreq+0x344>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCC_GetSysClockFreq+0x30>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004641 	.word	0x08004641
 8004610:	08004921 	.word	0x08004921
 8004614:	08004921 	.word	0x08004921
 8004618:	08004921 	.word	0x08004921
 800461c:	08004647 	.word	0x08004647
 8004620:	08004921 	.word	0x08004921
 8004624:	08004921 	.word	0x08004921
 8004628:	08004921 	.word	0x08004921
 800462c:	0800464d 	.word	0x0800464d
 8004630:	08004921 	.word	0x08004921
 8004634:	08004921 	.word	0x08004921
 8004638:	08004921 	.word	0x08004921
 800463c:	080047c1 	.word	0x080047c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4bbd      	ldr	r3, [pc, #756]	; (8004938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004642:	61bb      	str	r3, [r7, #24]
       break;
 8004644:	e16f      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004646:	4bbd      	ldr	r3, [pc, #756]	; (800493c <HAL_RCC_GetSysClockFreq+0x360>)
 8004648:	61bb      	str	r3, [r7, #24]
      break;
 800464a:	e16c      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800464c:	4bb9      	ldr	r3, [pc, #740]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004654:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004656:	4bb7      	ldr	r3, [pc, #732]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d053      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004662:	4bb4      	ldr	r3, [pc, #720]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	461a      	mov	r2, r3
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	ea02 0400 	and.w	r4, r2, r0
 800467a:	603c      	str	r4, [r7, #0]
 800467c:	400b      	ands	r3, r1
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004684:	4620      	mov	r0, r4
 8004686:	4629      	mov	r1, r5
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	014b      	lsls	r3, r1, #5
 8004692:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004696:	0142      	lsls	r2, r0, #5
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	4623      	mov	r3, r4
 800469e:	1ac0      	subs	r0, r0, r3
 80046a0:	462b      	mov	r3, r5
 80046a2:	eb61 0103 	sbc.w	r1, r1, r3
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046b4:	0182      	lsls	r2, r0, #6
 80046b6:	1a12      	subs	r2, r2, r0
 80046b8:	eb63 0301 	sbc.w	r3, r3, r1
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	00d9      	lsls	r1, r3, #3
 80046c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ca:	00d0      	lsls	r0, r2, #3
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4621      	mov	r1, r4
 80046d2:	1852      	adds	r2, r2, r1
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb43 0101 	adc.w	r1, r3, r1
 80046da:	460b      	mov	r3, r1
 80046dc:	f04f 0000 	mov.w	r0, #0
 80046e0:	f04f 0100 	mov.w	r1, #0
 80046e4:	0259      	lsls	r1, r3, #9
 80046e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046ea:	0250      	lsls	r0, r2, #9
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	f7fc fb34 	bl	8000d68 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e04c      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b8a      	ldr	r3, [pc, #552]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	ea02 0a00 	and.w	sl, r2, r0
 8004722:	ea03 0b01 	and.w	fp, r3, r1
 8004726:	4650      	mov	r0, sl
 8004728:	4659      	mov	r1, fp
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	014b      	lsls	r3, r1, #5
 8004734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004738:	0142      	lsls	r2, r0, #5
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	ebb0 000a 	subs.w	r0, r0, sl
 8004742:	eb61 010b 	sbc.w	r1, r1, fp
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004754:	0182      	lsls	r2, r0, #6
 8004756:	1a12      	subs	r2, r2, r0
 8004758:	eb63 0301 	sbc.w	r3, r3, r1
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	00d9      	lsls	r1, r3, #3
 8004766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476a:	00d0      	lsls	r0, r2, #3
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	eb12 020a 	adds.w	r2, r2, sl
 8004774:	eb43 030b 	adc.w	r3, r3, fp
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0299      	lsls	r1, r3, #10
 8004782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004786:	0290      	lsls	r0, r2, #10
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f7fc fae6 	bl	8000d68 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b63      	ldr	r3, [pc, #396]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	61bb      	str	r3, [r7, #24]
      break;
 80047be:	e0b2      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	4b5c      	ldr	r3, [pc, #368]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ca:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04d      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	ea02 0800 	and.w	r8, r2, r0
 80047ee:	ea03 0901 	and.w	r9, r3, r1
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	014b      	lsls	r3, r1, #5
 8004800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004804:	0142      	lsls	r2, r0, #5
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	ebb0 0008 	subs.w	r0, r0, r8
 800480e:	eb61 0109 	sbc.w	r1, r1, r9
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	018b      	lsls	r3, r1, #6
 800481c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004820:	0182      	lsls	r2, r0, #6
 8004822:	1a12      	subs	r2, r2, r0
 8004824:	eb63 0301 	sbc.w	r3, r3, r1
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	00d9      	lsls	r1, r3, #3
 8004832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004836:	00d0      	lsls	r0, r2, #3
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	eb12 0208 	adds.w	r2, r2, r8
 8004840:	eb43 0309 	adc.w	r3, r3, r9
 8004844:	f04f 0000 	mov.w	r0, #0
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	0259      	lsls	r1, r3, #9
 800484e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004852:	0250      	lsls	r0, r2, #9
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	461a      	mov	r2, r3
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	f7fc fa80 	bl	8000d68 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e04a      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	461a      	mov	r2, r3
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	ea02 0400 	and.w	r4, r2, r0
 800488a:	ea03 0501 	and.w	r5, r3, r1
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	014b      	lsls	r3, r1, #5
 800489c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048a0:	0142      	lsls	r2, r0, #5
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	1b00      	subs	r0, r0, r4
 80048a8:	eb61 0105 	sbc.w	r1, r1, r5
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	018b      	lsls	r3, r1, #6
 80048b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048ba:	0182      	lsls	r2, r0, #6
 80048bc:	1a12      	subs	r2, r2, r0
 80048be:	eb63 0301 	sbc.w	r3, r3, r1
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	00d9      	lsls	r1, r3, #3
 80048cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048d0:	00d0      	lsls	r0, r2, #3
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	1912      	adds	r2, r2, r4
 80048d8:	eb45 0303 	adc.w	r3, r5, r3
 80048dc:	f04f 0000 	mov.w	r0, #0
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	0299      	lsls	r1, r3, #10
 80048e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048ea:	0290      	lsls	r0, r2, #10
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f7fc fa34 	bl	8000d68 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_GetSysClockFreq+0x358>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0f1b      	lsrs	r3, r3, #28
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	61bb      	str	r3, [r7, #24]
      break;
 800491e:	e002      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004922:	61bb      	str	r3, [r7, #24]
      break;
 8004924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004926:	69bb      	ldr	r3, [r7, #24]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400
 800493c:	007a1200 	.word	0x007a1200

08004940 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e28d      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8083 	beq.w	8004a66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004960:	4b94      	ldr	r3, [pc, #592]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b04      	cmp	r3, #4
 800496a:	d019      	beq.n	80049a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800496c:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004974:	2b08      	cmp	r3, #8
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004978:	4b8e      	ldr	r3, [pc, #568]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004984:	d00c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004986:	4b8b      	ldr	r3, [pc, #556]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d112      	bne.n	80049b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004992:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499e:	d10b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	4b84      	ldr	r3, [pc, #528]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x124>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d157      	bne.n	8004a64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e25a      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCC_OscConfig+0x90>
 80049c2:	4b7c      	ldr	r3, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7b      	ldr	r2, [pc, #492]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e01d      	b.n	8004a0c <HAL_RCC_OscConfig+0xcc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0xb4>
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a75      	ldr	r2, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b73      	ldr	r3, [pc, #460]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a72      	ldr	r2, [pc, #456]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0xcc>
 80049f4:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b6c      	ldr	r3, [pc, #432]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6b      	ldr	r2, [pc, #428]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fe f888 	bl	8002b28 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fe f884 	bl	8002b28 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e21f      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xdc>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe f874 	bl	8002b28 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fe f870 	bl	8002b28 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e20b      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	4b57      	ldr	r3, [pc, #348]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x104>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06f      	beq.n	8004b52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a72:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d017      	beq.n	8004aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b44      	ldr	r3, [pc, #272]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x186>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1d3      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCC_OscConfig+0x278>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fe f81d 	bl	8002b28 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fe f819 	bl	8002b28 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1b4      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4925      	ldr	r1, [pc, #148]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCC_OscConfig+0x278>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fffc 	bl	8002b28 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd fff8 	bl	8002b28 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e193      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd ffdc 	bl	8002b28 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd ffd8 	bl	8002b28 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e173      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x274>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x234>
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd ffc5 	bl	8002b28 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd ffc1 	bl	8002b28 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d907      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e15c      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470000 	.word	0x42470000
 8004bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b8a      	ldr	r3, [pc, #552]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ea      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8097 	beq.w	8004d08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b83      	ldr	r3, [pc, #524]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	4b7f      	ldr	r3, [pc, #508]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a7e      	ldr	r2, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b7c      	ldr	r3, [pc, #496]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b79      	ldr	r3, [pc, #484]	; (8004df0 <HAL_RCC_OscConfig+0x4b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_RCC_OscConfig+0x4b0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a75      	ldr	r2, [pc, #468]	; (8004df0 <HAL_RCC_OscConfig+0x4b0>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fd ff81 	bl	8002b28 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fd ff7d 	bl	8002b28 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e118      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b6c      	ldr	r3, [pc, #432]	; (8004df0 <HAL_RCC_OscConfig+0x4b0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x31e>
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a65      	ldr	r2, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x358>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x340>
 8004c66:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a60      	ldr	r2, [pc, #384]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b5e      	ldr	r3, [pc, #376]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a5d      	ldr	r2, [pc, #372]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x358>
 8004c80:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a59      	ldr	r2, [pc, #356]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a56      	ldr	r2, [pc, #344]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd ff42 	bl	8002b28 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fd ff3e 	bl	8002b28 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0d7      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x368>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd ff2c 	bl	8002b28 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd ff28 	bl	8002b28 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0c1      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80ad 	beq.w	8004e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d060      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d145      	bne.n	8004db2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <HAL_RCC_OscConfig+0x4b4>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fefc 	bl	8002b28 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd fef8 	bl	8002b28 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e093      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	071b      	lsls	r3, r3, #28
 8004d7e:	491b      	ldr	r1, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCC_OscConfig+0x4b4>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fd fecd 	bl	8002b28 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d92:	f7fd fec9 	bl	8002b28 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e064      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x452>
 8004db0:	e05c      	b.n	8004e6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_OscConfig+0x4b4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd feb6 	bl	8002b28 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd feb2 	bl	8002b28 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e04d      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_RCC_OscConfig+0x4ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x480>
 8004dde:	e045      	b.n	8004e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e040      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40007000 	.word	0x40007000
 8004df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_RCC_OscConfig+0x538>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d030      	beq.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d129      	bne.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d122      	bne.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d119      	bne.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	3b01      	subs	r3, #1
 8004e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d10f      	bne.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e07b      	b.n	8004f86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d009      	beq.n	8004eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	61da      	str	r2, [r3, #28]
 8004ea6:	e005      	b.n	8004eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fae4 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	ea42 0103 	orr.w	r1, r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0104 	and.w	r1, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f003 0210 	and.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b08c      	sub	sp, #48	; 0x30
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x26>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e18a      	b.n	80052ca <HAL_SPI_TransmitReceive+0x33c>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fbc:	f7fd fdb4 	bl	8002b28 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d00f      	beq.n	8004ffe <HAL_SPI_TransmitReceive+0x70>
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe4:	d107      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x68>
 8004fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d003      	beq.n	8004ffe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ffc:	e15b      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x82>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x82>
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005016:	e14e      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b04      	cmp	r3, #4
 8005022:	d003      	beq.n	800502c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2205      	movs	r2, #5
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	887a      	ldrh	r2, [r7, #2]
 800504e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	887a      	ldrh	r2, [r7, #2]
 8005054:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d007      	beq.n	8005080 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005088:	d178      	bne.n	800517c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x10a>
 8005092:	8b7b      	ldrh	r3, [r7, #26]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d166      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	1c9a      	adds	r2, r3, #2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050bc:	e053      	b.n	8005166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d11b      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x176>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x176>
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d113      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d119      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x1b8>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d014      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	b292      	uxth	r2, r2
 8005128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005142:	2301      	movs	r3, #1
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005146:	f7fd fcef 	bl	8002b28 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005152:	429a      	cmp	r2, r3
 8005154:	d807      	bhi.n	8005166 <HAL_SPI_TransmitReceive+0x1d8>
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d003      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005164:	e0a7      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1a6      	bne.n	80050be <HAL_SPI_TransmitReceive+0x130>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1a1      	bne.n	80050be <HAL_SPI_TransmitReceive+0x130>
 800517a:	e07c      	b.n	8005276 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_TransmitReceive+0x1fc>
 8005184:	8b7b      	ldrh	r3, [r7, #26]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d16b      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b0:	e057      	b.n	8005262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d11c      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x26c>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <HAL_SPI_TransmitReceive+0x26c>
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d114      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d119      	bne.n	800523c <HAL_SPI_TransmitReceive+0x2ae>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d014      	beq.n	800523c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005238:	2301      	movs	r3, #1
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800523c:	f7fd fc74 	bl	8002b28 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005248:	429a      	cmp	r2, r3
 800524a:	d803      	bhi.n	8005254 <HAL_SPI_TransmitReceive+0x2c6>
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <HAL_SPI_TransmitReceive+0x2cc>
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005260:	e029      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1a2      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x224>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d19d      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f9d0 	bl	8005620 <SPI_EndRxTxTransaction>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005292:	e010      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	e000      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3730      	adds	r7, #48	; 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	099b      	lsrs	r3, r3, #6
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10f      	bne.n	8005318 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	099b      	lsrs	r3, r3, #6
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
    return;
 8005316:	e0d7      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_SPI_IRQHandler+0x66>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	09db      	lsrs	r3, r3, #7
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
    return;
 8005338:	e0c6      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <HAL_SPI_IRQHandler+0x8c>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	099b      	lsrs	r3, r3, #6
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80b4 	beq.w	80054c8 <HAL_SPI_IRQHandler+0x1f4>
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80ad 	beq.w	80054c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	099b      	lsrs	r3, r3, #6
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d023      	beq.n	80053c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b03      	cmp	r3, #3
 8005384:	d011      	beq.n	80053aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	e00b      	b.n	80053c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
        return;
 80053c0:	e082      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d014      	beq.n	80053f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	f043 0208 	orr.w	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04f      	beq.n	80054c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005434:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_SPI_IRQHandler+0x17e>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d034      	beq.n	80054bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0203 	bic.w	r2, r2, #3
 8005460:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d011      	beq.n	800548e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_SPI_IRQHandler+0x1fc>)
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	4618      	mov	r0, r3
 8005478:	f7fd fd07 	bl	8002e8a <HAL_DMA_Abort_IT>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	4a0d      	ldr	r2, [pc, #52]	; (80054d0 <HAL_SPI_IRQHandler+0x1fc>)
 800549c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd fcf1 	bl	8002e8a <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80054ba:	e003      	b.n	80054c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f809 	bl	80054d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054c2:	e000      	b.n	80054c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80054c4:	bf00      	nop
    return;
 80054c6:	bf00      	nop
  }
}
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	080054e9 	.word	0x080054e9

080054d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff ffe6 	bl	80054d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005520:	f7fd fb02 	bl	8002b28 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	4413      	add	r3, r2
 800552e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005530:	f7fd fafa 	bl	8002b28 <HAL_GetTick>
 8005534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	015b      	lsls	r3, r3, #5
 800553c:	0d1b      	lsrs	r3, r3, #20
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005546:	e054      	b.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d050      	beq.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005550:	f7fd faea 	bl	8002b28 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	429a      	cmp	r2, r3
 800555e:	d902      	bls.n	8005566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d13d      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557e:	d111      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	d004      	beq.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005592:	d107      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ac:	d10f      	bne.n	80055ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e017      	b.n	8005612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d19b      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2000001c 	.word	0x2000001c

08005620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <SPI_EndRxTxTransaction+0x7c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <SPI_EndRxTxTransaction+0x80>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	0d5b      	lsrs	r3, r3, #21
 8005638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564a:	d112      	bne.n	8005672 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff5a 	bl	8005510 <SPI_WaitFlagStateUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e00f      	b.n	8005692 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3b01      	subs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d0f2      	beq.n	8005672 <SPI_EndRxTxTransaction+0x52>
 800568c:	e000      	b.n	8005690 <SPI_EndRxTxTransaction+0x70>
        break;
 800568e:	bf00      	nop
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000001c 	.word	0x2000001c
 80056a0:	165e9f81 	.word	0x165e9f81

080056a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e041      	b.n	800573a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc ff36 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 fc7a 	bl	8005fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e04e      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a23      	ldr	r2, [pc, #140]	; (8005808 <HAL_TIM_Base_Start_IT+0xc4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d01d      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_TIM_Base_Start_IT+0xc8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_TIM_Base_Start_IT+0xcc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_TIM_Base_Start_IT+0xd0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <HAL_TIM_Base_Start_IT+0xd4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_TIM_Base_Start_IT+0xd8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_TIM_Base_Start_IT+0xdc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d111      	bne.n	80057e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d010      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e007      	b.n	80057f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40010400 	.word	0x40010400
 800581c:	40014000 	.word	0x40014000
 8005820:	40001800 	.word	0x40001800

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f839 	bl	80058c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fbba 	bl	8005fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_TIM_PWM_Start+0x24>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e022      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d109      	bne.n	8005916 <HAL_TIM_PWM_Start+0x3e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	bf14      	ite	ne
 800590e:	2301      	movne	r3, #1
 8005910:	2300      	moveq	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	e015      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d109      	bne.n	8005930 <HAL_TIM_PWM_Start+0x58>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e008      	b.n	8005942 <HAL_TIM_PWM_Start+0x6a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e07c      	b.n	8005a44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Start+0x82>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005958:	e013      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Start+0x92>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	e00b      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Start+0xa2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	e003      	b.n	8005982 <HAL_TIM_PWM_Start+0xaa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fe10 	bl	80065b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_TIM_PWM_Start+0x174>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_TIM_PWM_Start+0xcc>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <HAL_TIM_PWM_Start+0x178>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_PWM_Start+0xd0>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <HAL_TIM_PWM_Start+0xd2>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <HAL_TIM_PWM_Start+0x174>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d01d      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <HAL_TIM_PWM_Start+0x17c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_TIM_PWM_Start+0x180>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <HAL_TIM_PWM_Start+0x184>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_TIM_PWM_Start+0x178>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_TIM_PWM_Start+0x188>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x136>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <HAL_TIM_PWM_Start+0x18c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d111      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	d010      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	e007      	b.n	8005a42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40001800 	.word	0x40001800

08005a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0202 	mvn.w	r2, #2
 8005a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa77 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa69 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa7a 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0204 	mvn.w	r2, #4
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa4d 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa3f 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa50 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d122      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0208 	mvn.w	r2, #8
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2204      	movs	r2, #4
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa23 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa15 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa26 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d122      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d11b      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0210 	mvn.w	r2, #16
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2208      	movs	r2, #8
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9f9 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005bac:	e005      	b.n	8005bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9eb 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f9fc 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0201 	mvn.w	r2, #1
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fc f83a 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b80      	cmp	r3, #128	; 0x80
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	2b80      	cmp	r3, #128	; 0x80
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fd78 	bl	8006708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d10e      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9c1 	bl	8005fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d10e      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d107      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0220 	mvn.w	r2, #32
 8005c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fd42 	bl	80066f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0ae      	b.n	8005df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	f200 809f 	bhi.w	8005de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005de5 	.word	0x08005de5
 8005cb4:	08005de5 	.word	0x08005de5
 8005cb8:	08005de5 	.word	0x08005de5
 8005cbc:	08005d21 	.word	0x08005d21
 8005cc0:	08005de5 	.word	0x08005de5
 8005cc4:	08005de5 	.word	0x08005de5
 8005cc8:	08005de5 	.word	0x08005de5
 8005ccc:	08005d63 	.word	0x08005d63
 8005cd0:	08005de5 	.word	0x08005de5
 8005cd4:	08005de5 	.word	0x08005de5
 8005cd8:	08005de5 	.word	0x08005de5
 8005cdc:	08005da3 	.word	0x08005da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fa18 	bl	800611c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	619a      	str	r2, [r3, #24]
      break;
 8005d1e:	e064      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fa68 	bl	80061fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]
      break;
 8005d60:	e043      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fabd 	bl	80062e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0208 	orr.w	r2, r2, #8
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0204 	bic.w	r2, r2, #4
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	61da      	str	r2, [r3, #28]
      break;
 8005da0:	e023      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fb11 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69d9      	ldr	r1, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	021a      	lsls	r2, r3, #8
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	61da      	str	r2, [r3, #28]
      break;
 8005de2:	e002      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x1c>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e0b4      	b.n	8005f82 <HAL_TIM_ConfigClockSource+0x186>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	d03e      	beq.n	8005ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e56:	f200 8087 	bhi.w	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	f000 8086 	beq.w	8005f6e <HAL_TIM_ConfigClockSource+0x172>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d87f      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b70      	cmp	r3, #112	; 0x70
 8005e6a:	d01a      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d87b      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e70:	2b60      	cmp	r3, #96	; 0x60
 8005e72:	d050      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x11a>
 8005e74:	2b60      	cmp	r3, #96	; 0x60
 8005e76:	d877      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b50      	cmp	r3, #80	; 0x50
 8005e7a:	d03c      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e7c:	2b50      	cmp	r3, #80	; 0x50
 8005e7e:	d873      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d058      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x13a>
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d86f      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b30      	cmp	r3, #48	; 0x30
 8005e8a:	d064      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e8c:	2b30      	cmp	r3, #48	; 0x30
 8005e8e:	d86b      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d060      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d867      	bhi.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d05c      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d05a      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	e062      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6899      	ldr	r1, [r3, #8]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f000 fb5d 	bl	8006570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	609a      	str	r2, [r3, #8]
      break;
 8005ece:	e04f      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6899      	ldr	r1, [r3, #8]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f000 fb46 	bl	8006570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef2:	609a      	str	r2, [r3, #8]
      break;
 8005ef4:	e03c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 faba 	bl	800647c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2150      	movs	r1, #80	; 0x50
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fb13 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005f14:	e02c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 fad9 	bl	80064da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2160      	movs	r1, #96	; 0x60
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fb03 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005f34:	e01c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fa9a 	bl	800647c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2140      	movs	r1, #64	; 0x40
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 faf3 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005f54:	e00c      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f000 faea 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005f66:	e003      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6c:	e000      	b.n	8005f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a40      	ldr	r2, [pc, #256]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d00f      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3b      	ldr	r2, [pc, #236]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <TIM_Base_SetConfig+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d02b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d027      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d023      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <TIM_Base_SetConfig+0x124>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d017      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <TIM_Base_SetConfig+0x128>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a27      	ldr	r2, [pc, #156]	; (8006108 <TIM_Base_SetConfig+0x12c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <TIM_Base_SetConfig+0x130>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <TIM_Base_SetConfig+0x134>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a24      	ldr	r2, [pc, #144]	; (8006114 <TIM_Base_SetConfig+0x138>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <TIM_Base_SetConfig+0x13c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0xf8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <TIM_Base_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	615a      	str	r2, [r3, #20]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40010400 	.word	0x40010400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800
 8006110:	40001800 	.word	0x40001800
 8006114:	40001c00 	.word	0x40001c00
 8006118:	40002000 	.word	0x40002000

0800611c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0303 	bic.w	r3, r3, #3
 8006152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0302 	bic.w	r3, r3, #2
 8006164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <TIM_OC1_SetConfig+0xd8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC1_SetConfig+0x64>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1f      	ldr	r2, [pc, #124]	; (80061f8 <TIM_OC1_SetConfig+0xdc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10c      	bne.n	800619a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0308 	bic.w	r3, r3, #8
 8006186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <TIM_OC1_SetConfig+0xd8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_OC1_SetConfig+0x8e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <TIM_OC1_SetConfig+0xdc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d111      	bne.n	80061ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40010400 	.word	0x40010400

080061fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0210 	bic.w	r2, r3, #16
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0320 	bic.w	r3, r3, #32
 8006246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <TIM_OC2_SetConfig+0xe4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC2_SetConfig+0x68>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <TIM_OC2_SetConfig+0xe8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d10d      	bne.n	8006280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <TIM_OC2_SetConfig+0xe4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_OC2_SetConfig+0x94>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <TIM_OC2_SetConfig+0xe8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d113      	bne.n	80062b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400

080062e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <TIM_OC3_SetConfig+0xe0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_OC3_SetConfig+0x66>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a20      	ldr	r2, [pc, #128]	; (80063cc <TIM_OC3_SetConfig+0xe4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10d      	bne.n	800636a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a16      	ldr	r2, [pc, #88]	; (80063c8 <TIM_OC3_SetConfig+0xe0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_OC3_SetConfig+0x92>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a15      	ldr	r2, [pc, #84]	; (80063cc <TIM_OC3_SetConfig+0xe4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d113      	bne.n	80063a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a12      	ldr	r2, [pc, #72]	; (8006474 <TIM_OC4_SetConfig+0xa4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC4_SetConfig+0x68>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a11      	ldr	r2, [pc, #68]	; (8006478 <TIM_OC4_SetConfig+0xa8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d109      	bne.n	800644c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40010400 	.word	0x40010400

0800647c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 030a 	bic.w	r3, r3, #10
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0210 	bic.w	r2, r3, #16
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	031b      	lsls	r3, r3, #12
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	f043 0307 	orr.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	431a      	orrs	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2201      	movs	r2, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006610:	2302      	movs	r3, #2
 8006612:	e05a      	b.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006660:	d01d      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a17      	ldr	r2, [pc, #92]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a15      	ldr	r2, [pc, #84]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10c      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800

080066f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e03f      	b.n	80067ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb ff76 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800675e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fd1f 	bl	80071a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	4613      	mov	r3, r2
 80067c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d130      	bne.n	8006832 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_UART_Transmit_IT+0x26>
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e029      	b.n	8006834 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Transmit_IT+0x38>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e022      	b.n	8006834 <HAL_UART_Transmit_IT+0x7e>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2221      	movs	r2, #33	; 0x21
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800682c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006832:	2302      	movs	r3, #2
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b20      	cmp	r3, #32
 8006858:	d11d      	bne.n	8006896 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_UART_Receive_IT+0x26>
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e016      	b.n	8006898 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_UART_Receive_IT+0x38>
 8006874:	2302      	movs	r3, #2
 8006876:	e00f      	b.n	8006898 <HAL_UART_Receive_IT+0x58>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	461a      	mov	r2, r3
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fab5 	bl	8006dfc <UART_Start_Receive_IT>
 8006892:	4603      	mov	r3, r0
 8006894:	e000      	b.n	8006898 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006896:	2302      	movs	r3, #2
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b0ba      	sub	sp, #232	; 0xe8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_UART_IRQHandler+0x66>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb95 	bl	800702e <UART_Receive_IT>
      return;
 8006904:	e256      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80de 	beq.w	8006acc <HAL_UART_IRQHandler+0x22c>
 8006910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80d1 	beq.w	8006acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_UART_IRQHandler+0xae>
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <HAL_UART_IRQHandler+0xd2>
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0202 	orr.w	r2, r3, #2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <HAL_UART_IRQHandler+0xf6>
 800697e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d011      	beq.n	80069c6 <HAL_UART_IRQHandler+0x126>
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0208 	orr.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81ed 	beq.w	8006daa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_UART_IRQHandler+0x14e>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb20 	bl	800702e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_UART_IRQHandler+0x17a>
 8006a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d04f      	beq.n	8006aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa28 	bl	8006e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d141      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1d9      	bne.n	8006a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	4a7d      	ldr	r2, [pc, #500]	; (8006c7c <HAL_UART_IRQHandler+0x3dc>)
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fc f9fb 	bl	8002e8a <HAL_DMA_Abort_IT>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	e00e      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f990 	bl	8006dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00a      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f98c 	bl	8006dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e006      	b.n	8006ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f988 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ac6:	e170      	b.n	8006daa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	bf00      	nop
    return;
 8006aca:	e16e      	b.n	8006daa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f040 814a 	bne.w	8006d6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8143 	beq.w	8006d6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 813c 	beq.w	8006d6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	f040 80b4 	bne.w	8006c80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8140 	beq.w	8006dae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b36:	429a      	cmp	r2, r3
 8006b38:	f080 8139 	bcs.w	8006dae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	f000 8088 	beq.w	8006c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1d9      	bne.n	8006b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e1      	bne.n	8006b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e3      	bne.n	8006bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c44:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e3      	bne.n	8006c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fc f8a4 	bl	8002daa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8b6 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c78:	e099      	b.n	8006dae <HAL_UART_IRQHandler+0x50e>
 8006c7a:	bf00      	nop
 8006c7c:	08006f37 	.word	0x08006f37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 808b 	beq.w	8006db2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8086 	beq.w	8006db2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cca:	647a      	str	r2, [r7, #68]	; 0x44
 8006ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e3      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3314      	adds	r3, #20
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	623b      	str	r3, [r7, #32]
   return(result);
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f023 0301 	bic.w	r3, r3, #1
 8006cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d02:	633a      	str	r2, [r7, #48]	; 0x30
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e3      	bne.n	8006cde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0310 	bic.w	r3, r3, #16
 8006d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d48:	61fa      	str	r2, [r7, #28]
 8006d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	69b9      	ldr	r1, [r7, #24]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	617b      	str	r3, [r7, #20]
   return(result);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e3      	bne.n	8006d24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f83e 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d68:	e023      	b.n	8006db2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <HAL_UART_IRQHandler+0x4ea>
 8006d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8eb 	bl	8006f5e <UART_Transmit_IT>
    return;
 8006d88:	e014      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00e      	beq.n	8006db4 <HAL_UART_IRQHandler+0x514>
 8006d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f92b 	bl	8006ffe <UART_EndTransmit_IT>
    return;
 8006da8:	e004      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
    return;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
      return;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_UART_IRQHandler+0x514>
      return;
 8006db2:	bf00      	nop
  }
}
 8006db4:	37e8      	adds	r7, #232	; 0xe8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop

08006dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2222      	movs	r2, #34	; 0x22
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e40:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0220 	orr.w	r2, r2, #32
 8006e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b095      	sub	sp, #84	; 0x54
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e98:	643a      	str	r2, [r7, #64]	; 0x40
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d119      	bne.n	8006f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	647b      	str	r3, [r7, #68]	; 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f08:	61ba      	str	r2, [r7, #24]
 8006f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f2a:	bf00      	nop
 8006f2c:	3754      	adds	r7, #84	; 0x54
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ff3d 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b21      	cmp	r3, #33	; 0x21
 8006f70:	d13e      	bne.n	8006ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7a:	d114      	bne.n	8006fa6 <UART_Transmit_IT+0x48>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d110      	bne.n	8006fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	621a      	str	r2, [r3, #32]
 8006fa4:	e008      	b.n	8006fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6211      	str	r1, [r2, #32]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10f      	bne.n	8006fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fecc 	bl	8006dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b08c      	sub	sp, #48	; 0x30
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b22      	cmp	r3, #34	; 0x22
 8007040:	f040 80ab 	bne.w	800719a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704c:	d117      	bne.n	800707e <UART_Receive_IT+0x50>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d113      	bne.n	800707e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	b29a      	uxth	r2, r3
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	629a      	str	r2, [r3, #40]	; 0x28
 800707c:	e026      	b.n	80070cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d007      	beq.n	80070a2 <UART_Receive_IT+0x74>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <UART_Receive_IT+0x82>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e008      	b.n	80070c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d15a      	bne.n	8007196 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0220 	bic.w	r2, r2, #32
 80070ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	2b01      	cmp	r3, #1
 800711e:	d135      	bne.n	800718c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	613b      	str	r3, [r7, #16]
   return(result);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f023 0310 	bic.w	r3, r3, #16
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007146:	623a      	str	r2, [r7, #32]
 8007148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	69f9      	ldr	r1, [r7, #28]
 800714c:	6a3a      	ldr	r2, [r7, #32]
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	61bb      	str	r3, [r7, #24]
   return(result);
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b10      	cmp	r3, #16
 8007166:	d10a      	bne.n	800717e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe2d 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
 800718a:	e002      	b.n	8007192 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fa fcb3 	bl	8001af8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e002      	b.n	800719c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e000      	b.n	800719c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800719a:	2302      	movs	r3, #2
  }
}
 800719c:	4618      	mov	r0, r3
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	b09f      	sub	sp, #124	; 0x7c
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	68d9      	ldr	r1, [r3, #12]
 80071bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	ea40 0301 	orr.w	r3, r0, r1
 80071c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80071de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071e8:	f021 010c 	bic.w	r1, r1, #12
 80071ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f2:	430b      	orrs	r3, r1
 80071f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007202:	6999      	ldr	r1, [r3, #24]
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	ea40 0301 	orr.w	r3, r0, r1
 800720c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800720e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4bc5      	ldr	r3, [pc, #788]	; (8007528 <UART_SetConfig+0x384>)
 8007214:	429a      	cmp	r2, r3
 8007216:	d004      	beq.n	8007222 <UART_SetConfig+0x7e>
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4bc3      	ldr	r3, [pc, #780]	; (800752c <UART_SetConfig+0x388>)
 800721e:	429a      	cmp	r2, r3
 8007220:	d103      	bne.n	800722a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007222:	f7fc fe9d 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8007226:	6778      	str	r0, [r7, #116]	; 0x74
 8007228:	e002      	b.n	8007230 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800722a:	f7fc fe85 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 800722e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007238:	f040 80b6 	bne.w	80073a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800723c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723e:	461c      	mov	r4, r3
 8007240:	f04f 0500 	mov.w	r5, #0
 8007244:	4622      	mov	r2, r4
 8007246:	462b      	mov	r3, r5
 8007248:	1891      	adds	r1, r2, r2
 800724a:	6439      	str	r1, [r7, #64]	; 0x40
 800724c:	415b      	adcs	r3, r3
 800724e:	647b      	str	r3, [r7, #68]	; 0x44
 8007250:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007254:	1912      	adds	r2, r2, r4
 8007256:	eb45 0303 	adc.w	r3, r5, r3
 800725a:	f04f 0000 	mov.w	r0, #0
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	00d9      	lsls	r1, r3, #3
 8007264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007268:	00d0      	lsls	r0, r2, #3
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	1911      	adds	r1, r2, r4
 8007270:	6639      	str	r1, [r7, #96]	; 0x60
 8007272:	416b      	adcs	r3, r5
 8007274:	667b      	str	r3, [r7, #100]	; 0x64
 8007276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	1891      	adds	r1, r2, r2
 8007282:	63b9      	str	r1, [r7, #56]	; 0x38
 8007284:	415b      	adcs	r3, r3
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800728c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007290:	f7f9 fd6a 	bl	8000d68 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4ba5      	ldr	r3, [pc, #660]	; (8007530 <UART_SetConfig+0x38c>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	011e      	lsls	r6, r3, #4
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	461c      	mov	r4, r3
 80072a6:	f04f 0500 	mov.w	r5, #0
 80072aa:	4622      	mov	r2, r4
 80072ac:	462b      	mov	r3, r5
 80072ae:	1891      	adds	r1, r2, r2
 80072b0:	6339      	str	r1, [r7, #48]	; 0x30
 80072b2:	415b      	adcs	r3, r3
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
 80072b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80072ba:	1912      	adds	r2, r2, r4
 80072bc:	eb45 0303 	adc.w	r3, r5, r3
 80072c0:	f04f 0000 	mov.w	r0, #0
 80072c4:	f04f 0100 	mov.w	r1, #0
 80072c8:	00d9      	lsls	r1, r3, #3
 80072ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ce:	00d0      	lsls	r0, r2, #3
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	1911      	adds	r1, r2, r4
 80072d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80072d8:	416b      	adcs	r3, r5
 80072da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	1891      	adds	r1, r2, r2
 80072e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80072ea:	415b      	adcs	r3, r3
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80072f6:	f7f9 fd37 	bl	8000d68 <__aeabi_uldivmod>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4b8c      	ldr	r3, [pc, #560]	; (8007530 <UART_SetConfig+0x38c>)
 8007300:	fba3 1302 	umull	r1, r3, r3, r2
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	2164      	movs	r1, #100	; 0x64
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	3332      	adds	r3, #50	; 0x32
 8007312:	4a87      	ldr	r2, [pc, #540]	; (8007530 <UART_SetConfig+0x38c>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007320:	441e      	add	r6, r3
 8007322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007324:	4618      	mov	r0, r3
 8007326:	f04f 0100 	mov.w	r1, #0
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	1894      	adds	r4, r2, r2
 8007330:	623c      	str	r4, [r7, #32]
 8007332:	415b      	adcs	r3, r3
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
 8007336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800733a:	1812      	adds	r2, r2, r0
 800733c:	eb41 0303 	adc.w	r3, r1, r3
 8007340:	f04f 0400 	mov.w	r4, #0
 8007344:	f04f 0500 	mov.w	r5, #0
 8007348:	00dd      	lsls	r5, r3, #3
 800734a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800734e:	00d4      	lsls	r4, r2, #3
 8007350:	4622      	mov	r2, r4
 8007352:	462b      	mov	r3, r5
 8007354:	1814      	adds	r4, r2, r0
 8007356:	653c      	str	r4, [r7, #80]	; 0x50
 8007358:	414b      	adcs	r3, r1
 800735a:	657b      	str	r3, [r7, #84]	; 0x54
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	461a      	mov	r2, r3
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	1891      	adds	r1, r2, r2
 8007368:	61b9      	str	r1, [r7, #24]
 800736a:	415b      	adcs	r3, r3
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007372:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007376:	f7f9 fcf7 	bl	8000d68 <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4b6c      	ldr	r3, [pc, #432]	; (8007530 <UART_SetConfig+0x38c>)
 8007380:	fba3 1302 	umull	r1, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	2164      	movs	r1, #100	; 0x64
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	3332      	adds	r3, #50	; 0x32
 8007392:	4a67      	ldr	r2, [pc, #412]	; (8007530 <UART_SetConfig+0x38c>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f003 0207 	and.w	r2, r3, #7
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4432      	add	r2, r6
 80073a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073a6:	e0b9      	b.n	800751c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073aa:	461c      	mov	r4, r3
 80073ac:	f04f 0500 	mov.w	r5, #0
 80073b0:	4622      	mov	r2, r4
 80073b2:	462b      	mov	r3, r5
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	6139      	str	r1, [r7, #16]
 80073b8:	415b      	adcs	r3, r3
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073c0:	1912      	adds	r2, r2, r4
 80073c2:	eb45 0303 	adc.w	r3, r5, r3
 80073c6:	f04f 0000 	mov.w	r0, #0
 80073ca:	f04f 0100 	mov.w	r1, #0
 80073ce:	00d9      	lsls	r1, r3, #3
 80073d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073d4:	00d0      	lsls	r0, r2, #3
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	eb12 0804 	adds.w	r8, r2, r4
 80073de:	eb43 0905 	adc.w	r9, r3, r5
 80073e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f04f 0100 	mov.w	r1, #0
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	008b      	lsls	r3, r1, #2
 80073f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073fa:	0082      	lsls	r2, r0, #2
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 fcb2 	bl	8000d68 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4b49      	ldr	r3, [pc, #292]	; (8007530 <UART_SetConfig+0x38c>)
 800740a:	fba3 2302 	umull	r2, r3, r3, r2
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	011e      	lsls	r6, r3, #4
 8007412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007414:	4618      	mov	r0, r3
 8007416:	f04f 0100 	mov.w	r1, #0
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	1894      	adds	r4, r2, r2
 8007420:	60bc      	str	r4, [r7, #8]
 8007422:	415b      	adcs	r3, r3
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742a:	1812      	adds	r2, r2, r0
 800742c:	eb41 0303 	adc.w	r3, r1, r3
 8007430:	f04f 0400 	mov.w	r4, #0
 8007434:	f04f 0500 	mov.w	r5, #0
 8007438:	00dd      	lsls	r5, r3, #3
 800743a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800743e:	00d4      	lsls	r4, r2, #3
 8007440:	4622      	mov	r2, r4
 8007442:	462b      	mov	r3, r5
 8007444:	1814      	adds	r4, r2, r0
 8007446:	64bc      	str	r4, [r7, #72]	; 0x48
 8007448:	414b      	adcs	r3, r1
 800744a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f04f 0100 	mov.w	r1, #0
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	008b      	lsls	r3, r1, #2
 8007460:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007464:	0082      	lsls	r2, r0, #2
 8007466:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800746a:	f7f9 fc7d 	bl	8000d68 <__aeabi_uldivmod>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <UART_SetConfig+0x38c>)
 8007474:	fba3 1302 	umull	r1, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	2164      	movs	r1, #100	; 0x64
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	3332      	adds	r3, #50	; 0x32
 8007486:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <UART_SetConfig+0x38c>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007492:	441e      	add	r6, r3
 8007494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007496:	4618      	mov	r0, r3
 8007498:	f04f 0100 	mov.w	r1, #0
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	1894      	adds	r4, r2, r2
 80074a2:	603c      	str	r4, [r7, #0]
 80074a4:	415b      	adcs	r3, r3
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ac:	1812      	adds	r2, r2, r0
 80074ae:	eb41 0303 	adc.w	r3, r1, r3
 80074b2:	f04f 0400 	mov.w	r4, #0
 80074b6:	f04f 0500 	mov.w	r5, #0
 80074ba:	00dd      	lsls	r5, r3, #3
 80074bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074c0:	00d4      	lsls	r4, r2, #3
 80074c2:	4622      	mov	r2, r4
 80074c4:	462b      	mov	r3, r5
 80074c6:	eb12 0a00 	adds.w	sl, r2, r0
 80074ca:	eb43 0b01 	adc.w	fp, r3, r1
 80074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f04f 0100 	mov.w	r1, #0
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	008b      	lsls	r3, r1, #2
 80074e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074e6:	0082      	lsls	r2, r0, #2
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	f7f9 fc3c 	bl	8000d68 <__aeabi_uldivmod>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <UART_SetConfig+0x38c>)
 80074f6:	fba3 1302 	umull	r1, r3, r3, r2
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	2164      	movs	r1, #100	; 0x64
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	3332      	adds	r3, #50	; 0x32
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <UART_SetConfig+0x38c>)
 800750a:	fba2 2303 	umull	r2, r3, r2, r3
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4432      	add	r2, r6
 800751a:	609a      	str	r2, [r3, #8]
}
 800751c:	bf00      	nop
 800751e:	377c      	adds	r7, #124	; 0x7c
 8007520:	46bd      	mov	sp, r7
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	bf00      	nop
 8007528:	40011000 	.word	0x40011000
 800752c:	40011400 	.word	0x40011400
 8007530:	51eb851f 	.word	0x51eb851f

08007534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007534:	b084      	sub	sp, #16
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	f107 001c 	add.w	r0, r7, #28
 8007542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	2b01      	cmp	r3, #1
 800754a:	d122      	bne.n	8007592 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d105      	bne.n	8007586 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa7c 	bl	8007a84 <USB_CoreReset>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e01a      	b.n	80075c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa70 	bl	8007a84 <USB_CoreReset>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
 80075ba:	e005      	b.n	80075c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d10b      	bne.n	80075e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f043 0206 	orr.w	r2, r3, #6
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f043 0220 	orr.w	r2, r3, #32
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f2:	b004      	add	sp, #16
 80075f4:	4770      	bx	lr

080075f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f023 0201 	bic.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d115      	bne.n	8007666 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007646:	2001      	movs	r0, #1
 8007648:	f7fb fa7a 	bl	8002b40 <HAL_Delay>
      ms++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa08 	bl	8007a68 <USB_GetMode>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d01e      	beq.n	800769c <USB_SetCurrentMode+0x84>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b31      	cmp	r3, #49	; 0x31
 8007662:	d9f0      	bls.n	8007646 <USB_SetCurrentMode+0x2e>
 8007664:	e01a      	b.n	800769c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d115      	bne.n	8007698 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007678:	2001      	movs	r0, #1
 800767a:	f7fb fa61 	bl	8002b40 <HAL_Delay>
      ms++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9ef 	bl	8007a68 <USB_GetMode>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <USB_SetCurrentMode+0x84>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b31      	cmp	r3, #49	; 0x31
 8007694:	d9f0      	bls.n	8007678 <USB_SetCurrentMode+0x60>
 8007696:	e001      	b.n	800769c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e005      	b.n	80076a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b32      	cmp	r3, #50	; 0x32
 80076a0:	d101      	bne.n	80076a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b0:	b084      	sub	sp, #16
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	e009      	b.n	80076e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3340      	adds	r3, #64	; 0x40
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3301      	adds	r3, #1
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b0e      	cmp	r3, #14
 80076e8:	d9f2      	bls.n	80076d0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d11c      	bne.n	800772a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076fe:	f043 0302 	orr.w	r3, r3, #2
 8007702:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e005      	b.n	8007736 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773c:	461a      	mov	r2, r3
 800773e:	2300      	movs	r3, #0
 8007740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	4619      	mov	r1, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	461a      	mov	r2, r3
 8007752:	680b      	ldr	r3, [r1, #0]
 8007754:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	2b01      	cmp	r3, #1
 800775a:	d10c      	bne.n	8007776 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007762:	2100      	movs	r1, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f945 	bl	80079f4 <USB_SetDevSpeed>
 800776a:	e008      	b.n	800777e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800776c:	2101      	movs	r1, #1
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f940 	bl	80079f4 <USB_SetDevSpeed>
 8007774:	e003      	b.n	800777e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007776:	2103      	movs	r1, #3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f93b 	bl	80079f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800777e:	2110      	movs	r1, #16
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f8f3 	bl	800796c <USB_FlushTxFifo>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f90f 	bl	80079b4 <USB_FlushRxFifo>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	461a      	mov	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	461a      	mov	r2, r3
 80077b4:	2300      	movs	r3, #0
 80077b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077be:	461a      	mov	r2, r3
 80077c0:	2300      	movs	r3, #0
 80077c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	e043      	b.n	8007852 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e0:	d118      	bne.n	8007814 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	461a      	mov	r2, r3
 80077f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e013      	b.n	8007826 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780a:	461a      	mov	r2, r3
 800780c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	e008      	b.n	8007826 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	461a      	mov	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	461a      	mov	r2, r3
 8007846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800784a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	3301      	adds	r3, #1
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	429a      	cmp	r2, r3
 8007858:	d3b7      	bcc.n	80077ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	e043      	b.n	80078e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007876:	d118      	bne.n	80078aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	461a      	mov	r2, r3
 800788c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e013      	b.n	80078bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	461a      	mov	r2, r3
 80078a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	e008      	b.n	80078bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	461a      	mov	r2, r3
 80078b8:	2300      	movs	r3, #0
 80078ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	461a      	mov	r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	461a      	mov	r2, r3
 80078dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d3b7      	bcc.n	8007860 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007902:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f043 0210 	orr.w	r2, r3, #16
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <USB_DevInit+0x2b8>)
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d005      	beq.n	8007942 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	f043 0208 	orr.w	r2, r3, #8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d107      	bne.n	8007958 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007950:	f043 0304 	orr.w	r3, r3, #4
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007964:	b004      	add	sp, #16
 8007966:	4770      	bx	lr
 8007968:	803c3800 	.word	0x803c3800

0800796c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	019b      	lsls	r3, r3, #6
 800797e:	f043 0220 	orr.w	r2, r3, #32
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <USB_FlushTxFifo+0x44>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e006      	b.n	80079a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d0f1      	beq.n	8007986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	00030d40 	.word	0x00030d40

080079b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2210      	movs	r2, #16
 80079c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <USB_FlushRxFifo+0x3c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e006      	b.n	80079e4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d0f1      	beq.n	80079c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	00030d40 	.word	0x00030d40

080079f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a14:	4313      	orrs	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a40:	f023 0303 	bic.w	r3, r3, #3
 8007a44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0301 	and.w	r3, r3, #1
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <USB_CoreReset+0x60>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e01a      	b.n	8007ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	daf3      	bge.n	8007a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <USB_CoreReset+0x60>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d901      	bls.n	8007ac8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e006      	b.n	8007ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d0f1      	beq.n	8007ab8 <USB_CoreReset+0x34>

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	00030d40 	.word	0x00030d40

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000028 	.word	0x20000028

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	; (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	; (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	; (8007b38 <__libc_init_array+0x44>)
 8007b08:	f005 f882 	bl	800cc10 <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	0800d154 	.word	0x0800d154
 8007b30:	0800d154 	.word	0x0800d154
 8007b34:	0800d154 	.word	0x0800d154
 8007b38:	0800d158 	.word	0x0800d158

08007b3c <memset>:
 8007b3c:	4402      	add	r2, r0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d100      	bne.n	8007b46 <memset+0xa>
 8007b44:	4770      	bx	lr
 8007b46:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4a:	e7f9      	b.n	8007b40 <memset+0x4>

08007b4c <__cvt>:
 8007b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	ec55 4b10 	vmov	r4, r5, d0
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	460e      	mov	r6, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	bfbb      	ittet	lt
 8007b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b62:	461d      	movlt	r5, r3
 8007b64:	2300      	movge	r3, #0
 8007b66:	232d      	movlt	r3, #45	; 0x2d
 8007b68:	700b      	strb	r3, [r1, #0]
 8007b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b70:	4691      	mov	r9, r2
 8007b72:	f023 0820 	bic.w	r8, r3, #32
 8007b76:	bfbc      	itt	lt
 8007b78:	4622      	movlt	r2, r4
 8007b7a:	4614      	movlt	r4, r2
 8007b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b80:	d005      	beq.n	8007b8e <__cvt+0x42>
 8007b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b86:	d100      	bne.n	8007b8a <__cvt+0x3e>
 8007b88:	3601      	adds	r6, #1
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	e000      	b.n	8007b90 <__cvt+0x44>
 8007b8e:	2103      	movs	r1, #3
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	ab02      	add	r3, sp, #8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	ec45 4b10 	vmov	d0, r4, r5
 8007b9c:	4653      	mov	r3, sl
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	f001 fe46 	bl	8009830 <_dtoa_r>
 8007ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ba8:	4607      	mov	r7, r0
 8007baa:	d102      	bne.n	8007bb2 <__cvt+0x66>
 8007bac:	f019 0f01 	tst.w	r9, #1
 8007bb0:	d022      	beq.n	8007bf8 <__cvt+0xac>
 8007bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bb6:	eb07 0906 	add.w	r9, r7, r6
 8007bba:	d110      	bne.n	8007bde <__cvt+0x92>
 8007bbc:	783b      	ldrb	r3, [r7, #0]
 8007bbe:	2b30      	cmp	r3, #48	; 0x30
 8007bc0:	d10a      	bne.n	8007bd8 <__cvt+0x8c>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8007bce:	b918      	cbnz	r0, 8007bd8 <__cvt+0x8c>
 8007bd0:	f1c6 0601 	rsb	r6, r6, #1
 8007bd4:	f8ca 6000 	str.w	r6, [sl]
 8007bd8:	f8da 3000 	ldr.w	r3, [sl]
 8007bdc:	4499      	add	r9, r3
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 8007bea:	b108      	cbz	r0, 8007bf0 <__cvt+0xa4>
 8007bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bf0:	2230      	movs	r2, #48	; 0x30
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	454b      	cmp	r3, r9
 8007bf6:	d307      	bcc.n	8007c08 <__cvt+0xbc>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfc:	1bdb      	subs	r3, r3, r7
 8007bfe:	4638      	mov	r0, r7
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	b004      	add	sp, #16
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	1c59      	adds	r1, r3, #1
 8007c0a:	9103      	str	r1, [sp, #12]
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e7f0      	b.n	8007bf2 <__cvt+0xa6>

08007c10 <__exponent>:
 8007c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c12:	4603      	mov	r3, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	bfb8      	it	lt
 8007c18:	4249      	neglt	r1, r1
 8007c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c1e:	bfb4      	ite	lt
 8007c20:	222d      	movlt	r2, #45	; 0x2d
 8007c22:	222b      	movge	r2, #43	; 0x2b
 8007c24:	2909      	cmp	r1, #9
 8007c26:	7042      	strb	r2, [r0, #1]
 8007c28:	dd2a      	ble.n	8007c80 <__exponent+0x70>
 8007c2a:	f10d 0407 	add.w	r4, sp, #7
 8007c2e:	46a4      	mov	ip, r4
 8007c30:	270a      	movs	r7, #10
 8007c32:	46a6      	mov	lr, r4
 8007c34:	460a      	mov	r2, r1
 8007c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c3e:	3530      	adds	r5, #48	; 0x30
 8007c40:	2a63      	cmp	r2, #99	; 0x63
 8007c42:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	dcf1      	bgt.n	8007c32 <__exponent+0x22>
 8007c4e:	3130      	adds	r1, #48	; 0x30
 8007c50:	f1ae 0502 	sub.w	r5, lr, #2
 8007c54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c58:	1c44      	adds	r4, r0, #1
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4561      	cmp	r1, ip
 8007c5e:	d30a      	bcc.n	8007c76 <__exponent+0x66>
 8007c60:	f10d 0209 	add.w	r2, sp, #9
 8007c64:	eba2 020e 	sub.w	r2, r2, lr
 8007c68:	4565      	cmp	r5, ip
 8007c6a:	bf88      	it	hi
 8007c6c:	2200      	movhi	r2, #0
 8007c6e:	4413      	add	r3, r2
 8007c70:	1a18      	subs	r0, r3, r0
 8007c72:	b003      	add	sp, #12
 8007c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c7e:	e7ed      	b.n	8007c5c <__exponent+0x4c>
 8007c80:	2330      	movs	r3, #48	; 0x30
 8007c82:	3130      	adds	r1, #48	; 0x30
 8007c84:	7083      	strb	r3, [r0, #2]
 8007c86:	70c1      	strb	r1, [r0, #3]
 8007c88:	1d03      	adds	r3, r0, #4
 8007c8a:	e7f1      	b.n	8007c70 <__exponent+0x60>

08007c8c <_printf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	ed2d 8b02 	vpush	{d8}
 8007c94:	b08d      	sub	sp, #52	; 0x34
 8007c96:	460c      	mov	r4, r1
 8007c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	f002 ff21 	bl	800aae8 <_localeconv_r>
 8007ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 fab0 	bl	8000210 <strlen>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	f023 0307 	bic.w	r3, r3, #7
 8007cc6:	f103 0208 	add.w	r2, r3, #8
 8007cca:	f8c8 2000 	str.w	r2, [r8]
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ce4:	ee08 0a10 	vmov	s16, r0
 8007ce8:	4b9f      	ldr	r3, [pc, #636]	; (8007f68 <_printf_float+0x2dc>)
 8007cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	f7f8 ff3b 	bl	8000b6c <__aeabi_dcmpun>
 8007cf6:	bb88      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <_printf_float+0x2dc>)
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007d02:	f7f8 ff15 	bl	8000b30 <__aeabi_dcmple>
 8007d06:	bb48      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 ff04 	bl	8000b1c <__aeabi_dcmplt>
 8007d14:	b110      	cbz	r0, 8007d1c <_printf_float+0x90>
 8007d16:	232d      	movs	r3, #45	; 0x2d
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	4b93      	ldr	r3, [pc, #588]	; (8007f6c <_printf_float+0x2e0>)
 8007d1e:	4894      	ldr	r0, [pc, #592]	; (8007f70 <_printf_float+0x2e4>)
 8007d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d24:	bf94      	ite	ls
 8007d26:	4698      	movls	r8, r3
 8007d28:	4680      	movhi	r8, r0
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	f023 0204 	bic.w	r2, r3, #4
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	9700      	str	r7, [sp, #0]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f9d8 	bl	80080f8 <_printf_common>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f040 8090 	bne.w	8007e6e <_printf_float+0x1e2>
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	b00d      	add	sp, #52	; 0x34
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7f8 ff02 	bl	8000b6c <__aeabi_dcmpun>
 8007d68:	b140      	cbz	r0, 8007d7c <_printf_float+0xf0>
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbc      	itt	lt
 8007d70:	232d      	movlt	r3, #45	; 0x2d
 8007d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d76:	487f      	ldr	r0, [pc, #508]	; (8007f74 <_printf_float+0x2e8>)
 8007d78:	4b7f      	ldr	r3, [pc, #508]	; (8007f78 <_printf_float+0x2ec>)
 8007d7a:	e7d1      	b.n	8007d20 <_printf_float+0x94>
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d82:	9206      	str	r2, [sp, #24]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	d13f      	bne.n	8007e08 <_printf_float+0x17c>
 8007d88:	2306      	movs	r3, #6
 8007d8a:	6063      	str	r3, [r4, #4]
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	ab0a      	add	r3, sp, #40	; 0x28
 8007d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d9e:	ab09      	add	r3, sp, #36	; 0x24
 8007da0:	ec49 8b10 	vmov	d0, r8, r9
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff fecd 	bl	8007b4c <__cvt>
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db6:	2b47      	cmp	r3, #71	; 0x47
 8007db8:	4680      	mov	r8, r0
 8007dba:	d108      	bne.n	8007dce <_printf_float+0x142>
 8007dbc:	1cc8      	adds	r0, r1, #3
 8007dbe:	db02      	blt.n	8007dc6 <_printf_float+0x13a>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	dd41      	ble.n	8007e4a <_printf_float+0x1be>
 8007dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dca:	fa5f fb8b 	uxtb.w	fp, fp
 8007dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dd2:	d820      	bhi.n	8007e16 <_printf_float+0x18a>
 8007dd4:	3901      	subs	r1, #1
 8007dd6:	465a      	mov	r2, fp
 8007dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dde:	f7ff ff17 	bl	8007c10 <__exponent>
 8007de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de4:	1813      	adds	r3, r2, r0
 8007de6:	2a01      	cmp	r2, #1
 8007de8:	4681      	mov	r9, r0
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	dc02      	bgt.n	8007df4 <_printf_float+0x168>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	07d2      	lsls	r2, r2, #31
 8007df2:	d501      	bpl.n	8007df8 <_printf_float+0x16c>
 8007df4:	3301      	adds	r3, #1
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d09c      	beq.n	8007d3a <_printf_float+0xae>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e06:	e798      	b.n	8007d3a <_printf_float+0xae>
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	2a47      	cmp	r2, #71	; 0x47
 8007e0c:	d1be      	bne.n	8007d8c <_printf_float+0x100>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1bc      	bne.n	8007d8c <_printf_float+0x100>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7b9      	b.n	8007d8a <_printf_float+0xfe>
 8007e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e1a:	d118      	bne.n	8007e4e <_printf_float+0x1c2>
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	dd0b      	ble.n	8007e3a <_printf_float+0x1ae>
 8007e22:	6121      	str	r1, [r4, #16]
 8007e24:	b913      	cbnz	r3, 8007e2c <_printf_float+0x1a0>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	07d0      	lsls	r0, r2, #31
 8007e2a:	d502      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	440b      	add	r3, r1
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e34:	f04f 0900 	mov.w	r9, #0
 8007e38:	e7de      	b.n	8007df8 <_printf_float+0x16c>
 8007e3a:	b913      	cbnz	r3, 8007e42 <_printf_float+0x1b6>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	07d2      	lsls	r2, r2, #31
 8007e40:	d501      	bpl.n	8007e46 <_printf_float+0x1ba>
 8007e42:	3302      	adds	r3, #2
 8007e44:	e7f4      	b.n	8007e30 <_printf_float+0x1a4>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e7f2      	b.n	8007e30 <_printf_float+0x1a4>
 8007e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	4299      	cmp	r1, r3
 8007e52:	db05      	blt.n	8007e60 <_printf_float+0x1d4>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	6121      	str	r1, [r4, #16]
 8007e58:	07d8      	lsls	r0, r3, #31
 8007e5a:	d5ea      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e5c:	1c4b      	adds	r3, r1, #1
 8007e5e:	e7e7      	b.n	8007e30 <_printf_float+0x1a4>
 8007e60:	2900      	cmp	r1, #0
 8007e62:	bfd4      	ite	le
 8007e64:	f1c1 0202 	rsble	r2, r1, #2
 8007e68:	2201      	movgt	r2, #1
 8007e6a:	4413      	add	r3, r2
 8007e6c:	e7e0      	b.n	8007e30 <_printf_float+0x1a4>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	055a      	lsls	r2, r3, #21
 8007e72:	d407      	bmi.n	8007e84 <_printf_float+0x1f8>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	4642      	mov	r2, r8
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d12c      	bne.n	8007edc <_printf_float+0x250>
 8007e82:	e764      	b.n	8007d4e <_printf_float+0xc2>
 8007e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e88:	f240 80e0 	bls.w	800804c <_printf_float+0x3c0>
 8007e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f7f8 fe38 	bl	8000b08 <__aeabi_dcmpeq>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d034      	beq.n	8007f06 <_printf_float+0x27a>
 8007e9c:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <_printf_float+0x2f0>)
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af51 	beq.w	8007d4e <_printf_float+0xc2>
 8007eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	db02      	blt.n	8007eba <_printf_float+0x22e>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07d8      	lsls	r0, r3, #31
 8007eb8:	d510      	bpl.n	8007edc <_printf_float+0x250>
 8007eba:	ee18 3a10 	vmov	r3, s16
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f af41 	beq.w	8007d4e <_printf_float+0xc2>
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	f104 091a 	add.w	r9, r4, #26
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4543      	cmp	r3, r8
 8007eda:	dc09      	bgt.n	8007ef0 <_printf_float+0x264>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	079b      	lsls	r3, r3, #30
 8007ee0:	f100 8105 	bmi.w	80080ee <_printf_float+0x462>
 8007ee4:	68e0      	ldr	r0, [r4, #12]
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee8:	4298      	cmp	r0, r3
 8007eea:	bfb8      	it	lt
 8007eec:	4618      	movlt	r0, r3
 8007eee:	e730      	b.n	8007d52 <_printf_float+0xc6>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	f43f af27 	beq.w	8007d4e <_printf_float+0xc2>
 8007f00:	f108 0801 	add.w	r8, r8, #1
 8007f04:	e7e6      	b.n	8007ed4 <_printf_float+0x248>
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc39      	bgt.n	8007f80 <_printf_float+0x2f4>
 8007f0c:	4a1b      	ldr	r2, [pc, #108]	; (8007f7c <_printf_float+0x2f0>)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af19 	beq.w	8007d4e <_printf_float+0xc2>
 8007f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d102      	bne.n	8007f2a <_printf_float+0x29e>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d5d8      	bpl.n	8007edc <_printf_float+0x250>
 8007f2a:	ee18 3a10 	vmov	r3, s16
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af09 	beq.w	8007d4e <_printf_float+0xc2>
 8007f3c:	f04f 0900 	mov.w	r9, #0
 8007f40:	f104 0a1a 	add.w	sl, r4, #26
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	425b      	negs	r3, r3
 8007f48:	454b      	cmp	r3, r9
 8007f4a:	dc01      	bgt.n	8007f50 <_printf_float+0x2c4>
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4e:	e792      	b.n	8007e76 <_printf_float+0x1ea>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f aef7 	beq.w	8007d4e <_printf_float+0xc2>
 8007f60:	f109 0901 	add.w	r9, r9, #1
 8007f64:	e7ee      	b.n	8007f44 <_printf_float+0x2b8>
 8007f66:	bf00      	nop
 8007f68:	7fefffff 	.word	0x7fefffff
 8007f6c:	0800cc88 	.word	0x0800cc88
 8007f70:	0800cc8c 	.word	0x0800cc8c
 8007f74:	0800cc94 	.word	0x0800cc94
 8007f78:	0800cc90 	.word	0x0800cc90
 8007f7c:	0800d099 	.word	0x0800d099
 8007f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f84:	429a      	cmp	r2, r3
 8007f86:	bfa8      	it	ge
 8007f88:	461a      	movge	r2, r3
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	4691      	mov	r9, r2
 8007f8e:	dc37      	bgt.n	8008000 <_printf_float+0x374>
 8007f90:	f04f 0b00 	mov.w	fp, #0
 8007f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f98:	f104 021a 	add.w	r2, r4, #26
 8007f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	eba3 0309 	sub.w	r3, r3, r9
 8007fa4:	455b      	cmp	r3, fp
 8007fa6:	dc33      	bgt.n	8008010 <_printf_float+0x384>
 8007fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fac:	429a      	cmp	r2, r3
 8007fae:	db3b      	blt.n	8008028 <_printf_float+0x39c>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d438      	bmi.n	8008028 <_printf_float+0x39c>
 8007fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	eba2 0901 	sub.w	r9, r2, r1
 8007fc2:	4599      	cmp	r9, r3
 8007fc4:	bfa8      	it	ge
 8007fc6:	4699      	movge	r9, r3
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	dc35      	bgt.n	800803a <_printf_float+0x3ae>
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fd6:	f104 0a1a 	add.w	sl, r4, #26
 8007fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	eba3 0309 	sub.w	r3, r3, r9
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	f77f af79 	ble.w	8007edc <_printf_float+0x250>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f aeaa 	beq.w	8007d4e <_printf_float+0xc2>
 8007ffa:	f108 0801 	add.w	r8, r8, #1
 8007ffe:	e7ec      	b.n	8007fda <_printf_float+0x34e>
 8008000:	4613      	mov	r3, r2
 8008002:	4631      	mov	r1, r6
 8008004:	4642      	mov	r2, r8
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	d1c0      	bne.n	8007f90 <_printf_float+0x304>
 800800e:	e69e      	b.n	8007d4e <_printf_float+0xc2>
 8008010:	2301      	movs	r3, #1
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f ae97 	beq.w	8007d4e <_printf_float+0xc2>
 8008020:	9a05      	ldr	r2, [sp, #20]
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	e7b9      	b.n	8007f9c <_printf_float+0x310>
 8008028:	ee18 3a10 	vmov	r3, s16
 800802c:	4652      	mov	r2, sl
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1be      	bne.n	8007fb6 <_printf_float+0x32a>
 8008038:	e689      	b.n	8007d4e <_printf_float+0xc2>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	464b      	mov	r3, r9
 800803e:	4442      	add	r2, r8
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	d1c1      	bne.n	8007fce <_printf_float+0x342>
 800804a:	e680      	b.n	8007d4e <_printf_float+0xc2>
 800804c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804e:	2a01      	cmp	r2, #1
 8008050:	dc01      	bgt.n	8008056 <_printf_float+0x3ca>
 8008052:	07db      	lsls	r3, r3, #31
 8008054:	d538      	bpl.n	80080c8 <_printf_float+0x43c>
 8008056:	2301      	movs	r3, #1
 8008058:	4642      	mov	r2, r8
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	f43f ae74 	beq.w	8007d4e <_printf_float+0xc2>
 8008066:	ee18 3a10 	vmov	r3, s16
 800806a:	4652      	mov	r2, sl
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f ae6b 	beq.w	8007d4e <_printf_float+0xc2>
 8008078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800807c:	2200      	movs	r2, #0
 800807e:	2300      	movs	r3, #0
 8008080:	f7f8 fd42 	bl	8000b08 <__aeabi_dcmpeq>
 8008084:	b9d8      	cbnz	r0, 80080be <_printf_float+0x432>
 8008086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008088:	f108 0201 	add.w	r2, r8, #1
 800808c:	3b01      	subs	r3, #1
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	d10e      	bne.n	80080b6 <_printf_float+0x42a>
 8008098:	e659      	b.n	8007d4e <_printf_float+0xc2>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae52 	beq.w	8007d4e <_printf_float+0xc2>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4543      	cmp	r3, r8
 80080b4:	dcf1      	bgt.n	800809a <_printf_float+0x40e>
 80080b6:	464b      	mov	r3, r9
 80080b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080bc:	e6dc      	b.n	8007e78 <_printf_float+0x1ec>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	f104 0a1a 	add.w	sl, r4, #26
 80080c6:	e7f2      	b.n	80080ae <_printf_float+0x422>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4642      	mov	r2, r8
 80080cc:	e7df      	b.n	800808e <_printf_float+0x402>
 80080ce:	2301      	movs	r3, #1
 80080d0:	464a      	mov	r2, r9
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae38 	beq.w	8007d4e <_printf_float+0xc2>
 80080de:	f108 0801 	add.w	r8, r8, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dcf0      	bgt.n	80080ce <_printf_float+0x442>
 80080ec:	e6fa      	b.n	8007ee4 <_printf_float+0x258>
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	f104 0919 	add.w	r9, r4, #25
 80080f6:	e7f4      	b.n	80080e2 <_printf_float+0x456>

080080f8 <_printf_common>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	4616      	mov	r6, r2
 80080fe:	4699      	mov	r9, r3
 8008100:	688a      	ldr	r2, [r1, #8]
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	bfb8      	it	lt
 800810c:	4613      	movlt	r3, r2
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008114:	4607      	mov	r7, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b10a      	cbz	r2, 800811e <_printf_common+0x26>
 800811a:	3301      	adds	r3, #1
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	0699      	lsls	r1, r3, #26
 8008122:	bf42      	ittt	mi
 8008124:	6833      	ldrmi	r3, [r6, #0]
 8008126:	3302      	addmi	r3, #2
 8008128:	6033      	strmi	r3, [r6, #0]
 800812a:	6825      	ldr	r5, [r4, #0]
 800812c:	f015 0506 	ands.w	r5, r5, #6
 8008130:	d106      	bne.n	8008140 <_printf_common+0x48>
 8008132:	f104 0a19 	add.w	sl, r4, #25
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	6832      	ldr	r2, [r6, #0]
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	42ab      	cmp	r3, r5
 800813e:	dc26      	bgt.n	800818e <_printf_common+0x96>
 8008140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008144:	1e13      	subs	r3, r2, #0
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	bf18      	it	ne
 800814a:	2301      	movne	r3, #1
 800814c:	0692      	lsls	r2, r2, #26
 800814e:	d42b      	bmi.n	80081a8 <_printf_common+0xb0>
 8008150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	47c0      	blx	r8
 800815a:	3001      	adds	r0, #1
 800815c:	d01e      	beq.n	800819c <_printf_common+0xa4>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	68e5      	ldr	r5, [r4, #12]
 8008162:	6832      	ldr	r2, [r6, #0]
 8008164:	f003 0306 	and.w	r3, r3, #6
 8008168:	2b04      	cmp	r3, #4
 800816a:	bf08      	it	eq
 800816c:	1aad      	subeq	r5, r5, r2
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	bf0c      	ite	eq
 8008174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008178:	2500      	movne	r5, #0
 800817a:	4293      	cmp	r3, r2
 800817c:	bfc4      	itt	gt
 800817e:	1a9b      	subgt	r3, r3, r2
 8008180:	18ed      	addgt	r5, r5, r3
 8008182:	2600      	movs	r6, #0
 8008184:	341a      	adds	r4, #26
 8008186:	42b5      	cmp	r5, r6
 8008188:	d11a      	bne.n	80081c0 <_printf_common+0xc8>
 800818a:	2000      	movs	r0, #0
 800818c:	e008      	b.n	80081a0 <_printf_common+0xa8>
 800818e:	2301      	movs	r3, #1
 8008190:	4652      	mov	r2, sl
 8008192:	4649      	mov	r1, r9
 8008194:	4638      	mov	r0, r7
 8008196:	47c0      	blx	r8
 8008198:	3001      	adds	r0, #1
 800819a:	d103      	bne.n	80081a4 <_printf_common+0xac>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7c6      	b.n	8008136 <_printf_common+0x3e>
 80081a8:	18e1      	adds	r1, r4, r3
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	2030      	movs	r0, #48	; 0x30
 80081ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b2:	4422      	add	r2, r4
 80081b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081bc:	3302      	adds	r3, #2
 80081be:	e7c7      	b.n	8008150 <_printf_common+0x58>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4622      	mov	r2, r4
 80081c4:	4649      	mov	r1, r9
 80081c6:	4638      	mov	r0, r7
 80081c8:	47c0      	blx	r8
 80081ca:	3001      	adds	r0, #1
 80081cc:	d0e6      	beq.n	800819c <_printf_common+0xa4>
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7d9      	b.n	8008186 <_printf_common+0x8e>
	...

080081d4 <_printf_i>:
 80081d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	460c      	mov	r4, r1
 80081da:	4691      	mov	r9, r2
 80081dc:	7e27      	ldrb	r7, [r4, #24]
 80081de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e0:	2f78      	cmp	r7, #120	; 0x78
 80081e2:	4680      	mov	r8, r0
 80081e4:	469a      	mov	sl, r3
 80081e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ea:	d807      	bhi.n	80081fc <_printf_i+0x28>
 80081ec:	2f62      	cmp	r7, #98	; 0x62
 80081ee:	d80a      	bhi.n	8008206 <_printf_i+0x32>
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f000 80d8 	beq.w	80083a6 <_printf_i+0x1d2>
 80081f6:	2f58      	cmp	r7, #88	; 0x58
 80081f8:	f000 80a3 	beq.w	8008342 <_printf_i+0x16e>
 80081fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008204:	e03a      	b.n	800827c <_printf_i+0xa8>
 8008206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800820a:	2b15      	cmp	r3, #21
 800820c:	d8f6      	bhi.n	80081fc <_printf_i+0x28>
 800820e:	a001      	add	r0, pc, #4	; (adr r0, 8008214 <_printf_i+0x40>)
 8008210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008214:	0800826d 	.word	0x0800826d
 8008218:	08008281 	.word	0x08008281
 800821c:	080081fd 	.word	0x080081fd
 8008220:	080081fd 	.word	0x080081fd
 8008224:	080081fd 	.word	0x080081fd
 8008228:	080081fd 	.word	0x080081fd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081fd 	.word	0x080081fd
 8008234:	080081fd 	.word	0x080081fd
 8008238:	080081fd 	.word	0x080081fd
 800823c:	080081fd 	.word	0x080081fd
 8008240:	0800838d 	.word	0x0800838d
 8008244:	080082b1 	.word	0x080082b1
 8008248:	0800836f 	.word	0x0800836f
 800824c:	080081fd 	.word	0x080081fd
 8008250:	080081fd 	.word	0x080081fd
 8008254:	080083af 	.word	0x080083af
 8008258:	080081fd 	.word	0x080081fd
 800825c:	080082b1 	.word	0x080082b1
 8008260:	080081fd 	.word	0x080081fd
 8008264:	080081fd 	.word	0x080081fd
 8008268:	08008377 	.word	0x08008377
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	600a      	str	r2, [r1, #0]
 8008274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800827c:	2301      	movs	r3, #1
 800827e:	e0a3      	b.n	80083c8 <_printf_i+0x1f4>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	6808      	ldr	r0, [r1, #0]
 8008284:	062e      	lsls	r6, r5, #24
 8008286:	f100 0304 	add.w	r3, r0, #4
 800828a:	d50a      	bpl.n	80082a2 <_printf_i+0xce>
 800828c:	6805      	ldr	r5, [r0, #0]
 800828e:	600b      	str	r3, [r1, #0]
 8008290:	2d00      	cmp	r5, #0
 8008292:	da03      	bge.n	800829c <_printf_i+0xc8>
 8008294:	232d      	movs	r3, #45	; 0x2d
 8008296:	426d      	negs	r5, r5
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	485e      	ldr	r0, [pc, #376]	; (8008418 <_printf_i+0x244>)
 800829e:	230a      	movs	r3, #10
 80082a0:	e019      	b.n	80082d6 <_printf_i+0x102>
 80082a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082a6:	6805      	ldr	r5, [r0, #0]
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	bf18      	it	ne
 80082ac:	b22d      	sxthne	r5, r5
 80082ae:	e7ef      	b.n	8008290 <_printf_i+0xbc>
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	1d18      	adds	r0, r3, #4
 80082b6:	6008      	str	r0, [r1, #0]
 80082b8:	0628      	lsls	r0, r5, #24
 80082ba:	d501      	bpl.n	80082c0 <_printf_i+0xec>
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	e002      	b.n	80082c6 <_printf_i+0xf2>
 80082c0:	0669      	lsls	r1, r5, #25
 80082c2:	d5fb      	bpl.n	80082bc <_printf_i+0xe8>
 80082c4:	881d      	ldrh	r5, [r3, #0]
 80082c6:	4854      	ldr	r0, [pc, #336]	; (8008418 <_printf_i+0x244>)
 80082c8:	2f6f      	cmp	r7, #111	; 0x6f
 80082ca:	bf0c      	ite	eq
 80082cc:	2308      	moveq	r3, #8
 80082ce:	230a      	movne	r3, #10
 80082d0:	2100      	movs	r1, #0
 80082d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082d6:	6866      	ldr	r6, [r4, #4]
 80082d8:	60a6      	str	r6, [r4, #8]
 80082da:	2e00      	cmp	r6, #0
 80082dc:	bfa2      	ittt	ge
 80082de:	6821      	ldrge	r1, [r4, #0]
 80082e0:	f021 0104 	bicge.w	r1, r1, #4
 80082e4:	6021      	strge	r1, [r4, #0]
 80082e6:	b90d      	cbnz	r5, 80082ec <_printf_i+0x118>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	d04d      	beq.n	8008388 <_printf_i+0x1b4>
 80082ec:	4616      	mov	r6, r2
 80082ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f2:	fb03 5711 	mls	r7, r3, r1, r5
 80082f6:	5dc7      	ldrb	r7, [r0, r7]
 80082f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082fc:	462f      	mov	r7, r5
 80082fe:	42bb      	cmp	r3, r7
 8008300:	460d      	mov	r5, r1
 8008302:	d9f4      	bls.n	80082ee <_printf_i+0x11a>
 8008304:	2b08      	cmp	r3, #8
 8008306:	d10b      	bne.n	8008320 <_printf_i+0x14c>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	07df      	lsls	r7, r3, #31
 800830c:	d508      	bpl.n	8008320 <_printf_i+0x14c>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6861      	ldr	r1, [r4, #4]
 8008312:	4299      	cmp	r1, r3
 8008314:	bfde      	ittt	le
 8008316:	2330      	movle	r3, #48	; 0x30
 8008318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800831c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008320:	1b92      	subs	r2, r2, r6
 8008322:	6122      	str	r2, [r4, #16]
 8008324:	f8cd a000 	str.w	sl, [sp]
 8008328:	464b      	mov	r3, r9
 800832a:	aa03      	add	r2, sp, #12
 800832c:	4621      	mov	r1, r4
 800832e:	4640      	mov	r0, r8
 8008330:	f7ff fee2 	bl	80080f8 <_printf_common>
 8008334:	3001      	adds	r0, #1
 8008336:	d14c      	bne.n	80083d2 <_printf_i+0x1fe>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	b004      	add	sp, #16
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008342:	4835      	ldr	r0, [pc, #212]	; (8008418 <_printf_i+0x244>)
 8008344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	061f      	lsls	r7, r3, #24
 800834e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008352:	600e      	str	r6, [r1, #0]
 8008354:	d514      	bpl.n	8008380 <_printf_i+0x1ac>
 8008356:	07d9      	lsls	r1, r3, #31
 8008358:	bf44      	itt	mi
 800835a:	f043 0320 	orrmi.w	r3, r3, #32
 800835e:	6023      	strmi	r3, [r4, #0]
 8008360:	b91d      	cbnz	r5, 800836a <_printf_i+0x196>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f023 0320 	bic.w	r3, r3, #32
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	2310      	movs	r3, #16
 800836c:	e7b0      	b.n	80082d0 <_printf_i+0xfc>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2378      	movs	r3, #120	; 0x78
 8008378:	4828      	ldr	r0, [pc, #160]	; (800841c <_printf_i+0x248>)
 800837a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800837e:	e7e3      	b.n	8008348 <_printf_i+0x174>
 8008380:	065e      	lsls	r6, r3, #25
 8008382:	bf48      	it	mi
 8008384:	b2ad      	uxthmi	r5, r5
 8008386:	e7e6      	b.n	8008356 <_printf_i+0x182>
 8008388:	4616      	mov	r6, r2
 800838a:	e7bb      	b.n	8008304 <_printf_i+0x130>
 800838c:	680b      	ldr	r3, [r1, #0]
 800838e:	6826      	ldr	r6, [r4, #0]
 8008390:	6960      	ldr	r0, [r4, #20]
 8008392:	1d1d      	adds	r5, r3, #4
 8008394:	600d      	str	r5, [r1, #0]
 8008396:	0635      	lsls	r5, r6, #24
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0x1cc>
 800839c:	6018      	str	r0, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0x1d2>
 80083a0:	0671      	lsls	r1, r6, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0x1c8>
 80083a4:	8018      	strh	r0, [r3, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	4616      	mov	r6, r2
 80083ac:	e7ba      	b.n	8008324 <_printf_i+0x150>
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	1d1a      	adds	r2, r3, #4
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	681e      	ldr	r6, [r3, #0]
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7f7 ff30 	bl	8000220 <memchr>
 80083c0:	b108      	cbz	r0, 80083c6 <_printf_i+0x1f2>
 80083c2:	1b80      	subs	r0, r0, r6
 80083c4:	6060      	str	r0, [r4, #4]
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2300      	movs	r3, #0
 80083cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d0:	e7a8      	b.n	8008324 <_printf_i+0x150>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4649      	mov	r1, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	47d0      	blx	sl
 80083dc:	3001      	adds	r0, #1
 80083de:	d0ab      	beq.n	8008338 <_printf_i+0x164>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	079b      	lsls	r3, r3, #30
 80083e4:	d413      	bmi.n	800840e <_printf_i+0x23a>
 80083e6:	68e0      	ldr	r0, [r4, #12]
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	4298      	cmp	r0, r3
 80083ec:	bfb8      	it	lt
 80083ee:	4618      	movlt	r0, r3
 80083f0:	e7a4      	b.n	800833c <_printf_i+0x168>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4632      	mov	r2, r6
 80083f6:	4649      	mov	r1, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	47d0      	blx	sl
 80083fc:	3001      	adds	r0, #1
 80083fe:	d09b      	beq.n	8008338 <_printf_i+0x164>
 8008400:	3501      	adds	r5, #1
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	42ab      	cmp	r3, r5
 800840a:	dcf2      	bgt.n	80083f2 <_printf_i+0x21e>
 800840c:	e7eb      	b.n	80083e6 <_printf_i+0x212>
 800840e:	2500      	movs	r5, #0
 8008410:	f104 0619 	add.w	r6, r4, #25
 8008414:	e7f5      	b.n	8008402 <_printf_i+0x22e>
 8008416:	bf00      	nop
 8008418:	0800cc98 	.word	0x0800cc98
 800841c:	0800cca9 	.word	0x0800cca9

08008420 <_scanf_float>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	b087      	sub	sp, #28
 8008426:	4617      	mov	r7, r2
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	688b      	ldr	r3, [r1, #8]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008432:	bf83      	ittte	hi
 8008434:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008438:	195b      	addhi	r3, r3, r5
 800843a:	9302      	strhi	r3, [sp, #8]
 800843c:	2300      	movls	r3, #0
 800843e:	bf86      	itte	hi
 8008440:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008444:	608b      	strhi	r3, [r1, #8]
 8008446:	9302      	strls	r3, [sp, #8]
 8008448:	680b      	ldr	r3, [r1, #0]
 800844a:	468b      	mov	fp, r1
 800844c:	2500      	movs	r5, #0
 800844e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008452:	f84b 3b1c 	str.w	r3, [fp], #28
 8008456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800845a:	4680      	mov	r8, r0
 800845c:	460c      	mov	r4, r1
 800845e:	465e      	mov	r6, fp
 8008460:	46aa      	mov	sl, r5
 8008462:	46a9      	mov	r9, r5
 8008464:	9501      	str	r5, [sp, #4]
 8008466:	68a2      	ldr	r2, [r4, #8]
 8008468:	b152      	cbz	r2, 8008480 <_scanf_float+0x60>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b4e      	cmp	r3, #78	; 0x4e
 8008470:	d864      	bhi.n	800853c <_scanf_float+0x11c>
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d83c      	bhi.n	80084f0 <_scanf_float+0xd0>
 8008476:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800847a:	b2c8      	uxtb	r0, r1
 800847c:	280e      	cmp	r0, #14
 800847e:	d93a      	bls.n	80084f6 <_scanf_float+0xd6>
 8008480:	f1b9 0f00 	cmp.w	r9, #0
 8008484:	d003      	beq.n	800848e <_scanf_float+0x6e>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008492:	f1ba 0f01 	cmp.w	sl, #1
 8008496:	f200 8113 	bhi.w	80086c0 <_scanf_float+0x2a0>
 800849a:	455e      	cmp	r6, fp
 800849c:	f200 8105 	bhi.w	80086aa <_scanf_float+0x28a>
 80084a0:	2501      	movs	r5, #1
 80084a2:	4628      	mov	r0, r5
 80084a4:	b007      	add	sp, #28
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084ae:	2a0d      	cmp	r2, #13
 80084b0:	d8e6      	bhi.n	8008480 <_scanf_float+0x60>
 80084b2:	a101      	add	r1, pc, #4	; (adr r1, 80084b8 <_scanf_float+0x98>)
 80084b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084b8:	080085f7 	.word	0x080085f7
 80084bc:	08008481 	.word	0x08008481
 80084c0:	08008481 	.word	0x08008481
 80084c4:	08008481 	.word	0x08008481
 80084c8:	08008657 	.word	0x08008657
 80084cc:	0800862f 	.word	0x0800862f
 80084d0:	08008481 	.word	0x08008481
 80084d4:	08008481 	.word	0x08008481
 80084d8:	08008605 	.word	0x08008605
 80084dc:	08008481 	.word	0x08008481
 80084e0:	08008481 	.word	0x08008481
 80084e4:	08008481 	.word	0x08008481
 80084e8:	08008481 	.word	0x08008481
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084f4:	e7db      	b.n	80084ae <_scanf_float+0x8e>
 80084f6:	290e      	cmp	r1, #14
 80084f8:	d8c2      	bhi.n	8008480 <_scanf_float+0x60>
 80084fa:	a001      	add	r0, pc, #4	; (adr r0, 8008500 <_scanf_float+0xe0>)
 80084fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008500:	080085af 	.word	0x080085af
 8008504:	08008481 	.word	0x08008481
 8008508:	080085af 	.word	0x080085af
 800850c:	08008643 	.word	0x08008643
 8008510:	08008481 	.word	0x08008481
 8008514:	0800855d 	.word	0x0800855d
 8008518:	08008599 	.word	0x08008599
 800851c:	08008599 	.word	0x08008599
 8008520:	08008599 	.word	0x08008599
 8008524:	08008599 	.word	0x08008599
 8008528:	08008599 	.word	0x08008599
 800852c:	08008599 	.word	0x08008599
 8008530:	08008599 	.word	0x08008599
 8008534:	08008599 	.word	0x08008599
 8008538:	08008599 	.word	0x08008599
 800853c:	2b6e      	cmp	r3, #110	; 0x6e
 800853e:	d809      	bhi.n	8008554 <_scanf_float+0x134>
 8008540:	2b60      	cmp	r3, #96	; 0x60
 8008542:	d8b2      	bhi.n	80084aa <_scanf_float+0x8a>
 8008544:	2b54      	cmp	r3, #84	; 0x54
 8008546:	d077      	beq.n	8008638 <_scanf_float+0x218>
 8008548:	2b59      	cmp	r3, #89	; 0x59
 800854a:	d199      	bne.n	8008480 <_scanf_float+0x60>
 800854c:	2d07      	cmp	r5, #7
 800854e:	d197      	bne.n	8008480 <_scanf_float+0x60>
 8008550:	2508      	movs	r5, #8
 8008552:	e029      	b.n	80085a8 <_scanf_float+0x188>
 8008554:	2b74      	cmp	r3, #116	; 0x74
 8008556:	d06f      	beq.n	8008638 <_scanf_float+0x218>
 8008558:	2b79      	cmp	r3, #121	; 0x79
 800855a:	e7f6      	b.n	800854a <_scanf_float+0x12a>
 800855c:	6821      	ldr	r1, [r4, #0]
 800855e:	05c8      	lsls	r0, r1, #23
 8008560:	d51a      	bpl.n	8008598 <_scanf_float+0x178>
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008568:	6021      	str	r1, [r4, #0]
 800856a:	f109 0901 	add.w	r9, r9, #1
 800856e:	b11b      	cbz	r3, 8008578 <_scanf_float+0x158>
 8008570:	3b01      	subs	r3, #1
 8008572:	3201      	adds	r2, #1
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	60a2      	str	r2, [r4, #8]
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	3b01      	subs	r3, #1
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3b01      	subs	r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	f340 8084 	ble.w	8008698 <_scanf_float+0x278>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	e766      	b.n	8008466 <_scanf_float+0x46>
 8008598:	eb1a 0f05 	cmn.w	sl, r5
 800859c:	f47f af70 	bne.w	8008480 <_scanf_float+0x60>
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085a6:	6022      	str	r2, [r4, #0]
 80085a8:	f806 3b01 	strb.w	r3, [r6], #1
 80085ac:	e7e4      	b.n	8008578 <_scanf_float+0x158>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	0610      	lsls	r0, r2, #24
 80085b2:	f57f af65 	bpl.w	8008480 <_scanf_float+0x60>
 80085b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ba:	e7f4      	b.n	80085a6 <_scanf_float+0x186>
 80085bc:	f1ba 0f00 	cmp.w	sl, #0
 80085c0:	d10e      	bne.n	80085e0 <_scanf_float+0x1c0>
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	d10e      	bne.n	80085e6 <_scanf_float+0x1c6>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085d2:	d108      	bne.n	80085e6 <_scanf_float+0x1c6>
 80085d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	f04f 0a01 	mov.w	sl, #1
 80085de:	e7e3      	b.n	80085a8 <_scanf_float+0x188>
 80085e0:	f1ba 0f02 	cmp.w	sl, #2
 80085e4:	d055      	beq.n	8008692 <_scanf_float+0x272>
 80085e6:	2d01      	cmp	r5, #1
 80085e8:	d002      	beq.n	80085f0 <_scanf_float+0x1d0>
 80085ea:	2d04      	cmp	r5, #4
 80085ec:	f47f af48 	bne.w	8008480 <_scanf_float+0x60>
 80085f0:	3501      	adds	r5, #1
 80085f2:	b2ed      	uxtb	r5, r5
 80085f4:	e7d8      	b.n	80085a8 <_scanf_float+0x188>
 80085f6:	f1ba 0f01 	cmp.w	sl, #1
 80085fa:	f47f af41 	bne.w	8008480 <_scanf_float+0x60>
 80085fe:	f04f 0a02 	mov.w	sl, #2
 8008602:	e7d1      	b.n	80085a8 <_scanf_float+0x188>
 8008604:	b97d      	cbnz	r5, 8008626 <_scanf_float+0x206>
 8008606:	f1b9 0f00 	cmp.w	r9, #0
 800860a:	f47f af3c 	bne.w	8008486 <_scanf_float+0x66>
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008614:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008618:	f47f af39 	bne.w	800848e <_scanf_float+0x6e>
 800861c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	2501      	movs	r5, #1
 8008624:	e7c0      	b.n	80085a8 <_scanf_float+0x188>
 8008626:	2d03      	cmp	r5, #3
 8008628:	d0e2      	beq.n	80085f0 <_scanf_float+0x1d0>
 800862a:	2d05      	cmp	r5, #5
 800862c:	e7de      	b.n	80085ec <_scanf_float+0x1cc>
 800862e:	2d02      	cmp	r5, #2
 8008630:	f47f af26 	bne.w	8008480 <_scanf_float+0x60>
 8008634:	2503      	movs	r5, #3
 8008636:	e7b7      	b.n	80085a8 <_scanf_float+0x188>
 8008638:	2d06      	cmp	r5, #6
 800863a:	f47f af21 	bne.w	8008480 <_scanf_float+0x60>
 800863e:	2507      	movs	r5, #7
 8008640:	e7b2      	b.n	80085a8 <_scanf_float+0x188>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	0591      	lsls	r1, r2, #22
 8008646:	f57f af1b 	bpl.w	8008480 <_scanf_float+0x60>
 800864a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	f8cd 9004 	str.w	r9, [sp, #4]
 8008654:	e7a8      	b.n	80085a8 <_scanf_float+0x188>
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800865c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008660:	d006      	beq.n	8008670 <_scanf_float+0x250>
 8008662:	0550      	lsls	r0, r2, #21
 8008664:	f57f af0c 	bpl.w	8008480 <_scanf_float+0x60>
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	f43f af0f 	beq.w	800848e <_scanf_float+0x6e>
 8008670:	0591      	lsls	r1, r2, #22
 8008672:	bf58      	it	pl
 8008674:	9901      	ldrpl	r1, [sp, #4]
 8008676:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800867a:	bf58      	it	pl
 800867c:	eba9 0101 	subpl.w	r1, r9, r1
 8008680:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008684:	bf58      	it	pl
 8008686:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	e78a      	b.n	80085a8 <_scanf_float+0x188>
 8008692:	f04f 0a03 	mov.w	sl, #3
 8008696:	e787      	b.n	80085a8 <_scanf_float+0x188>
 8008698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800869c:	4639      	mov	r1, r7
 800869e:	4640      	mov	r0, r8
 80086a0:	4798      	blx	r3
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f43f aedf 	beq.w	8008466 <_scanf_float+0x46>
 80086a8:	e6ea      	b.n	8008480 <_scanf_float+0x60>
 80086aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086b2:	463a      	mov	r2, r7
 80086b4:	4640      	mov	r0, r8
 80086b6:	4798      	blx	r3
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	e6ec      	b.n	800849a <_scanf_float+0x7a>
 80086c0:	1e6b      	subs	r3, r5, #1
 80086c2:	2b06      	cmp	r3, #6
 80086c4:	d825      	bhi.n	8008712 <_scanf_float+0x2f2>
 80086c6:	2d02      	cmp	r5, #2
 80086c8:	d836      	bhi.n	8008738 <_scanf_float+0x318>
 80086ca:	455e      	cmp	r6, fp
 80086cc:	f67f aee8 	bls.w	80084a0 <_scanf_float+0x80>
 80086d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086d8:	463a      	mov	r2, r7
 80086da:	4640      	mov	r0, r8
 80086dc:	4798      	blx	r3
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	e7f1      	b.n	80086ca <_scanf_float+0x2aa>
 80086e6:	9802      	ldr	r0, [sp, #8]
 80086e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086f0:	9002      	str	r0, [sp, #8]
 80086f2:	463a      	mov	r2, r7
 80086f4:	4640      	mov	r0, r8
 80086f6:	4798      	blx	r3
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008702:	fa5f fa8a 	uxtb.w	sl, sl
 8008706:	f1ba 0f02 	cmp.w	sl, #2
 800870a:	d1ec      	bne.n	80086e6 <_scanf_float+0x2c6>
 800870c:	3d03      	subs	r5, #3
 800870e:	b2ed      	uxtb	r5, r5
 8008710:	1b76      	subs	r6, r6, r5
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	05da      	lsls	r2, r3, #23
 8008716:	d52f      	bpl.n	8008778 <_scanf_float+0x358>
 8008718:	055b      	lsls	r3, r3, #21
 800871a:	d510      	bpl.n	800873e <_scanf_float+0x31e>
 800871c:	455e      	cmp	r6, fp
 800871e:	f67f aebf 	bls.w	80084a0 <_scanf_float+0x80>
 8008722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800872a:	463a      	mov	r2, r7
 800872c:	4640      	mov	r0, r8
 800872e:	4798      	blx	r3
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	6123      	str	r3, [r4, #16]
 8008736:	e7f1      	b.n	800871c <_scanf_float+0x2fc>
 8008738:	46aa      	mov	sl, r5
 800873a:	9602      	str	r6, [sp, #8]
 800873c:	e7df      	b.n	80086fe <_scanf_float+0x2de>
 800873e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	2965      	cmp	r1, #101	; 0x65
 8008746:	f103 33ff 	add.w	r3, r3, #4294967295
 800874a:	f106 35ff 	add.w	r5, r6, #4294967295
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	d00c      	beq.n	800876c <_scanf_float+0x34c>
 8008752:	2945      	cmp	r1, #69	; 0x45
 8008754:	d00a      	beq.n	800876c <_scanf_float+0x34c>
 8008756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800875a:	463a      	mov	r2, r7
 800875c:	4640      	mov	r0, r8
 800875e:	4798      	blx	r3
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008766:	3b01      	subs	r3, #1
 8008768:	1eb5      	subs	r5, r6, #2
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008770:	463a      	mov	r2, r7
 8008772:	4640      	mov	r0, r8
 8008774:	4798      	blx	r3
 8008776:	462e      	mov	r6, r5
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	f015 0510 	ands.w	r5, r5, #16
 800877e:	d158      	bne.n	8008832 <_scanf_float+0x412>
 8008780:	7035      	strb	r5, [r6, #0]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	d11c      	bne.n	80087c8 <_scanf_float+0x3a8>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	454b      	cmp	r3, r9
 8008792:	eba3 0209 	sub.w	r2, r3, r9
 8008796:	d124      	bne.n	80087e2 <_scanf_float+0x3c2>
 8008798:	2200      	movs	r2, #0
 800879a:	4659      	mov	r1, fp
 800879c:	4640      	mov	r0, r8
 800879e:	f000 ff0d 	bl	80095bc <_strtod_r>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	6821      	ldr	r1, [r4, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f011 0f02 	tst.w	r1, #2
 80087ac:	ec57 6b10 	vmov	r6, r7, d0
 80087b0:	f103 0204 	add.w	r2, r3, #4
 80087b4:	d020      	beq.n	80087f8 <_scanf_float+0x3d8>
 80087b6:	9903      	ldr	r1, [sp, #12]
 80087b8:	600a      	str	r2, [r1, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	e9c3 6700 	strd	r6, r7, [r3]
 80087c0:	68e3      	ldr	r3, [r4, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60e3      	str	r3, [r4, #12]
 80087c6:	e66c      	b.n	80084a2 <_scanf_float+0x82>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0e4      	beq.n	8008798 <_scanf_float+0x378>
 80087ce:	9905      	ldr	r1, [sp, #20]
 80087d0:	230a      	movs	r3, #10
 80087d2:	462a      	mov	r2, r5
 80087d4:	3101      	adds	r1, #1
 80087d6:	4640      	mov	r0, r8
 80087d8:	f000 ff7a 	bl	80096d0 <_strtol_r>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	9e05      	ldr	r6, [sp, #20]
 80087e0:	1ac2      	subs	r2, r0, r3
 80087e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087e6:	429e      	cmp	r6, r3
 80087e8:	bf28      	it	cs
 80087ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087ee:	4912      	ldr	r1, [pc, #72]	; (8008838 <_scanf_float+0x418>)
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f82b 	bl	800884c <siprintf>
 80087f6:	e7cf      	b.n	8008798 <_scanf_float+0x378>
 80087f8:	f011 0f04 	tst.w	r1, #4
 80087fc:	9903      	ldr	r1, [sp, #12]
 80087fe:	600a      	str	r2, [r1, #0]
 8008800:	d1db      	bne.n	80087ba <_scanf_float+0x39a>
 8008802:	f8d3 8000 	ldr.w	r8, [r3]
 8008806:	ee10 2a10 	vmov	r2, s0
 800880a:	ee10 0a10 	vmov	r0, s0
 800880e:	463b      	mov	r3, r7
 8008810:	4639      	mov	r1, r7
 8008812:	f7f8 f9ab 	bl	8000b6c <__aeabi_dcmpun>
 8008816:	b128      	cbz	r0, 8008824 <_scanf_float+0x404>
 8008818:	4808      	ldr	r0, [pc, #32]	; (800883c <_scanf_float+0x41c>)
 800881a:	f000 f811 	bl	8008840 <nanf>
 800881e:	ed88 0a00 	vstr	s0, [r8]
 8008822:	e7cd      	b.n	80087c0 <_scanf_float+0x3a0>
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f8 f9fe 	bl	8000c28 <__aeabi_d2f>
 800882c:	f8c8 0000 	str.w	r0, [r8]
 8008830:	e7c6      	b.n	80087c0 <_scanf_float+0x3a0>
 8008832:	2500      	movs	r5, #0
 8008834:	e635      	b.n	80084a2 <_scanf_float+0x82>
 8008836:	bf00      	nop
 8008838:	0800ccba 	.word	0x0800ccba
 800883c:	0800d0eb 	.word	0x0800d0eb

08008840 <nanf>:
 8008840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008848 <nanf+0x8>
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	7fc00000 	.word	0x7fc00000

0800884c <siprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	b500      	push	{lr}
 8008850:	b09c      	sub	sp, #112	; 0x70
 8008852:	ab1d      	add	r3, sp, #116	; 0x74
 8008854:	9002      	str	r0, [sp, #8]
 8008856:	9006      	str	r0, [sp, #24]
 8008858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800885c:	4809      	ldr	r0, [pc, #36]	; (8008884 <siprintf+0x38>)
 800885e:	9107      	str	r1, [sp, #28]
 8008860:	9104      	str	r1, [sp, #16]
 8008862:	4909      	ldr	r1, [pc, #36]	; (8008888 <siprintf+0x3c>)
 8008864:	f853 2b04 	ldr.w	r2, [r3], #4
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	a902      	add	r1, sp, #8
 8008870:	f002 ff48 	bl	800b704 <_svfiprintf_r>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	b01c      	add	sp, #112	; 0x70
 800887c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008880:	b003      	add	sp, #12
 8008882:	4770      	bx	lr
 8008884:	20000028 	.word	0x20000028
 8008888:	ffff0208 	.word	0xffff0208

0800888c <siscanf>:
 800888c:	b40e      	push	{r1, r2, r3}
 800888e:	b510      	push	{r4, lr}
 8008890:	b09f      	sub	sp, #124	; 0x7c
 8008892:	ac21      	add	r4, sp, #132	; 0x84
 8008894:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008898:	f854 2b04 	ldr.w	r2, [r4], #4
 800889c:	9201      	str	r2, [sp, #4]
 800889e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80088a2:	9004      	str	r0, [sp, #16]
 80088a4:	9008      	str	r0, [sp, #32]
 80088a6:	f7f7 fcb3 	bl	8000210 <strlen>
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <siscanf+0x50>)
 80088ac:	9005      	str	r0, [sp, #20]
 80088ae:	9009      	str	r0, [sp, #36]	; 0x24
 80088b0:	930d      	str	r3, [sp, #52]	; 0x34
 80088b2:	480b      	ldr	r0, [pc, #44]	; (80088e0 <siscanf+0x54>)
 80088b4:	9a01      	ldr	r2, [sp, #4]
 80088b6:	6800      	ldr	r0, [r0, #0]
 80088b8:	9403      	str	r4, [sp, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	9311      	str	r3, [sp, #68]	; 0x44
 80088be:	9316      	str	r3, [sp, #88]	; 0x58
 80088c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	4623      	mov	r3, r4
 80088cc:	f003 f874 	bl	800b9b8 <__ssvfiscanf_r>
 80088d0:	b01f      	add	sp, #124	; 0x7c
 80088d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d6:	b003      	add	sp, #12
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	08008907 	.word	0x08008907
 80088e0:	20000028 	.word	0x20000028

080088e4 <__sread>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	f003 fb28 	bl	800bf40 <_read_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	bfab      	itete	ge
 80088f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f6:	89a3      	ldrhlt	r3, [r4, #12]
 80088f8:	181b      	addge	r3, r3, r0
 80088fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fe:	bfac      	ite	ge
 8008900:	6563      	strge	r3, [r4, #84]	; 0x54
 8008902:	81a3      	strhlt	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__seofread>:
 8008906:	2000      	movs	r0, #0
 8008908:	4770      	bx	lr

0800890a <__swrite>:
 800890a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890e:	461f      	mov	r7, r3
 8008910:	898b      	ldrh	r3, [r1, #12]
 8008912:	05db      	lsls	r3, r3, #23
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	4616      	mov	r6, r2
 800891a:	d505      	bpl.n	8008928 <__swrite+0x1e>
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	2302      	movs	r3, #2
 8008922:	2200      	movs	r2, #0
 8008924:	f002 f8e4 	bl	800aaf0 <_lseek_r>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800892e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	4632      	mov	r2, r6
 8008936:	463b      	mov	r3, r7
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	f000 bec9 	b.w	80096d4 <_write_r>

08008942 <__sseek>:
 8008942:	b510      	push	{r4, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f002 f8d1 	bl	800aaf0 <_lseek_r>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	bf15      	itete	ne
 8008954:	6560      	strne	r0, [r4, #84]	; 0x54
 8008956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800895a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800895e:	81a3      	strheq	r3, [r4, #12]
 8008960:	bf18      	it	ne
 8008962:	81a3      	strhne	r3, [r4, #12]
 8008964:	bd10      	pop	{r4, pc}

08008966 <__sclose>:
 8008966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896a:	f000 bec5 	b.w	80096f8 <_close_r>

0800896e <sulp>:
 800896e:	b570      	push	{r4, r5, r6, lr}
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	ec45 4b10 	vmov	d0, r4, r5
 8008978:	4616      	mov	r6, r2
 800897a:	f002 fc5f 	bl	800b23c <__ulp>
 800897e:	ec51 0b10 	vmov	r0, r1, d0
 8008982:	b17e      	cbz	r6, 80089a4 <sulp+0x36>
 8008984:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008988:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800898c:	2b00      	cmp	r3, #0
 800898e:	dd09      	ble.n	80089a4 <sulp+0x36>
 8008990:	051b      	lsls	r3, r3, #20
 8008992:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008996:	2400      	movs	r4, #0
 8008998:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800899c:	4622      	mov	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	f7f7 fe4a 	bl	8000638 <__aeabi_dmul>
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080089a8 <_strtod_l>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	b0a3      	sub	sp, #140	; 0x8c
 80089ae:	461f      	mov	r7, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	931e      	str	r3, [sp, #120]	; 0x78
 80089b4:	4ba4      	ldr	r3, [pc, #656]	; (8008c48 <_strtod_l+0x2a0>)
 80089b6:	9219      	str	r2, [sp, #100]	; 0x64
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	4604      	mov	r4, r0
 80089be:	4618      	mov	r0, r3
 80089c0:	4688      	mov	r8, r1
 80089c2:	f7f7 fc25 	bl	8000210 <strlen>
 80089c6:	f04f 0a00 	mov.w	sl, #0
 80089ca:	4605      	mov	r5, r0
 80089cc:	f04f 0b00 	mov.w	fp, #0
 80089d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80089d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	2a2b      	cmp	r2, #43	; 0x2b
 80089da:	d04c      	beq.n	8008a76 <_strtod_l+0xce>
 80089dc:	d839      	bhi.n	8008a52 <_strtod_l+0xaa>
 80089de:	2a0d      	cmp	r2, #13
 80089e0:	d832      	bhi.n	8008a48 <_strtod_l+0xa0>
 80089e2:	2a08      	cmp	r2, #8
 80089e4:	d832      	bhi.n	8008a4c <_strtod_l+0xa4>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d03c      	beq.n	8008a64 <_strtod_l+0xbc>
 80089ea:	2300      	movs	r3, #0
 80089ec:	930e      	str	r3, [sp, #56]	; 0x38
 80089ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80089f0:	7833      	ldrb	r3, [r6, #0]
 80089f2:	2b30      	cmp	r3, #48	; 0x30
 80089f4:	f040 80b4 	bne.w	8008b60 <_strtod_l+0x1b8>
 80089f8:	7873      	ldrb	r3, [r6, #1]
 80089fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089fe:	2b58      	cmp	r3, #88	; 0x58
 8008a00:	d16c      	bne.n	8008adc <_strtod_l+0x134>
 8008a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	ab1e      	add	r3, sp, #120	; 0x78
 8008a08:	9702      	str	r7, [sp, #8]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4a8f      	ldr	r2, [pc, #572]	; (8008c4c <_strtod_l+0x2a4>)
 8008a0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008a10:	a91d      	add	r1, sp, #116	; 0x74
 8008a12:	4620      	mov	r0, r4
 8008a14:	f001 fd60 	bl	800a4d8 <__gethex>
 8008a18:	f010 0707 	ands.w	r7, r0, #7
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	d005      	beq.n	8008a2c <_strtod_l+0x84>
 8008a20:	2f06      	cmp	r7, #6
 8008a22:	d12a      	bne.n	8008a7a <_strtod_l+0xd2>
 8008a24:	3601      	adds	r6, #1
 8008a26:	2300      	movs	r3, #0
 8008a28:	961d      	str	r6, [sp, #116]	; 0x74
 8008a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 8596 	bne.w	8009560 <_strtod_l+0xbb8>
 8008a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a36:	b1db      	cbz	r3, 8008a70 <_strtod_l+0xc8>
 8008a38:	4652      	mov	r2, sl
 8008a3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a3e:	ec43 2b10 	vmov	d0, r2, r3
 8008a42:	b023      	add	sp, #140	; 0x8c
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	2a20      	cmp	r2, #32
 8008a4a:	d1ce      	bne.n	80089ea <_strtod_l+0x42>
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	931d      	str	r3, [sp, #116]	; 0x74
 8008a50:	e7c0      	b.n	80089d4 <_strtod_l+0x2c>
 8008a52:	2a2d      	cmp	r2, #45	; 0x2d
 8008a54:	d1c9      	bne.n	80089ea <_strtod_l+0x42>
 8008a56:	2201      	movs	r2, #1
 8008a58:	920e      	str	r2, [sp, #56]	; 0x38
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	921d      	str	r2, [sp, #116]	; 0x74
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1c4      	bne.n	80089ee <_strtod_l+0x46>
 8008a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 8576 	bne.w	800955c <_strtod_l+0xbb4>
 8008a70:	4652      	mov	r2, sl
 8008a72:	465b      	mov	r3, fp
 8008a74:	e7e3      	b.n	8008a3e <_strtod_l+0x96>
 8008a76:	2200      	movs	r2, #0
 8008a78:	e7ee      	b.n	8008a58 <_strtod_l+0xb0>
 8008a7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a7c:	b13a      	cbz	r2, 8008a8e <_strtod_l+0xe6>
 8008a7e:	2135      	movs	r1, #53	; 0x35
 8008a80:	a820      	add	r0, sp, #128	; 0x80
 8008a82:	f002 fce6 	bl	800b452 <__copybits>
 8008a86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f002 f8ab 	bl	800abe4 <_Bfree>
 8008a8e:	3f01      	subs	r7, #1
 8008a90:	2f05      	cmp	r7, #5
 8008a92:	d807      	bhi.n	8008aa4 <_strtod_l+0xfc>
 8008a94:	e8df f007 	tbb	[pc, r7]
 8008a98:	1d180b0e 	.word	0x1d180b0e
 8008a9c:	030e      	.short	0x030e
 8008a9e:	f04f 0b00 	mov.w	fp, #0
 8008aa2:	46da      	mov	sl, fp
 8008aa4:	0728      	lsls	r0, r5, #28
 8008aa6:	d5c1      	bpl.n	8008a2c <_strtod_l+0x84>
 8008aa8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008aac:	e7be      	b.n	8008a2c <_strtod_l+0x84>
 8008aae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008ab2:	e7f7      	b.n	8008aa4 <_strtod_l+0xfc>
 8008ab4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008ab8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008aba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008abe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ac2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ac6:	e7ed      	b.n	8008aa4 <_strtod_l+0xfc>
 8008ac8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008c50 <_strtod_l+0x2a8>
 8008acc:	f04f 0a00 	mov.w	sl, #0
 8008ad0:	e7e8      	b.n	8008aa4 <_strtod_l+0xfc>
 8008ad2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ad6:	f04f 3aff 	mov.w	sl, #4294967295
 8008ada:	e7e3      	b.n	8008aa4 <_strtod_l+0xfc>
 8008adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	921d      	str	r2, [sp, #116]	; 0x74
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	2b30      	cmp	r3, #48	; 0x30
 8008ae6:	d0f9      	beq.n	8008adc <_strtod_l+0x134>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d09f      	beq.n	8008a2c <_strtod_l+0x84>
 8008aec:	2301      	movs	r3, #1
 8008aee:	f04f 0900 	mov.w	r9, #0
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
 8008af8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008afc:	464f      	mov	r7, r9
 8008afe:	220a      	movs	r2, #10
 8008b00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008b02:	7806      	ldrb	r6, [r0, #0]
 8008b04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b08:	b2d9      	uxtb	r1, r3
 8008b0a:	2909      	cmp	r1, #9
 8008b0c:	d92a      	bls.n	8008b64 <_strtod_l+0x1bc>
 8008b0e:	9907      	ldr	r1, [sp, #28]
 8008b10:	462a      	mov	r2, r5
 8008b12:	f003 fa7b 	bl	800c00c <strncmp>
 8008b16:	b398      	cbz	r0, 8008b80 <_strtod_l+0x1d8>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	4633      	mov	r3, r6
 8008b1c:	463d      	mov	r5, r7
 8008b1e:	9007      	str	r0, [sp, #28]
 8008b20:	4602      	mov	r2, r0
 8008b22:	2b65      	cmp	r3, #101	; 0x65
 8008b24:	d001      	beq.n	8008b2a <_strtod_l+0x182>
 8008b26:	2b45      	cmp	r3, #69	; 0x45
 8008b28:	d118      	bne.n	8008b5c <_strtod_l+0x1b4>
 8008b2a:	b91d      	cbnz	r5, 8008b34 <_strtod_l+0x18c>
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	4303      	orrs	r3, r0
 8008b30:	d098      	beq.n	8008a64 <_strtod_l+0xbc>
 8008b32:	2500      	movs	r5, #0
 8008b34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008b38:	f108 0301 	add.w	r3, r8, #1
 8008b3c:	931d      	str	r3, [sp, #116]	; 0x74
 8008b3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b42:	2b2b      	cmp	r3, #43	; 0x2b
 8008b44:	d075      	beq.n	8008c32 <_strtod_l+0x28a>
 8008b46:	2b2d      	cmp	r3, #45	; 0x2d
 8008b48:	d07b      	beq.n	8008c42 <_strtod_l+0x29a>
 8008b4a:	f04f 0c00 	mov.w	ip, #0
 8008b4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b52:	2909      	cmp	r1, #9
 8008b54:	f240 8082 	bls.w	8008c5c <_strtod_l+0x2b4>
 8008b58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	e09d      	b.n	8008c9c <_strtod_l+0x2f4>
 8008b60:	2300      	movs	r3, #0
 8008b62:	e7c4      	b.n	8008aee <_strtod_l+0x146>
 8008b64:	2f08      	cmp	r7, #8
 8008b66:	bfd8      	it	le
 8008b68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b6a:	f100 0001 	add.w	r0, r0, #1
 8008b6e:	bfda      	itte	le
 8008b70:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b74:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b7a:	3701      	adds	r7, #1
 8008b7c:	901d      	str	r0, [sp, #116]	; 0x74
 8008b7e:	e7bf      	b.n	8008b00 <_strtod_l+0x158>
 8008b80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b82:	195a      	adds	r2, r3, r5
 8008b84:	921d      	str	r2, [sp, #116]	; 0x74
 8008b86:	5d5b      	ldrb	r3, [r3, r5]
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	d037      	beq.n	8008bfc <_strtod_l+0x254>
 8008b8c:	9007      	str	r0, [sp, #28]
 8008b8e:	463d      	mov	r5, r7
 8008b90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b94:	2a09      	cmp	r2, #9
 8008b96:	d912      	bls.n	8008bbe <_strtod_l+0x216>
 8008b98:	2201      	movs	r2, #1
 8008b9a:	e7c2      	b.n	8008b22 <_strtod_l+0x17a>
 8008b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	921d      	str	r2, [sp, #116]	; 0x74
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	2b30      	cmp	r3, #48	; 0x30
 8008ba8:	d0f8      	beq.n	8008b9c <_strtod_l+0x1f4>
 8008baa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008bae:	2a08      	cmp	r2, #8
 8008bb0:	f200 84db 	bhi.w	800956a <_strtod_l+0xbc2>
 8008bb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008bb6:	9007      	str	r0, [sp, #28]
 8008bb8:	2000      	movs	r0, #0
 8008bba:	920a      	str	r2, [sp, #40]	; 0x28
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	f100 0201 	add.w	r2, r0, #1
 8008bc4:	d014      	beq.n	8008bf0 <_strtod_l+0x248>
 8008bc6:	9907      	ldr	r1, [sp, #28]
 8008bc8:	4411      	add	r1, r2
 8008bca:	9107      	str	r1, [sp, #28]
 8008bcc:	462a      	mov	r2, r5
 8008bce:	eb00 0e05 	add.w	lr, r0, r5
 8008bd2:	210a      	movs	r1, #10
 8008bd4:	4572      	cmp	r2, lr
 8008bd6:	d113      	bne.n	8008c00 <_strtod_l+0x258>
 8008bd8:	182a      	adds	r2, r5, r0
 8008bda:	2a08      	cmp	r2, #8
 8008bdc:	f105 0501 	add.w	r5, r5, #1
 8008be0:	4405      	add	r5, r0
 8008be2:	dc1c      	bgt.n	8008c1e <_strtod_l+0x276>
 8008be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008be6:	220a      	movs	r2, #10
 8008be8:	fb02 3301 	mla	r3, r2, r1, r3
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	2200      	movs	r2, #0
 8008bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bf2:	1c59      	adds	r1, r3, #1
 8008bf4:	911d      	str	r1, [sp, #116]	; 0x74
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	e7c9      	b.n	8008b90 <_strtod_l+0x1e8>
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	e7d2      	b.n	8008ba6 <_strtod_l+0x1fe>
 8008c00:	2a08      	cmp	r2, #8
 8008c02:	dc04      	bgt.n	8008c0e <_strtod_l+0x266>
 8008c04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c06:	434e      	muls	r6, r1
 8008c08:	9609      	str	r6, [sp, #36]	; 0x24
 8008c0a:	3201      	adds	r2, #1
 8008c0c:	e7e2      	b.n	8008bd4 <_strtod_l+0x22c>
 8008c0e:	f102 0c01 	add.w	ip, r2, #1
 8008c12:	f1bc 0f10 	cmp.w	ip, #16
 8008c16:	bfd8      	it	le
 8008c18:	fb01 f909 	mulle.w	r9, r1, r9
 8008c1c:	e7f5      	b.n	8008c0a <_strtod_l+0x262>
 8008c1e:	2d10      	cmp	r5, #16
 8008c20:	bfdc      	itt	le
 8008c22:	220a      	movle	r2, #10
 8008c24:	fb02 3909 	mlale	r9, r2, r9, r3
 8008c28:	e7e1      	b.n	8008bee <_strtod_l+0x246>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9307      	str	r3, [sp, #28]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	e77c      	b.n	8008b2c <_strtod_l+0x184>
 8008c32:	f04f 0c00 	mov.w	ip, #0
 8008c36:	f108 0302 	add.w	r3, r8, #2
 8008c3a:	931d      	str	r3, [sp, #116]	; 0x74
 8008c3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008c40:	e785      	b.n	8008b4e <_strtod_l+0x1a6>
 8008c42:	f04f 0c01 	mov.w	ip, #1
 8008c46:	e7f6      	b.n	8008c36 <_strtod_l+0x28e>
 8008c48:	0800cf10 	.word	0x0800cf10
 8008c4c:	0800ccc0 	.word	0x0800ccc0
 8008c50:	7ff00000 	.word	0x7ff00000
 8008c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	911d      	str	r1, [sp, #116]	; 0x74
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b30      	cmp	r3, #48	; 0x30
 8008c5e:	d0f9      	beq.n	8008c54 <_strtod_l+0x2ac>
 8008c60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008c64:	2908      	cmp	r1, #8
 8008c66:	f63f af79 	bhi.w	8008b5c <_strtod_l+0x1b4>
 8008c6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008c6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c70:	9308      	str	r3, [sp, #32]
 8008c72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c74:	1c59      	adds	r1, r3, #1
 8008c76:	911d      	str	r1, [sp, #116]	; 0x74
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008c7e:	2e09      	cmp	r6, #9
 8008c80:	d937      	bls.n	8008cf2 <_strtod_l+0x34a>
 8008c82:	9e08      	ldr	r6, [sp, #32]
 8008c84:	1b89      	subs	r1, r1, r6
 8008c86:	2908      	cmp	r1, #8
 8008c88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c8c:	dc02      	bgt.n	8008c94 <_strtod_l+0x2ec>
 8008c8e:	4576      	cmp	r6, lr
 8008c90:	bfa8      	it	ge
 8008c92:	4676      	movge	r6, lr
 8008c94:	f1bc 0f00 	cmp.w	ip, #0
 8008c98:	d000      	beq.n	8008c9c <_strtod_l+0x2f4>
 8008c9a:	4276      	negs	r6, r6
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d14f      	bne.n	8008d40 <_strtod_l+0x398>
 8008ca0:	9904      	ldr	r1, [sp, #16]
 8008ca2:	4301      	orrs	r1, r0
 8008ca4:	f47f aec2 	bne.w	8008a2c <_strtod_l+0x84>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	f47f aedb 	bne.w	8008a64 <_strtod_l+0xbc>
 8008cae:	2b69      	cmp	r3, #105	; 0x69
 8008cb0:	d027      	beq.n	8008d02 <_strtod_l+0x35a>
 8008cb2:	dc24      	bgt.n	8008cfe <_strtod_l+0x356>
 8008cb4:	2b49      	cmp	r3, #73	; 0x49
 8008cb6:	d024      	beq.n	8008d02 <_strtod_l+0x35a>
 8008cb8:	2b4e      	cmp	r3, #78	; 0x4e
 8008cba:	f47f aed3 	bne.w	8008a64 <_strtod_l+0xbc>
 8008cbe:	499e      	ldr	r1, [pc, #632]	; (8008f38 <_strtod_l+0x590>)
 8008cc0:	a81d      	add	r0, sp, #116	; 0x74
 8008cc2:	f001 fe61 	bl	800a988 <__match>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f aecc 	beq.w	8008a64 <_strtod_l+0xbc>
 8008ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b28      	cmp	r3, #40	; 0x28
 8008cd2:	d12d      	bne.n	8008d30 <_strtod_l+0x388>
 8008cd4:	4999      	ldr	r1, [pc, #612]	; (8008f3c <_strtod_l+0x594>)
 8008cd6:	aa20      	add	r2, sp, #128	; 0x80
 8008cd8:	a81d      	add	r0, sp, #116	; 0x74
 8008cda:	f001 fe69 	bl	800a9b0 <__hexnan>
 8008cde:	2805      	cmp	r0, #5
 8008ce0:	d126      	bne.n	8008d30 <_strtod_l+0x388>
 8008ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ce4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008ce8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cf0:	e69c      	b.n	8008a2c <_strtod_l+0x84>
 8008cf2:	210a      	movs	r1, #10
 8008cf4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008cf8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cfc:	e7b9      	b.n	8008c72 <_strtod_l+0x2ca>
 8008cfe:	2b6e      	cmp	r3, #110	; 0x6e
 8008d00:	e7db      	b.n	8008cba <_strtod_l+0x312>
 8008d02:	498f      	ldr	r1, [pc, #572]	; (8008f40 <_strtod_l+0x598>)
 8008d04:	a81d      	add	r0, sp, #116	; 0x74
 8008d06:	f001 fe3f 	bl	800a988 <__match>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	f43f aeaa 	beq.w	8008a64 <_strtod_l+0xbc>
 8008d10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d12:	498c      	ldr	r1, [pc, #560]	; (8008f44 <_strtod_l+0x59c>)
 8008d14:	3b01      	subs	r3, #1
 8008d16:	a81d      	add	r0, sp, #116	; 0x74
 8008d18:	931d      	str	r3, [sp, #116]	; 0x74
 8008d1a:	f001 fe35 	bl	800a988 <__match>
 8008d1e:	b910      	cbnz	r0, 8008d26 <_strtod_l+0x37e>
 8008d20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d22:	3301      	adds	r3, #1
 8008d24:	931d      	str	r3, [sp, #116]	; 0x74
 8008d26:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008f54 <_strtod_l+0x5ac>
 8008d2a:	f04f 0a00 	mov.w	sl, #0
 8008d2e:	e67d      	b.n	8008a2c <_strtod_l+0x84>
 8008d30:	4885      	ldr	r0, [pc, #532]	; (8008f48 <_strtod_l+0x5a0>)
 8008d32:	f003 f919 	bl	800bf68 <nan>
 8008d36:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008d3e:	e675      	b.n	8008a2c <_strtod_l+0x84>
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d44:	1af3      	subs	r3, r6, r3
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	bf08      	it	eq
 8008d4a:	462f      	moveq	r7, r5
 8008d4c:	2d10      	cmp	r5, #16
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	46a8      	mov	r8, r5
 8008d52:	bfa8      	it	ge
 8008d54:	f04f 0810 	movge.w	r8, #16
 8008d58:	f7f7 fbf4 	bl	8000544 <__aeabi_ui2d>
 8008d5c:	2d09      	cmp	r5, #9
 8008d5e:	4682      	mov	sl, r0
 8008d60:	468b      	mov	fp, r1
 8008d62:	dd13      	ble.n	8008d8c <_strtod_l+0x3e4>
 8008d64:	4b79      	ldr	r3, [pc, #484]	; (8008f4c <_strtod_l+0x5a4>)
 8008d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d6e:	f7f7 fc63 	bl	8000638 <__aeabi_dmul>
 8008d72:	4682      	mov	sl, r0
 8008d74:	4648      	mov	r0, r9
 8008d76:	468b      	mov	fp, r1
 8008d78:	f7f7 fbe4 	bl	8000544 <__aeabi_ui2d>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4650      	mov	r0, sl
 8008d82:	4659      	mov	r1, fp
 8008d84:	f7f7 faa2 	bl	80002cc <__adddf3>
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	2d0f      	cmp	r5, #15
 8008d8e:	dc38      	bgt.n	8008e02 <_strtod_l+0x45a>
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f43f ae4a 	beq.w	8008a2c <_strtod_l+0x84>
 8008d98:	dd24      	ble.n	8008de4 <_strtod_l+0x43c>
 8008d9a:	2b16      	cmp	r3, #22
 8008d9c:	dc0b      	bgt.n	8008db6 <_strtod_l+0x40e>
 8008d9e:	4d6b      	ldr	r5, [pc, #428]	; (8008f4c <_strtod_l+0x5a4>)
 8008da0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008da4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008da8:	4652      	mov	r2, sl
 8008daa:	465b      	mov	r3, fp
 8008dac:	f7f7 fc44 	bl	8000638 <__aeabi_dmul>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	e63a      	b.n	8008a2c <_strtod_l+0x84>
 8008db6:	9a08      	ldr	r2, [sp, #32]
 8008db8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db20      	blt.n	8008e02 <_strtod_l+0x45a>
 8008dc0:	4c62      	ldr	r4, [pc, #392]	; (8008f4c <_strtod_l+0x5a4>)
 8008dc2:	f1c5 050f 	rsb	r5, r5, #15
 8008dc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dca:	4652      	mov	r2, sl
 8008dcc:	465b      	mov	r3, fp
 8008dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd2:	f7f7 fc31 	bl	8000638 <__aeabi_dmul>
 8008dd6:	9b08      	ldr	r3, [sp, #32]
 8008dd8:	1b5d      	subs	r5, r3, r5
 8008dda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008de2:	e7e3      	b.n	8008dac <_strtod_l+0x404>
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	3316      	adds	r3, #22
 8008de8:	db0b      	blt.n	8008e02 <_strtod_l+0x45a>
 8008dea:	9b07      	ldr	r3, [sp, #28]
 8008dec:	4a57      	ldr	r2, [pc, #348]	; (8008f4c <_strtod_l+0x5a4>)
 8008dee:	1b9e      	subs	r6, r3, r6
 8008df0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008df4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 fd46 	bl	800088c <__aeabi_ddiv>
 8008e00:	e7d6      	b.n	8008db0 <_strtod_l+0x408>
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	eba5 0808 	sub.w	r8, r5, r8
 8008e08:	4498      	add	r8, r3
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	dd71      	ble.n	8008ef4 <_strtod_l+0x54c>
 8008e10:	f018 030f 	ands.w	r3, r8, #15
 8008e14:	d00a      	beq.n	8008e2c <_strtod_l+0x484>
 8008e16:	494d      	ldr	r1, [pc, #308]	; (8008f4c <_strtod_l+0x5a4>)
 8008e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e24:	f7f7 fc08 	bl	8000638 <__aeabi_dmul>
 8008e28:	4682      	mov	sl, r0
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	f038 080f 	bics.w	r8, r8, #15
 8008e30:	d04d      	beq.n	8008ece <_strtod_l+0x526>
 8008e32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e36:	dd22      	ble.n	8008e7e <_strtod_l+0x4d6>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	462e      	mov	r6, r5
 8008e3c:	9509      	str	r5, [sp, #36]	; 0x24
 8008e3e:	9507      	str	r5, [sp, #28]
 8008e40:	2322      	movs	r3, #34	; 0x22
 8008e42:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008f54 <_strtod_l+0x5ac>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	f04f 0a00 	mov.w	sl, #0
 8008e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f43f adec 	beq.w	8008a2c <_strtod_l+0x84>
 8008e54:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008e56:	4620      	mov	r0, r4
 8008e58:	f001 fec4 	bl	800abe4 <_Bfree>
 8008e5c:	9907      	ldr	r1, [sp, #28]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f001 fec0 	bl	800abe4 <_Bfree>
 8008e64:	4631      	mov	r1, r6
 8008e66:	4620      	mov	r0, r4
 8008e68:	f001 febc 	bl	800abe4 <_Bfree>
 8008e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 feb8 	bl	800abe4 <_Bfree>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 feb4 	bl	800abe4 <_Bfree>
 8008e7c:	e5d6      	b.n	8008a2c <_strtod_l+0x84>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e84:	4650      	mov	r0, sl
 8008e86:	4659      	mov	r1, fp
 8008e88:	4699      	mov	r9, r3
 8008e8a:	f1b8 0f01 	cmp.w	r8, #1
 8008e8e:	dc21      	bgt.n	8008ed4 <_strtod_l+0x52c>
 8008e90:	b10b      	cbz	r3, 8008e96 <_strtod_l+0x4ee>
 8008e92:	4682      	mov	sl, r0
 8008e94:	468b      	mov	fp, r1
 8008e96:	4b2e      	ldr	r3, [pc, #184]	; (8008f50 <_strtod_l+0x5a8>)
 8008e98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e9c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ea8:	f7f7 fbc6 	bl	8000638 <__aeabi_dmul>
 8008eac:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <_strtod_l+0x5ac>)
 8008eae:	460a      	mov	r2, r1
 8008eb0:	400b      	ands	r3, r1
 8008eb2:	4929      	ldr	r1, [pc, #164]	; (8008f58 <_strtod_l+0x5b0>)
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	d8be      	bhi.n	8008e38 <_strtod_l+0x490>
 8008eba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ebe:	428b      	cmp	r3, r1
 8008ec0:	bf86      	itte	hi
 8008ec2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008f5c <_strtod_l+0x5b4>
 8008ec6:	f04f 3aff 	movhi.w	sl, #4294967295
 8008eca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	e081      	b.n	8008fd8 <_strtod_l+0x630>
 8008ed4:	f018 0f01 	tst.w	r8, #1
 8008ed8:	d007      	beq.n	8008eea <_strtod_l+0x542>
 8008eda:	4b1d      	ldr	r3, [pc, #116]	; (8008f50 <_strtod_l+0x5a8>)
 8008edc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f7f7 fba8 	bl	8000638 <__aeabi_dmul>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f109 0901 	add.w	r9, r9, #1
 8008eee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ef2:	e7ca      	b.n	8008e8a <_strtod_l+0x4e2>
 8008ef4:	d0eb      	beq.n	8008ece <_strtod_l+0x526>
 8008ef6:	f1c8 0800 	rsb	r8, r8, #0
 8008efa:	f018 020f 	ands.w	r2, r8, #15
 8008efe:	d00a      	beq.n	8008f16 <_strtod_l+0x56e>
 8008f00:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <_strtod_l+0x5a4>)
 8008f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fcbd 	bl	800088c <__aeabi_ddiv>
 8008f12:	4682      	mov	sl, r0
 8008f14:	468b      	mov	fp, r1
 8008f16:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f1a:	d0d8      	beq.n	8008ece <_strtod_l+0x526>
 8008f1c:	f1b8 0f1f 	cmp.w	r8, #31
 8008f20:	dd1e      	ble.n	8008f60 <_strtod_l+0x5b8>
 8008f22:	2500      	movs	r5, #0
 8008f24:	462e      	mov	r6, r5
 8008f26:	9509      	str	r5, [sp, #36]	; 0x24
 8008f28:	9507      	str	r5, [sp, #28]
 8008f2a:	2322      	movs	r3, #34	; 0x22
 8008f2c:	f04f 0a00 	mov.w	sl, #0
 8008f30:	f04f 0b00 	mov.w	fp, #0
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	e789      	b.n	8008e4c <_strtod_l+0x4a4>
 8008f38:	0800cc95 	.word	0x0800cc95
 8008f3c:	0800ccd4 	.word	0x0800ccd4
 8008f40:	0800cc8d 	.word	0x0800cc8d
 8008f44:	0800ce14 	.word	0x0800ce14
 8008f48:	0800d0eb 	.word	0x0800d0eb
 8008f4c:	0800cfb0 	.word	0x0800cfb0
 8008f50:	0800cf88 	.word	0x0800cf88
 8008f54:	7ff00000 	.word	0x7ff00000
 8008f58:	7ca00000 	.word	0x7ca00000
 8008f5c:	7fefffff 	.word	0x7fefffff
 8008f60:	f018 0310 	ands.w	r3, r8, #16
 8008f64:	bf18      	it	ne
 8008f66:	236a      	movne	r3, #106	; 0x6a
 8008f68:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009320 <_strtod_l+0x978>
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	4650      	mov	r0, sl
 8008f70:	4659      	mov	r1, fp
 8008f72:	2300      	movs	r3, #0
 8008f74:	f018 0f01 	tst.w	r8, #1
 8008f78:	d004      	beq.n	8008f84 <_strtod_l+0x5dc>
 8008f7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f7e:	f7f7 fb5b 	bl	8000638 <__aeabi_dmul>
 8008f82:	2301      	movs	r3, #1
 8008f84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f88:	f109 0908 	add.w	r9, r9, #8
 8008f8c:	d1f2      	bne.n	8008f74 <_strtod_l+0x5cc>
 8008f8e:	b10b      	cbz	r3, 8008f94 <_strtod_l+0x5ec>
 8008f90:	4682      	mov	sl, r0
 8008f92:	468b      	mov	fp, r1
 8008f94:	9b04      	ldr	r3, [sp, #16]
 8008f96:	b1bb      	cbz	r3, 8008fc8 <_strtod_l+0x620>
 8008f98:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	4659      	mov	r1, fp
 8008fa4:	dd10      	ble.n	8008fc8 <_strtod_l+0x620>
 8008fa6:	2b1f      	cmp	r3, #31
 8008fa8:	f340 8128 	ble.w	80091fc <_strtod_l+0x854>
 8008fac:	2b34      	cmp	r3, #52	; 0x34
 8008fae:	bfde      	ittt	le
 8008fb0:	3b20      	suble	r3, #32
 8008fb2:	f04f 32ff 	movle.w	r2, #4294967295
 8008fb6:	fa02 f303 	lslle.w	r3, r2, r3
 8008fba:	f04f 0a00 	mov.w	sl, #0
 8008fbe:	bfcc      	ite	gt
 8008fc0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008fc4:	ea03 0b01 	andle.w	fp, r3, r1
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4650      	mov	r0, sl
 8008fce:	4659      	mov	r1, fp
 8008fd0:	f7f7 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1a4      	bne.n	8008f22 <_strtod_l+0x57a>
 8008fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fde:	462b      	mov	r3, r5
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f001 fe6a 	bl	800acbc <__s2b>
 8008fe8:	9009      	str	r0, [sp, #36]	; 0x24
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f43f af24 	beq.w	8008e38 <_strtod_l+0x490>
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	1b9e      	subs	r6, r3, r6
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfb4      	ite	lt
 8008ffa:	4633      	movlt	r3, r6
 8008ffc:	2300      	movge	r3, #0
 8008ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	2500      	movs	r5, #0
 8009004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009008:	9318      	str	r3, [sp, #96]	; 0x60
 800900a:	462e      	mov	r6, r5
 800900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900e:	4620      	mov	r0, r4
 8009010:	6859      	ldr	r1, [r3, #4]
 8009012:	f001 fda7 	bl	800ab64 <_Balloc>
 8009016:	9007      	str	r0, [sp, #28]
 8009018:	2800      	cmp	r0, #0
 800901a:	f43f af11 	beq.w	8008e40 <_strtod_l+0x498>
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	691a      	ldr	r2, [r3, #16]
 8009022:	3202      	adds	r2, #2
 8009024:	f103 010c 	add.w	r1, r3, #12
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	300c      	adds	r0, #12
 800902c:	f001 fd8c 	bl	800ab48 <memcpy>
 8009030:	ec4b ab10 	vmov	d0, sl, fp
 8009034:	aa20      	add	r2, sp, #128	; 0x80
 8009036:	a91f      	add	r1, sp, #124	; 0x7c
 8009038:	4620      	mov	r0, r4
 800903a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800903e:	f002 f979 	bl	800b334 <__d2b>
 8009042:	901e      	str	r0, [sp, #120]	; 0x78
 8009044:	2800      	cmp	r0, #0
 8009046:	f43f aefb 	beq.w	8008e40 <_strtod_l+0x498>
 800904a:	2101      	movs	r1, #1
 800904c:	4620      	mov	r0, r4
 800904e:	f001 fecf 	bl	800adf0 <__i2b>
 8009052:	4606      	mov	r6, r0
 8009054:	2800      	cmp	r0, #0
 8009056:	f43f aef3 	beq.w	8008e40 <_strtod_l+0x498>
 800905a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800905c:	9904      	ldr	r1, [sp, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfab      	itete	ge
 8009062:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009064:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009066:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009068:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800906c:	bfac      	ite	ge
 800906e:	eb03 0902 	addge.w	r9, r3, r2
 8009072:	1ad7      	sublt	r7, r2, r3
 8009074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009076:	eba3 0801 	sub.w	r8, r3, r1
 800907a:	4490      	add	r8, r2
 800907c:	4ba3      	ldr	r3, [pc, #652]	; (800930c <_strtod_l+0x964>)
 800907e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009082:	4598      	cmp	r8, r3
 8009084:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009088:	f280 80cc 	bge.w	8009224 <_strtod_l+0x87c>
 800908c:	eba3 0308 	sub.w	r3, r3, r8
 8009090:	2b1f      	cmp	r3, #31
 8009092:	eba2 0203 	sub.w	r2, r2, r3
 8009096:	f04f 0101 	mov.w	r1, #1
 800909a:	f300 80b6 	bgt.w	800920a <_strtod_l+0x862>
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	9311      	str	r3, [sp, #68]	; 0x44
 80090a4:	2300      	movs	r3, #0
 80090a6:	930c      	str	r3, [sp, #48]	; 0x30
 80090a8:	eb09 0802 	add.w	r8, r9, r2
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	45c1      	cmp	r9, r8
 80090b0:	4417      	add	r7, r2
 80090b2:	441f      	add	r7, r3
 80090b4:	464b      	mov	r3, r9
 80090b6:	bfa8      	it	ge
 80090b8:	4643      	movge	r3, r8
 80090ba:	42bb      	cmp	r3, r7
 80090bc:	bfa8      	it	ge
 80090be:	463b      	movge	r3, r7
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfc2      	ittt	gt
 80090c4:	eba8 0803 	subgt.w	r8, r8, r3
 80090c8:	1aff      	subgt	r7, r7, r3
 80090ca:	eba9 0903 	subgt.w	r9, r9, r3
 80090ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dd17      	ble.n	8009104 <_strtod_l+0x75c>
 80090d4:	4631      	mov	r1, r6
 80090d6:	461a      	mov	r2, r3
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 ff45 	bl	800af68 <__pow5mult>
 80090de:	4606      	mov	r6, r0
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f43f aead 	beq.w	8008e40 <_strtod_l+0x498>
 80090e6:	4601      	mov	r1, r0
 80090e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090ea:	4620      	mov	r0, r4
 80090ec:	f001 fe96 	bl	800ae1c <__multiply>
 80090f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f aea4 	beq.w	8008e40 <_strtod_l+0x498>
 80090f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090fa:	4620      	mov	r0, r4
 80090fc:	f001 fd72 	bl	800abe4 <_Bfree>
 8009100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009102:	931e      	str	r3, [sp, #120]	; 0x78
 8009104:	f1b8 0f00 	cmp.w	r8, #0
 8009108:	f300 8091 	bgt.w	800922e <_strtod_l+0x886>
 800910c:	9b08      	ldr	r3, [sp, #32]
 800910e:	2b00      	cmp	r3, #0
 8009110:	dd08      	ble.n	8009124 <_strtod_l+0x77c>
 8009112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009114:	9907      	ldr	r1, [sp, #28]
 8009116:	4620      	mov	r0, r4
 8009118:	f001 ff26 	bl	800af68 <__pow5mult>
 800911c:	9007      	str	r0, [sp, #28]
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f ae8e 	beq.w	8008e40 <_strtod_l+0x498>
 8009124:	2f00      	cmp	r7, #0
 8009126:	dd08      	ble.n	800913a <_strtod_l+0x792>
 8009128:	9907      	ldr	r1, [sp, #28]
 800912a:	463a      	mov	r2, r7
 800912c:	4620      	mov	r0, r4
 800912e:	f001 ff75 	bl	800b01c <__lshift>
 8009132:	9007      	str	r0, [sp, #28]
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f ae83 	beq.w	8008e40 <_strtod_l+0x498>
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	dd08      	ble.n	8009152 <_strtod_l+0x7aa>
 8009140:	4631      	mov	r1, r6
 8009142:	464a      	mov	r2, r9
 8009144:	4620      	mov	r0, r4
 8009146:	f001 ff69 	bl	800b01c <__lshift>
 800914a:	4606      	mov	r6, r0
 800914c:	2800      	cmp	r0, #0
 800914e:	f43f ae77 	beq.w	8008e40 <_strtod_l+0x498>
 8009152:	9a07      	ldr	r2, [sp, #28]
 8009154:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009156:	4620      	mov	r0, r4
 8009158:	f001 ffe8 	bl	800b12c <__mdiff>
 800915c:	4605      	mov	r5, r0
 800915e:	2800      	cmp	r0, #0
 8009160:	f43f ae6e 	beq.w	8008e40 <_strtod_l+0x498>
 8009164:	68c3      	ldr	r3, [r0, #12]
 8009166:	930f      	str	r3, [sp, #60]	; 0x3c
 8009168:	2300      	movs	r3, #0
 800916a:	60c3      	str	r3, [r0, #12]
 800916c:	4631      	mov	r1, r6
 800916e:	f001 ffc1 	bl	800b0f4 <__mcmp>
 8009172:	2800      	cmp	r0, #0
 8009174:	da65      	bge.n	8009242 <_strtod_l+0x89a>
 8009176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009178:	ea53 030a 	orrs.w	r3, r3, sl
 800917c:	f040 8087 	bne.w	800928e <_strtod_l+0x8e6>
 8009180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009184:	2b00      	cmp	r3, #0
 8009186:	f040 8082 	bne.w	800928e <_strtod_l+0x8e6>
 800918a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800918e:	0d1b      	lsrs	r3, r3, #20
 8009190:	051b      	lsls	r3, r3, #20
 8009192:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009196:	d97a      	bls.n	800928e <_strtod_l+0x8e6>
 8009198:	696b      	ldr	r3, [r5, #20]
 800919a:	b913      	cbnz	r3, 80091a2 <_strtod_l+0x7fa>
 800919c:	692b      	ldr	r3, [r5, #16]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	dd75      	ble.n	800928e <_strtod_l+0x8e6>
 80091a2:	4629      	mov	r1, r5
 80091a4:	2201      	movs	r2, #1
 80091a6:	4620      	mov	r0, r4
 80091a8:	f001 ff38 	bl	800b01c <__lshift>
 80091ac:	4631      	mov	r1, r6
 80091ae:	4605      	mov	r5, r0
 80091b0:	f001 ffa0 	bl	800b0f4 <__mcmp>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	dd6a      	ble.n	800928e <_strtod_l+0x8e6>
 80091b8:	9904      	ldr	r1, [sp, #16]
 80091ba:	4a55      	ldr	r2, [pc, #340]	; (8009310 <_strtod_l+0x968>)
 80091bc:	465b      	mov	r3, fp
 80091be:	2900      	cmp	r1, #0
 80091c0:	f000 8085 	beq.w	80092ce <_strtod_l+0x926>
 80091c4:	ea02 010b 	and.w	r1, r2, fp
 80091c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091cc:	dc7f      	bgt.n	80092ce <_strtod_l+0x926>
 80091ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091d2:	f77f aeaa 	ble.w	8008f2a <_strtod_l+0x582>
 80091d6:	4a4f      	ldr	r2, [pc, #316]	; (8009314 <_strtod_l+0x96c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80091de:	4650      	mov	r0, sl
 80091e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80091e4:	4659      	mov	r1, fp
 80091e6:	f7f7 fa27 	bl	8000638 <__aeabi_dmul>
 80091ea:	460b      	mov	r3, r1
 80091ec:	4303      	orrs	r3, r0
 80091ee:	bf08      	it	eq
 80091f0:	2322      	moveq	r3, #34	; 0x22
 80091f2:	4682      	mov	sl, r0
 80091f4:	468b      	mov	fp, r1
 80091f6:	bf08      	it	eq
 80091f8:	6023      	streq	r3, [r4, #0]
 80091fa:	e62b      	b.n	8008e54 <_strtod_l+0x4ac>
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	ea03 0a0a 	and.w	sl, r3, sl
 8009208:	e6de      	b.n	8008fc8 <_strtod_l+0x620>
 800920a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800920e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800921a:	fa01 f308 	lsl.w	r3, r1, r8
 800921e:	930c      	str	r3, [sp, #48]	; 0x30
 8009220:	9111      	str	r1, [sp, #68]	; 0x44
 8009222:	e741      	b.n	80090a8 <_strtod_l+0x700>
 8009224:	2300      	movs	r3, #0
 8009226:	930c      	str	r3, [sp, #48]	; 0x30
 8009228:	2301      	movs	r3, #1
 800922a:	9311      	str	r3, [sp, #68]	; 0x44
 800922c:	e73c      	b.n	80090a8 <_strtod_l+0x700>
 800922e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009230:	4642      	mov	r2, r8
 8009232:	4620      	mov	r0, r4
 8009234:	f001 fef2 	bl	800b01c <__lshift>
 8009238:	901e      	str	r0, [sp, #120]	; 0x78
 800923a:	2800      	cmp	r0, #0
 800923c:	f47f af66 	bne.w	800910c <_strtod_l+0x764>
 8009240:	e5fe      	b.n	8008e40 <_strtod_l+0x498>
 8009242:	465f      	mov	r7, fp
 8009244:	d16e      	bne.n	8009324 <_strtod_l+0x97c>
 8009246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800924c:	b342      	cbz	r2, 80092a0 <_strtod_l+0x8f8>
 800924e:	4a32      	ldr	r2, [pc, #200]	; (8009318 <_strtod_l+0x970>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d128      	bne.n	80092a6 <_strtod_l+0x8fe>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	4650      	mov	r0, sl
 8009258:	b1eb      	cbz	r3, 8009296 <_strtod_l+0x8ee>
 800925a:	4a2d      	ldr	r2, [pc, #180]	; (8009310 <_strtod_l+0x968>)
 800925c:	403a      	ands	r2, r7
 800925e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009262:	f04f 31ff 	mov.w	r1, #4294967295
 8009266:	d819      	bhi.n	800929c <_strtod_l+0x8f4>
 8009268:	0d12      	lsrs	r2, r2, #20
 800926a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800926e:	fa01 f303 	lsl.w	r3, r1, r3
 8009272:	4298      	cmp	r0, r3
 8009274:	d117      	bne.n	80092a6 <_strtod_l+0x8fe>
 8009276:	4b29      	ldr	r3, [pc, #164]	; (800931c <_strtod_l+0x974>)
 8009278:	429f      	cmp	r7, r3
 800927a:	d102      	bne.n	8009282 <_strtod_l+0x8da>
 800927c:	3001      	adds	r0, #1
 800927e:	f43f addf 	beq.w	8008e40 <_strtod_l+0x498>
 8009282:	4b23      	ldr	r3, [pc, #140]	; (8009310 <_strtod_l+0x968>)
 8009284:	403b      	ands	r3, r7
 8009286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1a0      	bne.n	80091d6 <_strtod_l+0x82e>
 8009294:	e5de      	b.n	8008e54 <_strtod_l+0x4ac>
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	e7ea      	b.n	8009272 <_strtod_l+0x8ca>
 800929c:	460b      	mov	r3, r1
 800929e:	e7e8      	b.n	8009272 <_strtod_l+0x8ca>
 80092a0:	ea53 030a 	orrs.w	r3, r3, sl
 80092a4:	d088      	beq.n	80091b8 <_strtod_l+0x810>
 80092a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a8:	b1db      	cbz	r3, 80092e2 <_strtod_l+0x93a>
 80092aa:	423b      	tst	r3, r7
 80092ac:	d0ef      	beq.n	800928e <_strtod_l+0x8e6>
 80092ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b0:	9a04      	ldr	r2, [sp, #16]
 80092b2:	4650      	mov	r0, sl
 80092b4:	4659      	mov	r1, fp
 80092b6:	b1c3      	cbz	r3, 80092ea <_strtod_l+0x942>
 80092b8:	f7ff fb59 	bl	800896e <sulp>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c4:	f7f7 f802 	bl	80002cc <__adddf3>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	e7df      	b.n	800928e <_strtod_l+0x8e6>
 80092ce:	4013      	ands	r3, r2
 80092d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092dc:	f04f 3aff 	mov.w	sl, #4294967295
 80092e0:	e7d5      	b.n	800928e <_strtod_l+0x8e6>
 80092e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092e4:	ea13 0f0a 	tst.w	r3, sl
 80092e8:	e7e0      	b.n	80092ac <_strtod_l+0x904>
 80092ea:	f7ff fb40 	bl	800896e <sulp>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092f6:	f7f6 ffe7 	bl	80002c8 <__aeabi_dsub>
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4682      	mov	sl, r0
 8009300:	468b      	mov	fp, r1
 8009302:	f7f7 fc01 	bl	8000b08 <__aeabi_dcmpeq>
 8009306:	2800      	cmp	r0, #0
 8009308:	d0c1      	beq.n	800928e <_strtod_l+0x8e6>
 800930a:	e60e      	b.n	8008f2a <_strtod_l+0x582>
 800930c:	fffffc02 	.word	0xfffffc02
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	39500000 	.word	0x39500000
 8009318:	000fffff 	.word	0x000fffff
 800931c:	7fefffff 	.word	0x7fefffff
 8009320:	0800cce8 	.word	0x0800cce8
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	f002 f860 	bl	800b3ec <__ratio>
 800932c:	ec59 8b10 	vmov	r8, r9, d0
 8009330:	ee10 0a10 	vmov	r0, s0
 8009334:	2200      	movs	r2, #0
 8009336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800933a:	4649      	mov	r1, r9
 800933c:	f7f7 fbf8 	bl	8000b30 <__aeabi_dcmple>
 8009340:	2800      	cmp	r0, #0
 8009342:	d07c      	beq.n	800943e <_strtod_l+0xa96>
 8009344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d04c      	beq.n	80093e4 <_strtod_l+0xa3c>
 800934a:	4b95      	ldr	r3, [pc, #596]	; (80095a0 <_strtod_l+0xbf8>)
 800934c:	2200      	movs	r2, #0
 800934e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095a0 <_strtod_l+0xbf8>
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	4b92      	ldr	r3, [pc, #584]	; (80095a4 <_strtod_l+0xbfc>)
 800935c:	403b      	ands	r3, r7
 800935e:	9311      	str	r3, [sp, #68]	; 0x44
 8009360:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009362:	4b91      	ldr	r3, [pc, #580]	; (80095a8 <_strtod_l+0xc00>)
 8009364:	429a      	cmp	r2, r3
 8009366:	f040 80b2 	bne.w	80094ce <_strtod_l+0xb26>
 800936a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800936e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009372:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009376:	ec4b ab10 	vmov	d0, sl, fp
 800937a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800937e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009382:	f001 ff5b 	bl	800b23c <__ulp>
 8009386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800938a:	ec53 2b10 	vmov	r2, r3, d0
 800938e:	f7f7 f953 	bl	8000638 <__aeabi_dmul>
 8009392:	4652      	mov	r2, sl
 8009394:	465b      	mov	r3, fp
 8009396:	f7f6 ff99 	bl	80002cc <__adddf3>
 800939a:	460b      	mov	r3, r1
 800939c:	4981      	ldr	r1, [pc, #516]	; (80095a4 <_strtod_l+0xbfc>)
 800939e:	4a83      	ldr	r2, [pc, #524]	; (80095ac <_strtod_l+0xc04>)
 80093a0:	4019      	ands	r1, r3
 80093a2:	4291      	cmp	r1, r2
 80093a4:	4682      	mov	sl, r0
 80093a6:	d95e      	bls.n	8009466 <_strtod_l+0xabe>
 80093a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d103      	bne.n	80093ba <_strtod_l+0xa12>
 80093b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b4:	3301      	adds	r3, #1
 80093b6:	f43f ad43 	beq.w	8008e40 <_strtod_l+0x498>
 80093ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80095b8 <_strtod_l+0xc10>
 80093be:	f04f 3aff 	mov.w	sl, #4294967295
 80093c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093c4:	4620      	mov	r0, r4
 80093c6:	f001 fc0d 	bl	800abe4 <_Bfree>
 80093ca:	9907      	ldr	r1, [sp, #28]
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 fc09 	bl	800abe4 <_Bfree>
 80093d2:	4631      	mov	r1, r6
 80093d4:	4620      	mov	r0, r4
 80093d6:	f001 fc05 	bl	800abe4 <_Bfree>
 80093da:	4629      	mov	r1, r5
 80093dc:	4620      	mov	r0, r4
 80093de:	f001 fc01 	bl	800abe4 <_Bfree>
 80093e2:	e613      	b.n	800900c <_strtod_l+0x664>
 80093e4:	f1ba 0f00 	cmp.w	sl, #0
 80093e8:	d11b      	bne.n	8009422 <_strtod_l+0xa7a>
 80093ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ee:	b9f3      	cbnz	r3, 800942e <_strtod_l+0xa86>
 80093f0:	4b6b      	ldr	r3, [pc, #428]	; (80095a0 <_strtod_l+0xbf8>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	4640      	mov	r0, r8
 80093f6:	4649      	mov	r1, r9
 80093f8:	f7f7 fb90 	bl	8000b1c <__aeabi_dcmplt>
 80093fc:	b9d0      	cbnz	r0, 8009434 <_strtod_l+0xa8c>
 80093fe:	4640      	mov	r0, r8
 8009400:	4649      	mov	r1, r9
 8009402:	4b6b      	ldr	r3, [pc, #428]	; (80095b0 <_strtod_l+0xc08>)
 8009404:	2200      	movs	r2, #0
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	4680      	mov	r8, r0
 800940c:	4689      	mov	r9, r1
 800940e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009412:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009416:	931b      	str	r3, [sp, #108]	; 0x6c
 8009418:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800941c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009420:	e79b      	b.n	800935a <_strtod_l+0x9b2>
 8009422:	f1ba 0f01 	cmp.w	sl, #1
 8009426:	d102      	bne.n	800942e <_strtod_l+0xa86>
 8009428:	2f00      	cmp	r7, #0
 800942a:	f43f ad7e 	beq.w	8008f2a <_strtod_l+0x582>
 800942e:	4b61      	ldr	r3, [pc, #388]	; (80095b4 <_strtod_l+0xc0c>)
 8009430:	2200      	movs	r2, #0
 8009432:	e78c      	b.n	800934e <_strtod_l+0x9a6>
 8009434:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80095b0 <_strtod_l+0xc08>
 8009438:	f04f 0800 	mov.w	r8, #0
 800943c:	e7e7      	b.n	800940e <_strtod_l+0xa66>
 800943e:	4b5c      	ldr	r3, [pc, #368]	; (80095b0 <_strtod_l+0xc08>)
 8009440:	4640      	mov	r0, r8
 8009442:	4649      	mov	r1, r9
 8009444:	2200      	movs	r2, #0
 8009446:	f7f7 f8f7 	bl	8000638 <__aeabi_dmul>
 800944a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	b933      	cbnz	r3, 8009460 <_strtod_l+0xab8>
 8009452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009456:	9012      	str	r0, [sp, #72]	; 0x48
 8009458:	9313      	str	r3, [sp, #76]	; 0x4c
 800945a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800945e:	e7dd      	b.n	800941c <_strtod_l+0xa74>
 8009460:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009464:	e7f9      	b.n	800945a <_strtod_l+0xab2>
 8009466:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1a8      	bne.n	80093c2 <_strtod_l+0xa1a>
 8009470:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009476:	0d1b      	lsrs	r3, r3, #20
 8009478:	051b      	lsls	r3, r3, #20
 800947a:	429a      	cmp	r2, r3
 800947c:	d1a1      	bne.n	80093c2 <_strtod_l+0xa1a>
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 fc89 	bl	8000d98 <__aeabi_d2lz>
 8009486:	f7f7 f8a9 	bl	80005dc <__aeabi_l2d>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f6 ff19 	bl	80002c8 <__aeabi_dsub>
 8009496:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800949c:	ea43 030a 	orr.w	r3, r3, sl
 80094a0:	4313      	orrs	r3, r2
 80094a2:	4680      	mov	r8, r0
 80094a4:	4689      	mov	r9, r1
 80094a6:	d053      	beq.n	8009550 <_strtod_l+0xba8>
 80094a8:	a335      	add	r3, pc, #212	; (adr r3, 8009580 <_strtod_l+0xbd8>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f7 fb35 	bl	8000b1c <__aeabi_dcmplt>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f47f acce 	bne.w	8008e54 <_strtod_l+0x4ac>
 80094b8:	a333      	add	r3, pc, #204	; (adr r3, 8009588 <_strtod_l+0xbe0>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	4640      	mov	r0, r8
 80094c0:	4649      	mov	r1, r9
 80094c2:	f7f7 fb49 	bl	8000b58 <__aeabi_dcmpgt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f43f af7b 	beq.w	80093c2 <_strtod_l+0xa1a>
 80094cc:	e4c2      	b.n	8008e54 <_strtod_l+0x4ac>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	b333      	cbz	r3, 8009520 <_strtod_l+0xb78>
 80094d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094d8:	d822      	bhi.n	8009520 <_strtod_l+0xb78>
 80094da:	a32d      	add	r3, pc, #180	; (adr r3, 8009590 <_strtod_l+0xbe8>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	4640      	mov	r0, r8
 80094e2:	4649      	mov	r1, r9
 80094e4:	f7f7 fb24 	bl	8000b30 <__aeabi_dcmple>
 80094e8:	b1a0      	cbz	r0, 8009514 <_strtod_l+0xb6c>
 80094ea:	4649      	mov	r1, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7f7 fb7b 	bl	8000be8 <__aeabi_d2uiz>
 80094f2:	2801      	cmp	r0, #1
 80094f4:	bf38      	it	cc
 80094f6:	2001      	movcc	r0, #1
 80094f8:	f7f7 f824 	bl	8000544 <__aeabi_ui2d>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094fe:	4680      	mov	r8, r0
 8009500:	4689      	mov	r9, r1
 8009502:	bb13      	cbnz	r3, 800954a <_strtod_l+0xba2>
 8009504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009508:	9014      	str	r0, [sp, #80]	; 0x50
 800950a:	9315      	str	r3, [sp, #84]	; 0x54
 800950c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009510:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009516:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009518:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	930d      	str	r3, [sp, #52]	; 0x34
 8009520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009524:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800952c:	f001 fe86 	bl	800b23c <__ulp>
 8009530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009534:	ec53 2b10 	vmov	r2, r3, d0
 8009538:	f7f7 f87e 	bl	8000638 <__aeabi_dmul>
 800953c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009540:	f7f6 fec4 	bl	80002cc <__adddf3>
 8009544:	4682      	mov	sl, r0
 8009546:	468b      	mov	fp, r1
 8009548:	e78f      	b.n	800946a <_strtod_l+0xac2>
 800954a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800954e:	e7dd      	b.n	800950c <_strtod_l+0xb64>
 8009550:	a311      	add	r3, pc, #68	; (adr r3, 8009598 <_strtod_l+0xbf0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f7 fae1 	bl	8000b1c <__aeabi_dcmplt>
 800955a:	e7b4      	b.n	80094c6 <_strtod_l+0xb1e>
 800955c:	2300      	movs	r3, #0
 800955e:	930e      	str	r3, [sp, #56]	; 0x38
 8009560:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	f7ff ba65 	b.w	8008a34 <_strtod_l+0x8c>
 800956a:	2b65      	cmp	r3, #101	; 0x65
 800956c:	f43f ab5d 	beq.w	8008c2a <_strtod_l+0x282>
 8009570:	2b45      	cmp	r3, #69	; 0x45
 8009572:	f43f ab5a 	beq.w	8008c2a <_strtod_l+0x282>
 8009576:	2201      	movs	r2, #1
 8009578:	f7ff bb92 	b.w	8008ca0 <_strtod_l+0x2f8>
 800957c:	f3af 8000 	nop.w
 8009580:	94a03595 	.word	0x94a03595
 8009584:	3fdfffff 	.word	0x3fdfffff
 8009588:	35afe535 	.word	0x35afe535
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	ffc00000 	.word	0xffc00000
 8009594:	41dfffff 	.word	0x41dfffff
 8009598:	94a03595 	.word	0x94a03595
 800959c:	3fcfffff 	.word	0x3fcfffff
 80095a0:	3ff00000 	.word	0x3ff00000
 80095a4:	7ff00000 	.word	0x7ff00000
 80095a8:	7fe00000 	.word	0x7fe00000
 80095ac:	7c9fffff 	.word	0x7c9fffff
 80095b0:	3fe00000 	.word	0x3fe00000
 80095b4:	bff00000 	.word	0xbff00000
 80095b8:	7fefffff 	.word	0x7fefffff

080095bc <_strtod_r>:
 80095bc:	4b01      	ldr	r3, [pc, #4]	; (80095c4 <_strtod_r+0x8>)
 80095be:	f7ff b9f3 	b.w	80089a8 <_strtod_l>
 80095c2:	bf00      	nop
 80095c4:	20000090 	.word	0x20000090

080095c8 <_strtol_l.isra.0>:
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ce:	d001      	beq.n	80095d4 <_strtol_l.isra.0+0xc>
 80095d0:	2b24      	cmp	r3, #36	; 0x24
 80095d2:	d906      	bls.n	80095e2 <_strtol_l.isra.0+0x1a>
 80095d4:	f7fe fa88 	bl	8007ae8 <__errno>
 80095d8:	2316      	movs	r3, #22
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	2000      	movs	r0, #0
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	4f3a      	ldr	r7, [pc, #232]	; (80096cc <_strtol_l.isra.0+0x104>)
 80095e4:	468e      	mov	lr, r1
 80095e6:	4676      	mov	r6, lr
 80095e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80095ec:	5de5      	ldrb	r5, [r4, r7]
 80095ee:	f015 0508 	ands.w	r5, r5, #8
 80095f2:	d1f8      	bne.n	80095e6 <_strtol_l.isra.0+0x1e>
 80095f4:	2c2d      	cmp	r4, #45	; 0x2d
 80095f6:	d134      	bne.n	8009662 <_strtol_l.isra.0+0x9a>
 80095f8:	f89e 4000 	ldrb.w	r4, [lr]
 80095fc:	f04f 0801 	mov.w	r8, #1
 8009600:	f106 0e02 	add.w	lr, r6, #2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d05c      	beq.n	80096c2 <_strtol_l.isra.0+0xfa>
 8009608:	2b10      	cmp	r3, #16
 800960a:	d10c      	bne.n	8009626 <_strtol_l.isra.0+0x5e>
 800960c:	2c30      	cmp	r4, #48	; 0x30
 800960e:	d10a      	bne.n	8009626 <_strtol_l.isra.0+0x5e>
 8009610:	f89e 4000 	ldrb.w	r4, [lr]
 8009614:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009618:	2c58      	cmp	r4, #88	; 0x58
 800961a:	d14d      	bne.n	80096b8 <_strtol_l.isra.0+0xf0>
 800961c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009620:	2310      	movs	r3, #16
 8009622:	f10e 0e02 	add.w	lr, lr, #2
 8009626:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800962a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800962e:	2600      	movs	r6, #0
 8009630:	fbbc f9f3 	udiv	r9, ip, r3
 8009634:	4635      	mov	r5, r6
 8009636:	fb03 ca19 	mls	sl, r3, r9, ip
 800963a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800963e:	2f09      	cmp	r7, #9
 8009640:	d818      	bhi.n	8009674 <_strtol_l.isra.0+0xac>
 8009642:	463c      	mov	r4, r7
 8009644:	42a3      	cmp	r3, r4
 8009646:	dd24      	ble.n	8009692 <_strtol_l.isra.0+0xca>
 8009648:	2e00      	cmp	r6, #0
 800964a:	db1f      	blt.n	800968c <_strtol_l.isra.0+0xc4>
 800964c:	45a9      	cmp	r9, r5
 800964e:	d31d      	bcc.n	800968c <_strtol_l.isra.0+0xc4>
 8009650:	d101      	bne.n	8009656 <_strtol_l.isra.0+0x8e>
 8009652:	45a2      	cmp	sl, r4
 8009654:	db1a      	blt.n	800968c <_strtol_l.isra.0+0xc4>
 8009656:	fb05 4503 	mla	r5, r5, r3, r4
 800965a:	2601      	movs	r6, #1
 800965c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009660:	e7eb      	b.n	800963a <_strtol_l.isra.0+0x72>
 8009662:	2c2b      	cmp	r4, #43	; 0x2b
 8009664:	bf08      	it	eq
 8009666:	f89e 4000 	ldrbeq.w	r4, [lr]
 800966a:	46a8      	mov	r8, r5
 800966c:	bf08      	it	eq
 800966e:	f106 0e02 	addeq.w	lr, r6, #2
 8009672:	e7c7      	b.n	8009604 <_strtol_l.isra.0+0x3c>
 8009674:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009678:	2f19      	cmp	r7, #25
 800967a:	d801      	bhi.n	8009680 <_strtol_l.isra.0+0xb8>
 800967c:	3c37      	subs	r4, #55	; 0x37
 800967e:	e7e1      	b.n	8009644 <_strtol_l.isra.0+0x7c>
 8009680:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009684:	2f19      	cmp	r7, #25
 8009686:	d804      	bhi.n	8009692 <_strtol_l.isra.0+0xca>
 8009688:	3c57      	subs	r4, #87	; 0x57
 800968a:	e7db      	b.n	8009644 <_strtol_l.isra.0+0x7c>
 800968c:	f04f 36ff 	mov.w	r6, #4294967295
 8009690:	e7e4      	b.n	800965c <_strtol_l.isra.0+0x94>
 8009692:	2e00      	cmp	r6, #0
 8009694:	da05      	bge.n	80096a2 <_strtol_l.isra.0+0xda>
 8009696:	2322      	movs	r3, #34	; 0x22
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	4665      	mov	r5, ip
 800969c:	b942      	cbnz	r2, 80096b0 <_strtol_l.isra.0+0xe8>
 800969e:	4628      	mov	r0, r5
 80096a0:	e79d      	b.n	80095de <_strtol_l.isra.0+0x16>
 80096a2:	f1b8 0f00 	cmp.w	r8, #0
 80096a6:	d000      	beq.n	80096aa <_strtol_l.isra.0+0xe2>
 80096a8:	426d      	negs	r5, r5
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d0f7      	beq.n	800969e <_strtol_l.isra.0+0xd6>
 80096ae:	b10e      	cbz	r6, 80096b4 <_strtol_l.isra.0+0xec>
 80096b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	e7f2      	b.n	800969e <_strtol_l.isra.0+0xd6>
 80096b8:	2430      	movs	r4, #48	; 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1b3      	bne.n	8009626 <_strtol_l.isra.0+0x5e>
 80096be:	2308      	movs	r3, #8
 80096c0:	e7b1      	b.n	8009626 <_strtol_l.isra.0+0x5e>
 80096c2:	2c30      	cmp	r4, #48	; 0x30
 80096c4:	d0a4      	beq.n	8009610 <_strtol_l.isra.0+0x48>
 80096c6:	230a      	movs	r3, #10
 80096c8:	e7ad      	b.n	8009626 <_strtol_l.isra.0+0x5e>
 80096ca:	bf00      	nop
 80096cc:	0800cd11 	.word	0x0800cd11

080096d0 <_strtol_r>:
 80096d0:	f7ff bf7a 	b.w	80095c8 <_strtol_l.isra.0>

080096d4 <_write_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_write_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f9 f8f7 	bl	80028d6 <_write>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_write_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_write_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20000820 	.word	0x20000820

080096f8 <_close_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_close_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f9 f903 	bl	800290e <_close>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_close_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_close_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20000820 	.word	0x20000820

08009718 <quorem>:
 8009718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	6903      	ldr	r3, [r0, #16]
 800971e:	690c      	ldr	r4, [r1, #16]
 8009720:	42a3      	cmp	r3, r4
 8009722:	4607      	mov	r7, r0
 8009724:	f2c0 8081 	blt.w	800982a <quorem+0x112>
 8009728:	3c01      	subs	r4, #1
 800972a:	f101 0814 	add.w	r8, r1, #20
 800972e:	f100 0514 	add.w	r5, r0, #20
 8009732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800973c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009740:	3301      	adds	r3, #1
 8009742:	429a      	cmp	r2, r3
 8009744:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800974c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009750:	d331      	bcc.n	80097b6 <quorem+0x9e>
 8009752:	f04f 0e00 	mov.w	lr, #0
 8009756:	4640      	mov	r0, r8
 8009758:	46ac      	mov	ip, r5
 800975a:	46f2      	mov	sl, lr
 800975c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009760:	b293      	uxth	r3, r2
 8009762:	fb06 e303 	mla	r3, r6, r3, lr
 8009766:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ebaa 0303 	sub.w	r3, sl, r3
 8009770:	0c12      	lsrs	r2, r2, #16
 8009772:	f8dc a000 	ldr.w	sl, [ip]
 8009776:	fb06 e202 	mla	r2, r6, r2, lr
 800977a:	fa13 f38a 	uxtah	r3, r3, sl
 800977e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009782:	fa1f fa82 	uxth.w	sl, r2
 8009786:	f8dc 2000 	ldr.w	r2, [ip]
 800978a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800978e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009792:	b29b      	uxth	r3, r3
 8009794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009798:	4581      	cmp	r9, r0
 800979a:	f84c 3b04 	str.w	r3, [ip], #4
 800979e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097a2:	d2db      	bcs.n	800975c <quorem+0x44>
 80097a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80097a8:	b92b      	cbnz	r3, 80097b6 <quorem+0x9e>
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	3b04      	subs	r3, #4
 80097ae:	429d      	cmp	r5, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	d32e      	bcc.n	8009812 <quorem+0xfa>
 80097b4:	613c      	str	r4, [r7, #16]
 80097b6:	4638      	mov	r0, r7
 80097b8:	f001 fc9c 	bl	800b0f4 <__mcmp>
 80097bc:	2800      	cmp	r0, #0
 80097be:	db24      	blt.n	800980a <quorem+0xf2>
 80097c0:	3601      	adds	r6, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097cc:	f8d0 e000 	ldr.w	lr, [r0]
 80097d0:	b293      	uxth	r3, r2
 80097d2:	ebac 0303 	sub.w	r3, ip, r3
 80097d6:	0c12      	lsrs	r2, r2, #16
 80097d8:	fa13 f38e 	uxtah	r3, r3, lr
 80097dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ea:	45c1      	cmp	r9, r8
 80097ec:	f840 3b04 	str.w	r3, [r0], #4
 80097f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097f4:	d2e8      	bcs.n	80097c8 <quorem+0xb0>
 80097f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fe:	b922      	cbnz	r2, 800980a <quorem+0xf2>
 8009800:	3b04      	subs	r3, #4
 8009802:	429d      	cmp	r5, r3
 8009804:	461a      	mov	r2, r3
 8009806:	d30a      	bcc.n	800981e <quorem+0x106>
 8009808:	613c      	str	r4, [r7, #16]
 800980a:	4630      	mov	r0, r6
 800980c:	b003      	add	sp, #12
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009812:	6812      	ldr	r2, [r2, #0]
 8009814:	3b04      	subs	r3, #4
 8009816:	2a00      	cmp	r2, #0
 8009818:	d1cc      	bne.n	80097b4 <quorem+0x9c>
 800981a:	3c01      	subs	r4, #1
 800981c:	e7c7      	b.n	80097ae <quorem+0x96>
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	3b04      	subs	r3, #4
 8009822:	2a00      	cmp	r2, #0
 8009824:	d1f0      	bne.n	8009808 <quorem+0xf0>
 8009826:	3c01      	subs	r4, #1
 8009828:	e7eb      	b.n	8009802 <quorem+0xea>
 800982a:	2000      	movs	r0, #0
 800982c:	e7ee      	b.n	800980c <quorem+0xf4>
	...

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b02 	vpush	{d8}
 8009838:	ec57 6b10 	vmov	r6, r7, d0
 800983c:	b095      	sub	sp, #84	; 0x54
 800983e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009844:	9105      	str	r1, [sp, #20]
 8009846:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800984a:	4604      	mov	r4, r0
 800984c:	9209      	str	r2, [sp, #36]	; 0x24
 800984e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009850:	b975      	cbnz	r5, 8009870 <_dtoa_r+0x40>
 8009852:	2010      	movs	r0, #16
 8009854:	f001 f95e 	bl	800ab14 <malloc>
 8009858:	4602      	mov	r2, r0
 800985a:	6260      	str	r0, [r4, #36]	; 0x24
 800985c:	b920      	cbnz	r0, 8009868 <_dtoa_r+0x38>
 800985e:	4bb2      	ldr	r3, [pc, #712]	; (8009b28 <_dtoa_r+0x2f8>)
 8009860:	21ea      	movs	r1, #234	; 0xea
 8009862:	48b2      	ldr	r0, [pc, #712]	; (8009b2c <_dtoa_r+0x2fc>)
 8009864:	f002 fcaa 	bl	800c1bc <__assert_func>
 8009868:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800986c:	6005      	str	r5, [r0, #0]
 800986e:	60c5      	str	r5, [r0, #12]
 8009870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	b151      	cbz	r1, 800988c <_dtoa_r+0x5c>
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	604a      	str	r2, [r1, #4]
 800987a:	2301      	movs	r3, #1
 800987c:	4093      	lsls	r3, r2
 800987e:	608b      	str	r3, [r1, #8]
 8009880:	4620      	mov	r0, r4
 8009882:	f001 f9af 	bl	800abe4 <_Bfree>
 8009886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	1e3b      	subs	r3, r7, #0
 800988e:	bfb9      	ittee	lt
 8009890:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009894:	9303      	strlt	r3, [sp, #12]
 8009896:	2300      	movge	r3, #0
 8009898:	f8c8 3000 	strge.w	r3, [r8]
 800989c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80098a0:	4ba3      	ldr	r3, [pc, #652]	; (8009b30 <_dtoa_r+0x300>)
 80098a2:	bfbc      	itt	lt
 80098a4:	2201      	movlt	r2, #1
 80098a6:	f8c8 2000 	strlt.w	r2, [r8]
 80098aa:	ea33 0309 	bics.w	r3, r3, r9
 80098ae:	d11b      	bne.n	80098e8 <_dtoa_r+0xb8>
 80098b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098bc:	4333      	orrs	r3, r6
 80098be:	f000 857a 	beq.w	800a3b6 <_dtoa_r+0xb86>
 80098c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c4:	b963      	cbnz	r3, 80098e0 <_dtoa_r+0xb0>
 80098c6:	4b9b      	ldr	r3, [pc, #620]	; (8009b34 <_dtoa_r+0x304>)
 80098c8:	e024      	b.n	8009914 <_dtoa_r+0xe4>
 80098ca:	4b9b      	ldr	r3, [pc, #620]	; (8009b38 <_dtoa_r+0x308>)
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	3308      	adds	r3, #8
 80098d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	9800      	ldr	r0, [sp, #0]
 80098d6:	b015      	add	sp, #84	; 0x54
 80098d8:	ecbd 8b02 	vpop	{d8}
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	4b94      	ldr	r3, [pc, #592]	; (8009b34 <_dtoa_r+0x304>)
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	3303      	adds	r3, #3
 80098e6:	e7f3      	b.n	80098d0 <_dtoa_r+0xa0>
 80098e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098ec:	2200      	movs	r2, #0
 80098ee:	ec51 0b17 	vmov	r0, r1, d7
 80098f2:	2300      	movs	r3, #0
 80098f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098f8:	f7f7 f906 	bl	8000b08 <__aeabi_dcmpeq>
 80098fc:	4680      	mov	r8, r0
 80098fe:	b158      	cbz	r0, 8009918 <_dtoa_r+0xe8>
 8009900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009902:	2301      	movs	r3, #1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8551 	beq.w	800a3b0 <_dtoa_r+0xb80>
 800990e:	488b      	ldr	r0, [pc, #556]	; (8009b3c <_dtoa_r+0x30c>)
 8009910:	6018      	str	r0, [r3, #0]
 8009912:	1e43      	subs	r3, r0, #1
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	e7dd      	b.n	80098d4 <_dtoa_r+0xa4>
 8009918:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800991c:	aa12      	add	r2, sp, #72	; 0x48
 800991e:	a913      	add	r1, sp, #76	; 0x4c
 8009920:	4620      	mov	r0, r4
 8009922:	f001 fd07 	bl	800b334 <__d2b>
 8009926:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800992a:	4683      	mov	fp, r0
 800992c:	2d00      	cmp	r5, #0
 800992e:	d07c      	beq.n	8009a2a <_dtoa_r+0x1fa>
 8009930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009932:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800993a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800993e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800994a:	4b7d      	ldr	r3, [pc, #500]	; (8009b40 <_dtoa_r+0x310>)
 800994c:	2200      	movs	r2, #0
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f6 fcb9 	bl	80002c8 <__aeabi_dsub>
 8009956:	a36e      	add	r3, pc, #440	; (adr r3, 8009b10 <_dtoa_r+0x2e0>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fe6c 	bl	8000638 <__aeabi_dmul>
 8009960:	a36d      	add	r3, pc, #436	; (adr r3, 8009b18 <_dtoa_r+0x2e8>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fcb1 	bl	80002cc <__adddf3>
 800996a:	4606      	mov	r6, r0
 800996c:	4628      	mov	r0, r5
 800996e:	460f      	mov	r7, r1
 8009970:	f7f6 fdf8 	bl	8000564 <__aeabi_i2d>
 8009974:	a36a      	add	r3, pc, #424	; (adr r3, 8009b20 <_dtoa_r+0x2f0>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	f7f6 fe5d 	bl	8000638 <__aeabi_dmul>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fca1 	bl	80002cc <__adddf3>
 800998a:	4606      	mov	r6, r0
 800998c:	460f      	mov	r7, r1
 800998e:	f7f7 f903 	bl	8000b98 <__aeabi_d2iz>
 8009992:	2200      	movs	r2, #0
 8009994:	4682      	mov	sl, r0
 8009996:	2300      	movs	r3, #0
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f7 f8be 	bl	8000b1c <__aeabi_dcmplt>
 80099a0:	b148      	cbz	r0, 80099b6 <_dtoa_r+0x186>
 80099a2:	4650      	mov	r0, sl
 80099a4:	f7f6 fdde 	bl	8000564 <__aeabi_i2d>
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	f7f7 f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 80099b0:	b908      	cbnz	r0, 80099b6 <_dtoa_r+0x186>
 80099b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099b6:	f1ba 0f16 	cmp.w	sl, #22
 80099ba:	d854      	bhi.n	8009a66 <_dtoa_r+0x236>
 80099bc:	4b61      	ldr	r3, [pc, #388]	; (8009b44 <_dtoa_r+0x314>)
 80099be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099ca:	f7f7 f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d04b      	beq.n	8009a6a <_dtoa_r+0x23a>
 80099d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d6:	2300      	movs	r3, #0
 80099d8:	930e      	str	r3, [sp, #56]	; 0x38
 80099da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099dc:	1b5d      	subs	r5, r3, r5
 80099de:	1e6b      	subs	r3, r5, #1
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	bf43      	ittte	mi
 80099e4:	2300      	movmi	r3, #0
 80099e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80099ea:	9304      	strmi	r3, [sp, #16]
 80099ec:	f04f 0800 	movpl.w	r8, #0
 80099f0:	f1ba 0f00 	cmp.w	sl, #0
 80099f4:	db3b      	blt.n	8009a6e <_dtoa_r+0x23e>
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099fc:	4453      	add	r3, sl
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	2300      	movs	r3, #0
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	9b05      	ldr	r3, [sp, #20]
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d869      	bhi.n	8009ade <_dtoa_r+0x2ae>
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	bfc4      	itt	gt
 8009a0e:	3b04      	subgt	r3, #4
 8009a10:	9305      	strgt	r3, [sp, #20]
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	f1a3 0302 	sub.w	r3, r3, #2
 8009a18:	bfcc      	ite	gt
 8009a1a:	2500      	movgt	r5, #0
 8009a1c:	2501      	movle	r5, #1
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d869      	bhi.n	8009af6 <_dtoa_r+0x2c6>
 8009a22:	e8df f003 	tbb	[pc, r3]
 8009a26:	4e2c      	.short	0x4e2c
 8009a28:	5a4c      	.short	0x5a4c
 8009a2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a2e:	441d      	add	r5, r3
 8009a30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	bfc1      	itttt	gt
 8009a38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a40:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a48:	bfda      	itte	le
 8009a4a:	f1c3 0320 	rsble	r3, r3, #32
 8009a4e:	fa06 f003 	lslle.w	r0, r6, r3
 8009a52:	4318      	orrgt	r0, r3
 8009a54:	f7f6 fd76 	bl	8000544 <__aeabi_ui2d>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a60:	3d01      	subs	r5, #1
 8009a62:	9310      	str	r3, [sp, #64]	; 0x40
 8009a64:	e771      	b.n	800994a <_dtoa_r+0x11a>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e7b6      	b.n	80099d8 <_dtoa_r+0x1a8>
 8009a6a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a6c:	e7b5      	b.n	80099da <_dtoa_r+0x1aa>
 8009a6e:	f1ca 0300 	rsb	r3, sl, #0
 8009a72:	9306      	str	r3, [sp, #24]
 8009a74:	2300      	movs	r3, #0
 8009a76:	eba8 080a 	sub.w	r8, r8, sl
 8009a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a7c:	e7c2      	b.n	8009a04 <_dtoa_r+0x1d4>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9308      	str	r3, [sp, #32]
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dc39      	bgt.n	8009afc <_dtoa_r+0x2cc>
 8009a88:	f04f 0901 	mov.w	r9, #1
 8009a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a90:	464b      	mov	r3, r9
 8009a92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a98:	2200      	movs	r2, #0
 8009a9a:	6042      	str	r2, [r0, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f102 0614 	add.w	r6, r2, #20
 8009aa2:	429e      	cmp	r6, r3
 8009aa4:	6841      	ldr	r1, [r0, #4]
 8009aa6:	d92f      	bls.n	8009b08 <_dtoa_r+0x2d8>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 f85b 	bl	800ab64 <_Balloc>
 8009aae:	9000      	str	r0, [sp, #0]
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d14b      	bne.n	8009b4c <_dtoa_r+0x31c>
 8009ab4:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <_dtoa_r+0x318>)
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009abc:	e6d1      	b.n	8009862 <_dtoa_r+0x32>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e7de      	b.n	8009a80 <_dtoa_r+0x250>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	eb0a 0903 	add.w	r9, sl, r3
 8009acc:	f109 0301 	add.w	r3, r9, #1
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	bfb8      	it	lt
 8009ad6:	2301      	movlt	r3, #1
 8009ad8:	e7dd      	b.n	8009a96 <_dtoa_r+0x266>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7f2      	b.n	8009ac4 <_dtoa_r+0x294>
 8009ade:	2501      	movs	r5, #1
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	9508      	str	r5, [sp, #32]
 8009ae6:	f04f 39ff 	mov.w	r9, #4294967295
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8009af0:	2312      	movs	r3, #18
 8009af2:	9209      	str	r2, [sp, #36]	; 0x24
 8009af4:	e7cf      	b.n	8009a96 <_dtoa_r+0x266>
 8009af6:	2301      	movs	r3, #1
 8009af8:	9308      	str	r3, [sp, #32]
 8009afa:	e7f4      	b.n	8009ae6 <_dtoa_r+0x2b6>
 8009afc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009b00:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b04:	464b      	mov	r3, r9
 8009b06:	e7c6      	b.n	8009a96 <_dtoa_r+0x266>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	6041      	str	r1, [r0, #4]
 8009b0c:	0052      	lsls	r2, r2, #1
 8009b0e:	e7c6      	b.n	8009a9e <_dtoa_r+0x26e>
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800ce1e 	.word	0x0800ce1e
 8009b2c:	0800ce35 	.word	0x0800ce35
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800ce1a 	.word	0x0800ce1a
 8009b38:	0800ce11 	.word	0x0800ce11
 8009b3c:	0800d09a 	.word	0x0800d09a
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	0800cfb0 	.word	0x0800cfb0
 8009b48:	0800ce94 	.word	0x0800ce94
 8009b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b4e:	9a00      	ldr	r2, [sp, #0]
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	2b0e      	cmp	r3, #14
 8009b56:	f200 80ad 	bhi.w	8009cb4 <_dtoa_r+0x484>
 8009b5a:	2d00      	cmp	r5, #0
 8009b5c:	f000 80aa 	beq.w	8009cb4 <_dtoa_r+0x484>
 8009b60:	f1ba 0f00 	cmp.w	sl, #0
 8009b64:	dd36      	ble.n	8009bd4 <_dtoa_r+0x3a4>
 8009b66:	4ac3      	ldr	r2, [pc, #780]	; (8009e74 <_dtoa_r+0x644>)
 8009b68:	f00a 030f 	and.w	r3, sl, #15
 8009b6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b70:	ed93 7b00 	vldr	d7, [r3]
 8009b74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b7c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b80:	eef0 8a67 	vmov.f32	s17, s15
 8009b84:	d016      	beq.n	8009bb4 <_dtoa_r+0x384>
 8009b86:	4bbc      	ldr	r3, [pc, #752]	; (8009e78 <_dtoa_r+0x648>)
 8009b88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b90:	f7f6 fe7c 	bl	800088c <__aeabi_ddiv>
 8009b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b98:	f007 070f 	and.w	r7, r7, #15
 8009b9c:	2503      	movs	r5, #3
 8009b9e:	4eb6      	ldr	r6, [pc, #728]	; (8009e78 <_dtoa_r+0x648>)
 8009ba0:	b957      	cbnz	r7, 8009bb8 <_dtoa_r+0x388>
 8009ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba6:	ec53 2b18 	vmov	r2, r3, d8
 8009baa:	f7f6 fe6f 	bl	800088c <__aeabi_ddiv>
 8009bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bb2:	e029      	b.n	8009c08 <_dtoa_r+0x3d8>
 8009bb4:	2502      	movs	r5, #2
 8009bb6:	e7f2      	b.n	8009b9e <_dtoa_r+0x36e>
 8009bb8:	07f9      	lsls	r1, r7, #31
 8009bba:	d508      	bpl.n	8009bce <_dtoa_r+0x39e>
 8009bbc:	ec51 0b18 	vmov	r0, r1, d8
 8009bc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bc4:	f7f6 fd38 	bl	8000638 <__aeabi_dmul>
 8009bc8:	ec41 0b18 	vmov	d8, r0, r1
 8009bcc:	3501      	adds	r5, #1
 8009bce:	107f      	asrs	r7, r7, #1
 8009bd0:	3608      	adds	r6, #8
 8009bd2:	e7e5      	b.n	8009ba0 <_dtoa_r+0x370>
 8009bd4:	f000 80a6 	beq.w	8009d24 <_dtoa_r+0x4f4>
 8009bd8:	f1ca 0600 	rsb	r6, sl, #0
 8009bdc:	4ba5      	ldr	r3, [pc, #660]	; (8009e74 <_dtoa_r+0x644>)
 8009bde:	4fa6      	ldr	r7, [pc, #664]	; (8009e78 <_dtoa_r+0x648>)
 8009be0:	f006 020f 	and.w	r2, r6, #15
 8009be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bf0:	f7f6 fd22 	bl	8000638 <__aeabi_dmul>
 8009bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf8:	1136      	asrs	r6, r6, #4
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2502      	movs	r5, #2
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	f040 8085 	bne.w	8009d0e <_dtoa_r+0x4de>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1d2      	bne.n	8009bae <_dtoa_r+0x37e>
 8009c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 808c 	beq.w	8009d28 <_dtoa_r+0x4f8>
 8009c10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c14:	4b99      	ldr	r3, [pc, #612]	; (8009e7c <_dtoa_r+0x64c>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 ff7e 	bl	8000b1c <__aeabi_dcmplt>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f000 8081 	beq.w	8009d28 <_dtoa_r+0x4f8>
 8009c26:	9b01      	ldr	r3, [sp, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d07d      	beq.n	8009d28 <_dtoa_r+0x4f8>
 8009c2c:	f1b9 0f00 	cmp.w	r9, #0
 8009c30:	dd3c      	ble.n	8009cac <_dtoa_r+0x47c>
 8009c32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c36:	9307      	str	r3, [sp, #28]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4b91      	ldr	r3, [pc, #580]	; (8009e80 <_dtoa_r+0x650>)
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 fcfa 	bl	8000638 <__aeabi_dmul>
 8009c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c48:	3501      	adds	r5, #1
 8009c4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7f6 fc86 	bl	8000564 <__aeabi_i2d>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 fcec 	bl	8000638 <__aeabi_dmul>
 8009c60:	4b88      	ldr	r3, [pc, #544]	; (8009e84 <_dtoa_r+0x654>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	f7f6 fb32 	bl	80002cc <__adddf3>
 8009c68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d15c      	bne.n	8009d32 <_dtoa_r+0x502>
 8009c78:	4b83      	ldr	r3, [pc, #524]	; (8009e88 <_dtoa_r+0x658>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 fb22 	bl	80002c8 <__aeabi_dsub>
 8009c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c88:	4606      	mov	r6, r0
 8009c8a:	460f      	mov	r7, r1
 8009c8c:	f7f6 ff64 	bl	8000b58 <__aeabi_dcmpgt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f040 8296 	bne.w	800a1c2 <_dtoa_r+0x992>
 8009c96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 ff3b 	bl	8000b1c <__aeabi_dcmplt>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f040 8288 	bne.w	800a1bc <_dtoa_r+0x98c>
 8009cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f2c0 8158 	blt.w	8009f6c <_dtoa_r+0x73c>
 8009cbc:	f1ba 0f0e 	cmp.w	sl, #14
 8009cc0:	f300 8154 	bgt.w	8009f6c <_dtoa_r+0x73c>
 8009cc4:	4b6b      	ldr	r3, [pc, #428]	; (8009e74 <_dtoa_r+0x644>)
 8009cc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f280 80e3 	bge.w	8009e9c <_dtoa_r+0x66c>
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f300 80df 	bgt.w	8009e9c <_dtoa_r+0x66c>
 8009cde:	f040 826d 	bne.w	800a1bc <_dtoa_r+0x98c>
 8009ce2:	4b69      	ldr	r3, [pc, #420]	; (8009e88 <_dtoa_r+0x658>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4649      	mov	r1, r9
 8009cea:	f7f6 fca5 	bl	8000638 <__aeabi_dmul>
 8009cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cf2:	f7f6 ff27 	bl	8000b44 <__aeabi_dcmpge>
 8009cf6:	9e01      	ldr	r6, [sp, #4]
 8009cf8:	4637      	mov	r7, r6
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f040 8243 	bne.w	800a186 <_dtoa_r+0x956>
 8009d00:	9d00      	ldr	r5, [sp, #0]
 8009d02:	2331      	movs	r3, #49	; 0x31
 8009d04:	f805 3b01 	strb.w	r3, [r5], #1
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	e23f      	b.n	800a18e <_dtoa_r+0x95e>
 8009d0e:	07f2      	lsls	r2, r6, #31
 8009d10:	d505      	bpl.n	8009d1e <_dtoa_r+0x4ee>
 8009d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d16:	f7f6 fc8f 	bl	8000638 <__aeabi_dmul>
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	1076      	asrs	r6, r6, #1
 8009d20:	3708      	adds	r7, #8
 8009d22:	e76c      	b.n	8009bfe <_dtoa_r+0x3ce>
 8009d24:	2502      	movs	r5, #2
 8009d26:	e76f      	b.n	8009c08 <_dtoa_r+0x3d8>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d30:	e78d      	b.n	8009c4e <_dtoa_r+0x41e>
 8009d32:	9900      	ldr	r1, [sp, #0]
 8009d34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d38:	4b4e      	ldr	r3, [pc, #312]	; (8009e74 <_dtoa_r+0x644>)
 8009d3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d3e:	4401      	add	r1, r0
 8009d40:	9102      	str	r1, [sp, #8]
 8009d42:	9908      	ldr	r1, [sp, #32]
 8009d44:	eeb0 8a47 	vmov.f32	s16, s14
 8009d48:	eef0 8a67 	vmov.f32	s17, s15
 8009d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d045      	beq.n	8009de4 <_dtoa_r+0x5b4>
 8009d58:	494c      	ldr	r1, [pc, #304]	; (8009e8c <_dtoa_r+0x65c>)
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f7f6 fd96 	bl	800088c <__aeabi_ddiv>
 8009d60:	ec53 2b18 	vmov	r2, r3, d8
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	9d00      	ldr	r5, [sp, #0]
 8009d6a:	ec41 0b18 	vmov	d8, r0, r1
 8009d6e:	4639      	mov	r1, r7
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7f6 ff11 	bl	8000b98 <__aeabi_d2iz>
 8009d76:	900c      	str	r0, [sp, #48]	; 0x30
 8009d78:	f7f6 fbf4 	bl	8000564 <__aeabi_i2d>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 faa0 	bl	80002c8 <__aeabi_dsub>
 8009d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d8a:	3330      	adds	r3, #48	; 0x30
 8009d8c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d90:	ec53 2b18 	vmov	r2, r3, d8
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	f7f6 fec0 	bl	8000b1c <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d165      	bne.n	8009e6c <_dtoa_r+0x63c>
 8009da0:	4632      	mov	r2, r6
 8009da2:	463b      	mov	r3, r7
 8009da4:	4935      	ldr	r1, [pc, #212]	; (8009e7c <_dtoa_r+0x64c>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa8e 	bl	80002c8 <__aeabi_dsub>
 8009dac:	ec53 2b18 	vmov	r2, r3, d8
 8009db0:	f7f6 feb4 	bl	8000b1c <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b9 	bne.w	8009f2c <_dtoa_r+0x6fc>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	f43f af75 	beq.w	8009cac <_dtoa_r+0x47c>
 8009dc2:	4b2f      	ldr	r3, [pc, #188]	; (8009e80 <_dtoa_r+0x650>)
 8009dc4:	ec51 0b18 	vmov	r0, r1, d8
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f7f6 fc35 	bl	8000638 <__aeabi_dmul>
 8009dce:	4b2c      	ldr	r3, [pc, #176]	; (8009e80 <_dtoa_r+0x650>)
 8009dd0:	ec41 0b18 	vmov	d8, r0, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	4639      	mov	r1, r7
 8009dda:	f7f6 fc2d 	bl	8000638 <__aeabi_dmul>
 8009dde:	4606      	mov	r6, r0
 8009de0:	460f      	mov	r7, r1
 8009de2:	e7c4      	b.n	8009d6e <_dtoa_r+0x53e>
 8009de4:	ec51 0b17 	vmov	r0, r1, d7
 8009de8:	f7f6 fc26 	bl	8000638 <__aeabi_dmul>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	9d00      	ldr	r5, [sp, #0]
 8009df0:	930c      	str	r3, [sp, #48]	; 0x30
 8009df2:	ec41 0b18 	vmov	d8, r0, r1
 8009df6:	4639      	mov	r1, r7
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7f6 fecd 	bl	8000b98 <__aeabi_d2iz>
 8009dfe:	9011      	str	r0, [sp, #68]	; 0x44
 8009e00:	f7f6 fbb0 	bl	8000564 <__aeabi_i2d>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fa5c 	bl	80002c8 <__aeabi_dsub>
 8009e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e12:	3330      	adds	r3, #48	; 0x30
 8009e14:	f805 3b01 	strb.w	r3, [r5], #1
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	429d      	cmp	r5, r3
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460f      	mov	r7, r1
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	d134      	bne.n	8009e90 <_dtoa_r+0x660>
 8009e26:	4b19      	ldr	r3, [pc, #100]	; (8009e8c <_dtoa_r+0x65c>)
 8009e28:	ec51 0b18 	vmov	r0, r1, d8
 8009e2c:	f7f6 fa4e 	bl	80002cc <__adddf3>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fe8e 	bl	8000b58 <__aeabi_dcmpgt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d175      	bne.n	8009f2c <_dtoa_r+0x6fc>
 8009e40:	ec53 2b18 	vmov	r2, r3, d8
 8009e44:	4911      	ldr	r1, [pc, #68]	; (8009e8c <_dtoa_r+0x65c>)
 8009e46:	2000      	movs	r0, #0
 8009e48:	f7f6 fa3e 	bl	80002c8 <__aeabi_dsub>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 fe62 	bl	8000b1c <__aeabi_dcmplt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f af27 	beq.w	8009cac <_dtoa_r+0x47c>
 8009e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e60:	1e6b      	subs	r3, r5, #1
 8009e62:	930c      	str	r3, [sp, #48]	; 0x30
 8009e64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e68:	2b30      	cmp	r3, #48	; 0x30
 8009e6a:	d0f8      	beq.n	8009e5e <_dtoa_r+0x62e>
 8009e6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e70:	e04a      	b.n	8009f08 <_dtoa_r+0x6d8>
 8009e72:	bf00      	nop
 8009e74:	0800cfb0 	.word	0x0800cfb0
 8009e78:	0800cf88 	.word	0x0800cf88
 8009e7c:	3ff00000 	.word	0x3ff00000
 8009e80:	40240000 	.word	0x40240000
 8009e84:	401c0000 	.word	0x401c0000
 8009e88:	40140000 	.word	0x40140000
 8009e8c:	3fe00000 	.word	0x3fe00000
 8009e90:	4baf      	ldr	r3, [pc, #700]	; (800a150 <_dtoa_r+0x920>)
 8009e92:	f7f6 fbd1 	bl	8000638 <__aeabi_dmul>
 8009e96:	4606      	mov	r6, r0
 8009e98:	460f      	mov	r7, r1
 8009e9a:	e7ac      	b.n	8009df6 <_dtoa_r+0x5c6>
 8009e9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ea0:	9d00      	ldr	r5, [sp, #0]
 8009ea2:	4642      	mov	r2, r8
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	f7f6 fcef 	bl	800088c <__aeabi_ddiv>
 8009eae:	f7f6 fe73 	bl	8000b98 <__aeabi_d2iz>
 8009eb2:	9002      	str	r0, [sp, #8]
 8009eb4:	f7f6 fb56 	bl	8000564 <__aeabi_i2d>
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	f7f6 fbbc 	bl	8000638 <__aeabi_dmul>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f7f6 f9fe 	bl	80002c8 <__aeabi_dsub>
 8009ecc:	9e02      	ldr	r6, [sp, #8]
 8009ece:	9f01      	ldr	r7, [sp, #4]
 8009ed0:	3630      	adds	r6, #48	; 0x30
 8009ed2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed6:	9e00      	ldr	r6, [sp, #0]
 8009ed8:	1bae      	subs	r6, r5, r6
 8009eda:	42b7      	cmp	r7, r6
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	d137      	bne.n	8009f52 <_dtoa_r+0x722>
 8009ee2:	f7f6 f9f3 	bl	80002cc <__adddf3>
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	464b      	mov	r3, r9
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	f7f6 fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8009ef2:	b9c8      	cbnz	r0, 8009f28 <_dtoa_r+0x6f8>
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8009f00:	b110      	cbz	r0, 8009f08 <_dtoa_r+0x6d8>
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	07d9      	lsls	r1, r3, #31
 8009f06:	d40f      	bmi.n	8009f28 <_dtoa_r+0x6f8>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	f000 fe6a 	bl	800abe4 <_Bfree>
 8009f10:	2300      	movs	r3, #0
 8009f12:	702b      	strb	r3, [r5, #0]
 8009f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f16:	f10a 0001 	add.w	r0, sl, #1
 8009f1a:	6018      	str	r0, [r3, #0]
 8009f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f acd8 	beq.w	80098d4 <_dtoa_r+0xa4>
 8009f24:	601d      	str	r5, [r3, #0]
 8009f26:	e4d5      	b.n	80098d4 <_dtoa_r+0xa4>
 8009f28:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	461d      	mov	r5, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a39      	cmp	r2, #57	; 0x39
 8009f36:	d108      	bne.n	8009f4a <_dtoa_r+0x71a>
 8009f38:	9a00      	ldr	r2, [sp, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d1f7      	bne.n	8009f2e <_dtoa_r+0x6fe>
 8009f3e:	9a07      	ldr	r2, [sp, #28]
 8009f40:	9900      	ldr	r1, [sp, #0]
 8009f42:	3201      	adds	r2, #1
 8009f44:	9207      	str	r2, [sp, #28]
 8009f46:	2230      	movs	r2, #48	; 0x30
 8009f48:	700a      	strb	r2, [r1, #0]
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	3201      	adds	r2, #1
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	e78c      	b.n	8009e6c <_dtoa_r+0x63c>
 8009f52:	4b7f      	ldr	r3, [pc, #508]	; (800a150 <_dtoa_r+0x920>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	f7f6 fb6f 	bl	8000638 <__aeabi_dmul>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	f7f6 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d09b      	beq.n	8009ea2 <_dtoa_r+0x672>
 8009f6a:	e7cd      	b.n	8009f08 <_dtoa_r+0x6d8>
 8009f6c:	9a08      	ldr	r2, [sp, #32]
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	f000 80c4 	beq.w	800a0fc <_dtoa_r+0x8cc>
 8009f74:	9a05      	ldr	r2, [sp, #20]
 8009f76:	2a01      	cmp	r2, #1
 8009f78:	f300 80a8 	bgt.w	800a0cc <_dtoa_r+0x89c>
 8009f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	f000 80a0 	beq.w	800a0c4 <_dtoa_r+0x894>
 8009f84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f88:	9e06      	ldr	r6, [sp, #24]
 8009f8a:	4645      	mov	r5, r8
 8009f8c:	9a04      	ldr	r2, [sp, #16]
 8009f8e:	2101      	movs	r1, #1
 8009f90:	441a      	add	r2, r3
 8009f92:	4620      	mov	r0, r4
 8009f94:	4498      	add	r8, r3
 8009f96:	9204      	str	r2, [sp, #16]
 8009f98:	f000 ff2a 	bl	800adf0 <__i2b>
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	dd0b      	ble.n	8009fba <_dtoa_r+0x78a>
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd08      	ble.n	8009fba <_dtoa_r+0x78a>
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	9a04      	ldr	r2, [sp, #16]
 8009fac:	bfa8      	it	ge
 8009fae:	462b      	movge	r3, r5
 8009fb0:	eba8 0803 	sub.w	r8, r8, r3
 8009fb4:	1aed      	subs	r5, r5, r3
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	9b06      	ldr	r3, [sp, #24]
 8009fbc:	b1fb      	cbz	r3, 8009ffe <_dtoa_r+0x7ce>
 8009fbe:	9b08      	ldr	r3, [sp, #32]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 809f 	beq.w	800a104 <_dtoa_r+0x8d4>
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	dd11      	ble.n	8009fee <_dtoa_r+0x7be>
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 ffca 	bl	800af68 <__pow5mult>
 8009fd4:	465a      	mov	r2, fp
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	4607      	mov	r7, r0
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 ff1e 	bl	800ae1c <__multiply>
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	9007      	str	r0, [sp, #28]
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fdfd 	bl	800abe4 <_Bfree>
 8009fea:	9b07      	ldr	r3, [sp, #28]
 8009fec:	469b      	mov	fp, r3
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	1b9a      	subs	r2, r3, r6
 8009ff2:	d004      	beq.n	8009ffe <_dtoa_r+0x7ce>
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ffb6 	bl	800af68 <__pow5mult>
 8009ffc:	4683      	mov	fp, r0
 8009ffe:	2101      	movs	r1, #1
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fef5 	bl	800adf0 <__i2b>
 800a006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a008:	2b00      	cmp	r3, #0
 800a00a:	4606      	mov	r6, r0
 800a00c:	dd7c      	ble.n	800a108 <_dtoa_r+0x8d8>
 800a00e:	461a      	mov	r2, r3
 800a010:	4601      	mov	r1, r0
 800a012:	4620      	mov	r0, r4
 800a014:	f000 ffa8 	bl	800af68 <__pow5mult>
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	4606      	mov	r6, r0
 800a01e:	dd76      	ble.n	800a10e <_dtoa_r+0x8de>
 800a020:	2300      	movs	r3, #0
 800a022:	9306      	str	r3, [sp, #24]
 800a024:	6933      	ldr	r3, [r6, #16]
 800a026:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a02a:	6918      	ldr	r0, [r3, #16]
 800a02c:	f000 fe90 	bl	800ad50 <__hi0bits>
 800a030:	f1c0 0020 	rsb	r0, r0, #32
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	4418      	add	r0, r3
 800a038:	f010 001f 	ands.w	r0, r0, #31
 800a03c:	f000 8086 	beq.w	800a14c <_dtoa_r+0x91c>
 800a040:	f1c0 0320 	rsb	r3, r0, #32
 800a044:	2b04      	cmp	r3, #4
 800a046:	dd7f      	ble.n	800a148 <_dtoa_r+0x918>
 800a048:	f1c0 001c 	rsb	r0, r0, #28
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	4403      	add	r3, r0
 800a050:	4480      	add	r8, r0
 800a052:	4405      	add	r5, r0
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	f1b8 0f00 	cmp.w	r8, #0
 800a05a:	dd05      	ble.n	800a068 <_dtoa_r+0x838>
 800a05c:	4659      	mov	r1, fp
 800a05e:	4642      	mov	r2, r8
 800a060:	4620      	mov	r0, r4
 800a062:	f000 ffdb 	bl	800b01c <__lshift>
 800a066:	4683      	mov	fp, r0
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd05      	ble.n	800a07a <_dtoa_r+0x84a>
 800a06e:	4631      	mov	r1, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f000 ffd2 	bl	800b01c <__lshift>
 800a078:	4606      	mov	r6, r0
 800a07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d069      	beq.n	800a154 <_dtoa_r+0x924>
 800a080:	4631      	mov	r1, r6
 800a082:	4658      	mov	r0, fp
 800a084:	f001 f836 	bl	800b0f4 <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	da63      	bge.n	800a154 <_dtoa_r+0x924>
 800a08c:	2300      	movs	r3, #0
 800a08e:	4659      	mov	r1, fp
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fdc8 	bl	800ac28 <__multadd>
 800a098:	9b08      	ldr	r3, [sp, #32]
 800a09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a09e:	4683      	mov	fp, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 818f 	beq.w	800a3c4 <_dtoa_r+0xb94>
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fdbb 	bl	800ac28 <__multadd>
 800a0b2:	f1b9 0f00 	cmp.w	r9, #0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	f300 808e 	bgt.w	800a1d8 <_dtoa_r+0x9a8>
 800a0bc:	9b05      	ldr	r3, [sp, #20]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	dc50      	bgt.n	800a164 <_dtoa_r+0x934>
 800a0c2:	e089      	b.n	800a1d8 <_dtoa_r+0x9a8>
 800a0c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ca:	e75d      	b.n	8009f88 <_dtoa_r+0x758>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	1e5e      	subs	r6, r3, #1
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	42b3      	cmp	r3, r6
 800a0d4:	bfbf      	itttt	lt
 800a0d6:	9b06      	ldrlt	r3, [sp, #24]
 800a0d8:	9606      	strlt	r6, [sp, #24]
 800a0da:	1af2      	sublt	r2, r6, r3
 800a0dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0de:	bfb6      	itet	lt
 800a0e0:	189b      	addlt	r3, r3, r2
 800a0e2:	1b9e      	subge	r6, r3, r6
 800a0e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	bfb8      	it	lt
 800a0ea:	2600      	movlt	r6, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfb5      	itete	lt
 800a0f0:	eba8 0503 	sublt.w	r5, r8, r3
 800a0f4:	9b01      	ldrge	r3, [sp, #4]
 800a0f6:	2300      	movlt	r3, #0
 800a0f8:	4645      	movge	r5, r8
 800a0fa:	e747      	b.n	8009f8c <_dtoa_r+0x75c>
 800a0fc:	9e06      	ldr	r6, [sp, #24]
 800a0fe:	9f08      	ldr	r7, [sp, #32]
 800a100:	4645      	mov	r5, r8
 800a102:	e74c      	b.n	8009f9e <_dtoa_r+0x76e>
 800a104:	9a06      	ldr	r2, [sp, #24]
 800a106:	e775      	b.n	8009ff4 <_dtoa_r+0x7c4>
 800a108:	9b05      	ldr	r3, [sp, #20]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	dc18      	bgt.n	800a140 <_dtoa_r+0x910>
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	b9b3      	cbnz	r3, 800a140 <_dtoa_r+0x910>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a118:	b9a3      	cbnz	r3, 800a144 <_dtoa_r+0x914>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a120:	0d1b      	lsrs	r3, r3, #20
 800a122:	051b      	lsls	r3, r3, #20
 800a124:	b12b      	cbz	r3, 800a132 <_dtoa_r+0x902>
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	3301      	adds	r3, #1
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	f108 0801 	add.w	r8, r8, #1
 800a130:	2301      	movs	r3, #1
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a136:	2b00      	cmp	r3, #0
 800a138:	f47f af74 	bne.w	800a024 <_dtoa_r+0x7f4>
 800a13c:	2001      	movs	r0, #1
 800a13e:	e779      	b.n	800a034 <_dtoa_r+0x804>
 800a140:	2300      	movs	r3, #0
 800a142:	e7f6      	b.n	800a132 <_dtoa_r+0x902>
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	e7f4      	b.n	800a132 <_dtoa_r+0x902>
 800a148:	d085      	beq.n	800a056 <_dtoa_r+0x826>
 800a14a:	4618      	mov	r0, r3
 800a14c:	301c      	adds	r0, #28
 800a14e:	e77d      	b.n	800a04c <_dtoa_r+0x81c>
 800a150:	40240000 	.word	0x40240000
 800a154:	9b01      	ldr	r3, [sp, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	dc38      	bgt.n	800a1cc <_dtoa_r+0x99c>
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	dd35      	ble.n	800a1cc <_dtoa_r+0x99c>
 800a160:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a164:	f1b9 0f00 	cmp.w	r9, #0
 800a168:	d10d      	bne.n	800a186 <_dtoa_r+0x956>
 800a16a:	4631      	mov	r1, r6
 800a16c:	464b      	mov	r3, r9
 800a16e:	2205      	movs	r2, #5
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fd59 	bl	800ac28 <__multadd>
 800a176:	4601      	mov	r1, r0
 800a178:	4606      	mov	r6, r0
 800a17a:	4658      	mov	r0, fp
 800a17c:	f000 ffba 	bl	800b0f4 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	f73f adbd 	bgt.w	8009d00 <_dtoa_r+0x4d0>
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	9d00      	ldr	r5, [sp, #0]
 800a18a:	ea6f 0a03 	mvn.w	sl, r3
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	4631      	mov	r1, r6
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fd25 	bl	800abe4 <_Bfree>
 800a19a:	2f00      	cmp	r7, #0
 800a19c:	f43f aeb4 	beq.w	8009f08 <_dtoa_r+0x6d8>
 800a1a0:	f1b8 0f00 	cmp.w	r8, #0
 800a1a4:	d005      	beq.n	800a1b2 <_dtoa_r+0x982>
 800a1a6:	45b8      	cmp	r8, r7
 800a1a8:	d003      	beq.n	800a1b2 <_dtoa_r+0x982>
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f000 fd19 	bl	800abe4 <_Bfree>
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fd15 	bl	800abe4 <_Bfree>
 800a1ba:	e6a5      	b.n	8009f08 <_dtoa_r+0x6d8>
 800a1bc:	2600      	movs	r6, #0
 800a1be:	4637      	mov	r7, r6
 800a1c0:	e7e1      	b.n	800a186 <_dtoa_r+0x956>
 800a1c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a1c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1c8:	4637      	mov	r7, r6
 800a1ca:	e599      	b.n	8009d00 <_dtoa_r+0x4d0>
 800a1cc:	9b08      	ldr	r3, [sp, #32]
 800a1ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 80fd 	beq.w	800a3d2 <_dtoa_r+0xba2>
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	dd05      	ble.n	800a1e8 <_dtoa_r+0x9b8>
 800a1dc:	4639      	mov	r1, r7
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 ff1b 	bl	800b01c <__lshift>
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	9b06      	ldr	r3, [sp, #24]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d05c      	beq.n	800a2a8 <_dtoa_r+0xa78>
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fcb7 	bl	800ab64 <_Balloc>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <_dtoa_r+0x9d6>
 800a1fa:	4b80      	ldr	r3, [pc, #512]	; (800a3fc <_dtoa_r+0xbcc>)
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a202:	f7ff bb2e 	b.w	8009862 <_dtoa_r+0x32>
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	f107 010c 	add.w	r1, r7, #12
 800a210:	300c      	adds	r0, #12
 800a212:	f000 fc99 	bl	800ab48 <memcpy>
 800a216:	2201      	movs	r2, #1
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 fefe 	bl	800b01c <__lshift>
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	9b00      	ldr	r3, [sp, #0]
 800a228:	444b      	add	r3, r9
 800a22a:	9307      	str	r3, [sp, #28]
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	46b8      	mov	r8, r7
 800a234:	9306      	str	r3, [sp, #24]
 800a236:	4607      	mov	r7, r0
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	4631      	mov	r1, r6
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4658      	mov	r0, fp
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	f7ff fa69 	bl	8009718 <quorem>
 800a246:	4603      	mov	r3, r0
 800a248:	3330      	adds	r3, #48	; 0x30
 800a24a:	9004      	str	r0, [sp, #16]
 800a24c:	4641      	mov	r1, r8
 800a24e:	4658      	mov	r0, fp
 800a250:	9308      	str	r3, [sp, #32]
 800a252:	f000 ff4f 	bl	800b0f4 <__mcmp>
 800a256:	463a      	mov	r2, r7
 800a258:	4681      	mov	r9, r0
 800a25a:	4631      	mov	r1, r6
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 ff65 	bl	800b12c <__mdiff>
 800a262:	68c2      	ldr	r2, [r0, #12]
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	4605      	mov	r5, r0
 800a268:	bb02      	cbnz	r2, 800a2ac <_dtoa_r+0xa7c>
 800a26a:	4601      	mov	r1, r0
 800a26c:	4658      	mov	r0, fp
 800a26e:	f000 ff41 	bl	800b0f4 <__mcmp>
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	4602      	mov	r2, r0
 800a276:	4629      	mov	r1, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a27e:	f000 fcb1 	bl	800abe4 <_Bfree>
 800a282:	9b05      	ldr	r3, [sp, #20]
 800a284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a286:	9d01      	ldr	r5, [sp, #4]
 800a288:	ea43 0102 	orr.w	r1, r3, r2
 800a28c:	9b06      	ldr	r3, [sp, #24]
 800a28e:	430b      	orrs	r3, r1
 800a290:	9b08      	ldr	r3, [sp, #32]
 800a292:	d10d      	bne.n	800a2b0 <_dtoa_r+0xa80>
 800a294:	2b39      	cmp	r3, #57	; 0x39
 800a296:	d029      	beq.n	800a2ec <_dtoa_r+0xabc>
 800a298:	f1b9 0f00 	cmp.w	r9, #0
 800a29c:	dd01      	ble.n	800a2a2 <_dtoa_r+0xa72>
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	3331      	adds	r3, #49	; 0x31
 800a2a2:	9a02      	ldr	r2, [sp, #8]
 800a2a4:	7013      	strb	r3, [r2, #0]
 800a2a6:	e774      	b.n	800a192 <_dtoa_r+0x962>
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	e7b9      	b.n	800a220 <_dtoa_r+0x9f0>
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	e7e2      	b.n	800a276 <_dtoa_r+0xa46>
 800a2b0:	f1b9 0f00 	cmp.w	r9, #0
 800a2b4:	db06      	blt.n	800a2c4 <_dtoa_r+0xa94>
 800a2b6:	9905      	ldr	r1, [sp, #20]
 800a2b8:	ea41 0909 	orr.w	r9, r1, r9
 800a2bc:	9906      	ldr	r1, [sp, #24]
 800a2be:	ea59 0101 	orrs.w	r1, r9, r1
 800a2c2:	d120      	bne.n	800a306 <_dtoa_r+0xad6>
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	ddec      	ble.n	800a2a2 <_dtoa_r+0xa72>
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	f000 fea4 	bl	800b01c <__lshift>
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4683      	mov	fp, r0
 800a2d8:	f000 ff0c 	bl	800b0f4 <__mcmp>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	dc02      	bgt.n	800a2e8 <_dtoa_r+0xab8>
 800a2e2:	d1de      	bne.n	800a2a2 <_dtoa_r+0xa72>
 800a2e4:	07da      	lsls	r2, r3, #31
 800a2e6:	d5dc      	bpl.n	800a2a2 <_dtoa_r+0xa72>
 800a2e8:	2b39      	cmp	r3, #57	; 0x39
 800a2ea:	d1d8      	bne.n	800a29e <_dtoa_r+0xa6e>
 800a2ec:	9a02      	ldr	r2, [sp, #8]
 800a2ee:	2339      	movs	r3, #57	; 0x39
 800a2f0:	7013      	strb	r3, [r2, #0]
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	461d      	mov	r5, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2fc:	2a39      	cmp	r2, #57	; 0x39
 800a2fe:	d050      	beq.n	800a3a2 <_dtoa_r+0xb72>
 800a300:	3201      	adds	r2, #1
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e745      	b.n	800a192 <_dtoa_r+0x962>
 800a306:	2a00      	cmp	r2, #0
 800a308:	dd03      	ble.n	800a312 <_dtoa_r+0xae2>
 800a30a:	2b39      	cmp	r3, #57	; 0x39
 800a30c:	d0ee      	beq.n	800a2ec <_dtoa_r+0xabc>
 800a30e:	3301      	adds	r3, #1
 800a310:	e7c7      	b.n	800a2a2 <_dtoa_r+0xa72>
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	9907      	ldr	r1, [sp, #28]
 800a316:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a31a:	428a      	cmp	r2, r1
 800a31c:	d02a      	beq.n	800a374 <_dtoa_r+0xb44>
 800a31e:	4659      	mov	r1, fp
 800a320:	2300      	movs	r3, #0
 800a322:	220a      	movs	r2, #10
 800a324:	4620      	mov	r0, r4
 800a326:	f000 fc7f 	bl	800ac28 <__multadd>
 800a32a:	45b8      	cmp	r8, r7
 800a32c:	4683      	mov	fp, r0
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	f04f 020a 	mov.w	r2, #10
 800a336:	4641      	mov	r1, r8
 800a338:	4620      	mov	r0, r4
 800a33a:	d107      	bne.n	800a34c <_dtoa_r+0xb1c>
 800a33c:	f000 fc74 	bl	800ac28 <__multadd>
 800a340:	4680      	mov	r8, r0
 800a342:	4607      	mov	r7, r0
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	3301      	adds	r3, #1
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	e775      	b.n	800a238 <_dtoa_r+0xa08>
 800a34c:	f000 fc6c 	bl	800ac28 <__multadd>
 800a350:	4639      	mov	r1, r7
 800a352:	4680      	mov	r8, r0
 800a354:	2300      	movs	r3, #0
 800a356:	220a      	movs	r2, #10
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fc65 	bl	800ac28 <__multadd>
 800a35e:	4607      	mov	r7, r0
 800a360:	e7f0      	b.n	800a344 <_dtoa_r+0xb14>
 800a362:	f1b9 0f00 	cmp.w	r9, #0
 800a366:	9a00      	ldr	r2, [sp, #0]
 800a368:	bfcc      	ite	gt
 800a36a:	464d      	movgt	r5, r9
 800a36c:	2501      	movle	r5, #1
 800a36e:	4415      	add	r5, r2
 800a370:	f04f 0800 	mov.w	r8, #0
 800a374:	4659      	mov	r1, fp
 800a376:	2201      	movs	r2, #1
 800a378:	4620      	mov	r0, r4
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	f000 fe4e 	bl	800b01c <__lshift>
 800a380:	4631      	mov	r1, r6
 800a382:	4683      	mov	fp, r0
 800a384:	f000 feb6 	bl	800b0f4 <__mcmp>
 800a388:	2800      	cmp	r0, #0
 800a38a:	dcb2      	bgt.n	800a2f2 <_dtoa_r+0xac2>
 800a38c:	d102      	bne.n	800a394 <_dtoa_r+0xb64>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	07db      	lsls	r3, r3, #31
 800a392:	d4ae      	bmi.n	800a2f2 <_dtoa_r+0xac2>
 800a394:	462b      	mov	r3, r5
 800a396:	461d      	mov	r5, r3
 800a398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a39c:	2a30      	cmp	r2, #48	; 0x30
 800a39e:	d0fa      	beq.n	800a396 <_dtoa_r+0xb66>
 800a3a0:	e6f7      	b.n	800a192 <_dtoa_r+0x962>
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d1a5      	bne.n	800a2f4 <_dtoa_r+0xac4>
 800a3a8:	f10a 0a01 	add.w	sl, sl, #1
 800a3ac:	2331      	movs	r3, #49	; 0x31
 800a3ae:	e779      	b.n	800a2a4 <_dtoa_r+0xa74>
 800a3b0:	4b13      	ldr	r3, [pc, #76]	; (800a400 <_dtoa_r+0xbd0>)
 800a3b2:	f7ff baaf 	b.w	8009914 <_dtoa_r+0xe4>
 800a3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f47f aa86 	bne.w	80098ca <_dtoa_r+0x9a>
 800a3be:	4b11      	ldr	r3, [pc, #68]	; (800a404 <_dtoa_r+0xbd4>)
 800a3c0:	f7ff baa8 	b.w	8009914 <_dtoa_r+0xe4>
 800a3c4:	f1b9 0f00 	cmp.w	r9, #0
 800a3c8:	dc03      	bgt.n	800a3d2 <_dtoa_r+0xba2>
 800a3ca:	9b05      	ldr	r3, [sp, #20]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	f73f aec9 	bgt.w	800a164 <_dtoa_r+0x934>
 800a3d2:	9d00      	ldr	r5, [sp, #0]
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f7ff f99e 	bl	8009718 <quorem>
 800a3dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3e0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3e4:	9a00      	ldr	r2, [sp, #0]
 800a3e6:	1aaa      	subs	r2, r5, r2
 800a3e8:	4591      	cmp	r9, r2
 800a3ea:	ddba      	ble.n	800a362 <_dtoa_r+0xb32>
 800a3ec:	4659      	mov	r1, fp
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 fc18 	bl	800ac28 <__multadd>
 800a3f8:	4683      	mov	fp, r0
 800a3fa:	e7eb      	b.n	800a3d4 <_dtoa_r+0xba4>
 800a3fc:	0800ce94 	.word	0x0800ce94
 800a400:	0800d099 	.word	0x0800d099
 800a404:	0800ce11 	.word	0x0800ce11

0800a408 <rshift>:
 800a408:	6903      	ldr	r3, [r0, #16]
 800a40a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a40e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a412:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a416:	f100 0414 	add.w	r4, r0, #20
 800a41a:	dd45      	ble.n	800a4a8 <rshift+0xa0>
 800a41c:	f011 011f 	ands.w	r1, r1, #31
 800a420:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a424:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a428:	d10c      	bne.n	800a444 <rshift+0x3c>
 800a42a:	f100 0710 	add.w	r7, r0, #16
 800a42e:	4629      	mov	r1, r5
 800a430:	42b1      	cmp	r1, r6
 800a432:	d334      	bcc.n	800a49e <rshift+0x96>
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	1eea      	subs	r2, r5, #3
 800a43a:	4296      	cmp	r6, r2
 800a43c:	bf38      	it	cc
 800a43e:	2300      	movcc	r3, #0
 800a440:	4423      	add	r3, r4
 800a442:	e015      	b.n	800a470 <rshift+0x68>
 800a444:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a448:	f1c1 0820 	rsb	r8, r1, #32
 800a44c:	40cf      	lsrs	r7, r1
 800a44e:	f105 0e04 	add.w	lr, r5, #4
 800a452:	46a1      	mov	r9, r4
 800a454:	4576      	cmp	r6, lr
 800a456:	46f4      	mov	ip, lr
 800a458:	d815      	bhi.n	800a486 <rshift+0x7e>
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	009a      	lsls	r2, r3, #2
 800a45e:	3a04      	subs	r2, #4
 800a460:	3501      	adds	r5, #1
 800a462:	42ae      	cmp	r6, r5
 800a464:	bf38      	it	cc
 800a466:	2200      	movcc	r2, #0
 800a468:	18a3      	adds	r3, r4, r2
 800a46a:	50a7      	str	r7, [r4, r2]
 800a46c:	b107      	cbz	r7, 800a470 <rshift+0x68>
 800a46e:	3304      	adds	r3, #4
 800a470:	1b1a      	subs	r2, r3, r4
 800a472:	42a3      	cmp	r3, r4
 800a474:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a478:	bf08      	it	eq
 800a47a:	2300      	moveq	r3, #0
 800a47c:	6102      	str	r2, [r0, #16]
 800a47e:	bf08      	it	eq
 800a480:	6143      	streq	r3, [r0, #20]
 800a482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a486:	f8dc c000 	ldr.w	ip, [ip]
 800a48a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a48e:	ea4c 0707 	orr.w	r7, ip, r7
 800a492:	f849 7b04 	str.w	r7, [r9], #4
 800a496:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a49a:	40cf      	lsrs	r7, r1
 800a49c:	e7da      	b.n	800a454 <rshift+0x4c>
 800a49e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4a6:	e7c3      	b.n	800a430 <rshift+0x28>
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	e7e1      	b.n	800a470 <rshift+0x68>

0800a4ac <__hexdig_fun>:
 800a4ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4b0:	2b09      	cmp	r3, #9
 800a4b2:	d802      	bhi.n	800a4ba <__hexdig_fun+0xe>
 800a4b4:	3820      	subs	r0, #32
 800a4b6:	b2c0      	uxtb	r0, r0
 800a4b8:	4770      	bx	lr
 800a4ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d801      	bhi.n	800a4c6 <__hexdig_fun+0x1a>
 800a4c2:	3847      	subs	r0, #71	; 0x47
 800a4c4:	e7f7      	b.n	800a4b6 <__hexdig_fun+0xa>
 800a4c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d801      	bhi.n	800a4d2 <__hexdig_fun+0x26>
 800a4ce:	3827      	subs	r0, #39	; 0x27
 800a4d0:	e7f1      	b.n	800a4b6 <__hexdig_fun+0xa>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <__gethex>:
 800a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	ed2d 8b02 	vpush	{d8}
 800a4e0:	b089      	sub	sp, #36	; 0x24
 800a4e2:	ee08 0a10 	vmov	s16, r0
 800a4e6:	9304      	str	r3, [sp, #16]
 800a4e8:	4bbc      	ldr	r3, [pc, #752]	; (800a7dc <__gethex+0x304>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	468b      	mov	fp, r1
 800a4f2:	4690      	mov	r8, r2
 800a4f4:	f7f5 fe8c 	bl	8000210 <strlen>
 800a4f8:	9b01      	ldr	r3, [sp, #4]
 800a4fa:	f8db 2000 	ldr.w	r2, [fp]
 800a4fe:	4403      	add	r3, r0
 800a500:	4682      	mov	sl, r0
 800a502:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a506:	9305      	str	r3, [sp, #20]
 800a508:	1c93      	adds	r3, r2, #2
 800a50a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a50e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a512:	32fe      	adds	r2, #254	; 0xfe
 800a514:	18d1      	adds	r1, r2, r3
 800a516:	461f      	mov	r7, r3
 800a518:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a51c:	9100      	str	r1, [sp, #0]
 800a51e:	2830      	cmp	r0, #48	; 0x30
 800a520:	d0f8      	beq.n	800a514 <__gethex+0x3c>
 800a522:	f7ff ffc3 	bl	800a4ac <__hexdig_fun>
 800a526:	4604      	mov	r4, r0
 800a528:	2800      	cmp	r0, #0
 800a52a:	d13a      	bne.n	800a5a2 <__gethex+0xca>
 800a52c:	9901      	ldr	r1, [sp, #4]
 800a52e:	4652      	mov	r2, sl
 800a530:	4638      	mov	r0, r7
 800a532:	f001 fd6b 	bl	800c00c <strncmp>
 800a536:	4605      	mov	r5, r0
 800a538:	2800      	cmp	r0, #0
 800a53a:	d168      	bne.n	800a60e <__gethex+0x136>
 800a53c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a540:	eb07 060a 	add.w	r6, r7, sl
 800a544:	f7ff ffb2 	bl	800a4ac <__hexdig_fun>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d062      	beq.n	800a612 <__gethex+0x13a>
 800a54c:	4633      	mov	r3, r6
 800a54e:	7818      	ldrb	r0, [r3, #0]
 800a550:	2830      	cmp	r0, #48	; 0x30
 800a552:	461f      	mov	r7, r3
 800a554:	f103 0301 	add.w	r3, r3, #1
 800a558:	d0f9      	beq.n	800a54e <__gethex+0x76>
 800a55a:	f7ff ffa7 	bl	800a4ac <__hexdig_fun>
 800a55e:	2301      	movs	r3, #1
 800a560:	fab0 f480 	clz	r4, r0
 800a564:	0964      	lsrs	r4, r4, #5
 800a566:	4635      	mov	r5, r6
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	463a      	mov	r2, r7
 800a56c:	4616      	mov	r6, r2
 800a56e:	3201      	adds	r2, #1
 800a570:	7830      	ldrb	r0, [r6, #0]
 800a572:	f7ff ff9b 	bl	800a4ac <__hexdig_fun>
 800a576:	2800      	cmp	r0, #0
 800a578:	d1f8      	bne.n	800a56c <__gethex+0x94>
 800a57a:	9901      	ldr	r1, [sp, #4]
 800a57c:	4652      	mov	r2, sl
 800a57e:	4630      	mov	r0, r6
 800a580:	f001 fd44 	bl	800c00c <strncmp>
 800a584:	b980      	cbnz	r0, 800a5a8 <__gethex+0xd0>
 800a586:	b94d      	cbnz	r5, 800a59c <__gethex+0xc4>
 800a588:	eb06 050a 	add.w	r5, r6, sl
 800a58c:	462a      	mov	r2, r5
 800a58e:	4616      	mov	r6, r2
 800a590:	3201      	adds	r2, #1
 800a592:	7830      	ldrb	r0, [r6, #0]
 800a594:	f7ff ff8a 	bl	800a4ac <__hexdig_fun>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1f8      	bne.n	800a58e <__gethex+0xb6>
 800a59c:	1bad      	subs	r5, r5, r6
 800a59e:	00ad      	lsls	r5, r5, #2
 800a5a0:	e004      	b.n	800a5ac <__gethex+0xd4>
 800a5a2:	2400      	movs	r4, #0
 800a5a4:	4625      	mov	r5, r4
 800a5a6:	e7e0      	b.n	800a56a <__gethex+0x92>
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	d1f7      	bne.n	800a59c <__gethex+0xc4>
 800a5ac:	7833      	ldrb	r3, [r6, #0]
 800a5ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5b2:	2b50      	cmp	r3, #80	; 0x50
 800a5b4:	d13b      	bne.n	800a62e <__gethex+0x156>
 800a5b6:	7873      	ldrb	r3, [r6, #1]
 800a5b8:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ba:	d02c      	beq.n	800a616 <__gethex+0x13e>
 800a5bc:	2b2d      	cmp	r3, #45	; 0x2d
 800a5be:	d02e      	beq.n	800a61e <__gethex+0x146>
 800a5c0:	1c71      	adds	r1, r6, #1
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	7808      	ldrb	r0, [r1, #0]
 800a5c8:	f7ff ff70 	bl	800a4ac <__hexdig_fun>
 800a5cc:	1e43      	subs	r3, r0, #1
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b18      	cmp	r3, #24
 800a5d2:	d82c      	bhi.n	800a62e <__gethex+0x156>
 800a5d4:	f1a0 0210 	sub.w	r2, r0, #16
 800a5d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5dc:	f7ff ff66 	bl	800a4ac <__hexdig_fun>
 800a5e0:	1e43      	subs	r3, r0, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	d91d      	bls.n	800a624 <__gethex+0x14c>
 800a5e8:	f1b9 0f00 	cmp.w	r9, #0
 800a5ec:	d000      	beq.n	800a5f0 <__gethex+0x118>
 800a5ee:	4252      	negs	r2, r2
 800a5f0:	4415      	add	r5, r2
 800a5f2:	f8cb 1000 	str.w	r1, [fp]
 800a5f6:	b1e4      	cbz	r4, 800a632 <__gethex+0x15a>
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	bf14      	ite	ne
 800a5fe:	2700      	movne	r7, #0
 800a600:	2706      	moveq	r7, #6
 800a602:	4638      	mov	r0, r7
 800a604:	b009      	add	sp, #36	; 0x24
 800a606:	ecbd 8b02 	vpop	{d8}
 800a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60e:	463e      	mov	r6, r7
 800a610:	4625      	mov	r5, r4
 800a612:	2401      	movs	r4, #1
 800a614:	e7ca      	b.n	800a5ac <__gethex+0xd4>
 800a616:	f04f 0900 	mov.w	r9, #0
 800a61a:	1cb1      	adds	r1, r6, #2
 800a61c:	e7d3      	b.n	800a5c6 <__gethex+0xee>
 800a61e:	f04f 0901 	mov.w	r9, #1
 800a622:	e7fa      	b.n	800a61a <__gethex+0x142>
 800a624:	230a      	movs	r3, #10
 800a626:	fb03 0202 	mla	r2, r3, r2, r0
 800a62a:	3a10      	subs	r2, #16
 800a62c:	e7d4      	b.n	800a5d8 <__gethex+0x100>
 800a62e:	4631      	mov	r1, r6
 800a630:	e7df      	b.n	800a5f2 <__gethex+0x11a>
 800a632:	1bf3      	subs	r3, r6, r7
 800a634:	3b01      	subs	r3, #1
 800a636:	4621      	mov	r1, r4
 800a638:	2b07      	cmp	r3, #7
 800a63a:	dc0b      	bgt.n	800a654 <__gethex+0x17c>
 800a63c:	ee18 0a10 	vmov	r0, s16
 800a640:	f000 fa90 	bl	800ab64 <_Balloc>
 800a644:	4604      	mov	r4, r0
 800a646:	b940      	cbnz	r0, 800a65a <__gethex+0x182>
 800a648:	4b65      	ldr	r3, [pc, #404]	; (800a7e0 <__gethex+0x308>)
 800a64a:	4602      	mov	r2, r0
 800a64c:	21de      	movs	r1, #222	; 0xde
 800a64e:	4865      	ldr	r0, [pc, #404]	; (800a7e4 <__gethex+0x30c>)
 800a650:	f001 fdb4 	bl	800c1bc <__assert_func>
 800a654:	3101      	adds	r1, #1
 800a656:	105b      	asrs	r3, r3, #1
 800a658:	e7ee      	b.n	800a638 <__gethex+0x160>
 800a65a:	f100 0914 	add.w	r9, r0, #20
 800a65e:	f04f 0b00 	mov.w	fp, #0
 800a662:	f1ca 0301 	rsb	r3, sl, #1
 800a666:	f8cd 9008 	str.w	r9, [sp, #8]
 800a66a:	f8cd b000 	str.w	fp, [sp]
 800a66e:	9306      	str	r3, [sp, #24]
 800a670:	42b7      	cmp	r7, r6
 800a672:	d340      	bcc.n	800a6f6 <__gethex+0x21e>
 800a674:	9802      	ldr	r0, [sp, #8]
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	f840 3b04 	str.w	r3, [r0], #4
 800a67c:	eba0 0009 	sub.w	r0, r0, r9
 800a680:	1080      	asrs	r0, r0, #2
 800a682:	0146      	lsls	r6, r0, #5
 800a684:	6120      	str	r0, [r4, #16]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fb62 	bl	800ad50 <__hi0bits>
 800a68c:	1a30      	subs	r0, r6, r0
 800a68e:	f8d8 6000 	ldr.w	r6, [r8]
 800a692:	42b0      	cmp	r0, r6
 800a694:	dd63      	ble.n	800a75e <__gethex+0x286>
 800a696:	1b87      	subs	r7, r0, r6
 800a698:	4639      	mov	r1, r7
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fefc 	bl	800b498 <__any_on>
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	b1a8      	cbz	r0, 800a6d0 <__gethex+0x1f8>
 800a6a4:	1e7b      	subs	r3, r7, #1
 800a6a6:	1159      	asrs	r1, r3, #5
 800a6a8:	f003 021f 	and.w	r2, r3, #31
 800a6ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6b0:	f04f 0a01 	mov.w	sl, #1
 800a6b4:	fa0a f202 	lsl.w	r2, sl, r2
 800a6b8:	420a      	tst	r2, r1
 800a6ba:	d009      	beq.n	800a6d0 <__gethex+0x1f8>
 800a6bc:	4553      	cmp	r3, sl
 800a6be:	dd05      	ble.n	800a6cc <__gethex+0x1f4>
 800a6c0:	1eb9      	subs	r1, r7, #2
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 fee8 	bl	800b498 <__any_on>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d145      	bne.n	800a758 <__gethex+0x280>
 800a6cc:	f04f 0a02 	mov.w	sl, #2
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff fe98 	bl	800a408 <rshift>
 800a6d8:	443d      	add	r5, r7
 800a6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	da4c      	bge.n	800a77c <__gethex+0x2a4>
 800a6e2:	ee18 0a10 	vmov	r0, s16
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	f000 fa7c 	bl	800abe4 <_Bfree>
 800a6ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	27a3      	movs	r7, #163	; 0xa3
 800a6f4:	e785      	b.n	800a602 <__gethex+0x12a>
 800a6f6:	1e73      	subs	r3, r6, #1
 800a6f8:	9a05      	ldr	r2, [sp, #20]
 800a6fa:	9303      	str	r3, [sp, #12]
 800a6fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a700:	4293      	cmp	r3, r2
 800a702:	d019      	beq.n	800a738 <__gethex+0x260>
 800a704:	f1bb 0f20 	cmp.w	fp, #32
 800a708:	d107      	bne.n	800a71a <__gethex+0x242>
 800a70a:	9b02      	ldr	r3, [sp, #8]
 800a70c:	9a00      	ldr	r2, [sp, #0]
 800a70e:	f843 2b04 	str.w	r2, [r3], #4
 800a712:	9302      	str	r3, [sp, #8]
 800a714:	2300      	movs	r3, #0
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	469b      	mov	fp, r3
 800a71a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a71e:	f7ff fec5 	bl	800a4ac <__hexdig_fun>
 800a722:	9b00      	ldr	r3, [sp, #0]
 800a724:	f000 000f 	and.w	r0, r0, #15
 800a728:	fa00 f00b 	lsl.w	r0, r0, fp
 800a72c:	4303      	orrs	r3, r0
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	f10b 0b04 	add.w	fp, fp, #4
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	e00d      	b.n	800a754 <__gethex+0x27c>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	9a06      	ldr	r2, [sp, #24]
 800a73c:	4413      	add	r3, r2
 800a73e:	42bb      	cmp	r3, r7
 800a740:	d3e0      	bcc.n	800a704 <__gethex+0x22c>
 800a742:	4618      	mov	r0, r3
 800a744:	9901      	ldr	r1, [sp, #4]
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	4652      	mov	r2, sl
 800a74a:	f001 fc5f 	bl	800c00c <strncmp>
 800a74e:	9b07      	ldr	r3, [sp, #28]
 800a750:	2800      	cmp	r0, #0
 800a752:	d1d7      	bne.n	800a704 <__gethex+0x22c>
 800a754:	461e      	mov	r6, r3
 800a756:	e78b      	b.n	800a670 <__gethex+0x198>
 800a758:	f04f 0a03 	mov.w	sl, #3
 800a75c:	e7b8      	b.n	800a6d0 <__gethex+0x1f8>
 800a75e:	da0a      	bge.n	800a776 <__gethex+0x29e>
 800a760:	1a37      	subs	r7, r6, r0
 800a762:	4621      	mov	r1, r4
 800a764:	ee18 0a10 	vmov	r0, s16
 800a768:	463a      	mov	r2, r7
 800a76a:	f000 fc57 	bl	800b01c <__lshift>
 800a76e:	1bed      	subs	r5, r5, r7
 800a770:	4604      	mov	r4, r0
 800a772:	f100 0914 	add.w	r9, r0, #20
 800a776:	f04f 0a00 	mov.w	sl, #0
 800a77a:	e7ae      	b.n	800a6da <__gethex+0x202>
 800a77c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a780:	42a8      	cmp	r0, r5
 800a782:	dd72      	ble.n	800a86a <__gethex+0x392>
 800a784:	1b45      	subs	r5, r0, r5
 800a786:	42ae      	cmp	r6, r5
 800a788:	dc36      	bgt.n	800a7f8 <__gethex+0x320>
 800a78a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d02a      	beq.n	800a7e8 <__gethex+0x310>
 800a792:	2b03      	cmp	r3, #3
 800a794:	d02c      	beq.n	800a7f0 <__gethex+0x318>
 800a796:	2b01      	cmp	r3, #1
 800a798:	d115      	bne.n	800a7c6 <__gethex+0x2ee>
 800a79a:	42ae      	cmp	r6, r5
 800a79c:	d113      	bne.n	800a7c6 <__gethex+0x2ee>
 800a79e:	2e01      	cmp	r6, #1
 800a7a0:	d10b      	bne.n	800a7ba <__gethex+0x2e2>
 800a7a2:	9a04      	ldr	r2, [sp, #16]
 800a7a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	f8c9 3000 	str.w	r3, [r9]
 800a7b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7b4:	2762      	movs	r7, #98	; 0x62
 800a7b6:	601c      	str	r4, [r3, #0]
 800a7b8:	e723      	b.n	800a602 <__gethex+0x12a>
 800a7ba:	1e71      	subs	r1, r6, #1
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fe6b 	bl	800b498 <__any_on>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d1ed      	bne.n	800a7a2 <__gethex+0x2ca>
 800a7c6:	ee18 0a10 	vmov	r0, s16
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	f000 fa0a 	bl	800abe4 <_Bfree>
 800a7d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	2750      	movs	r7, #80	; 0x50
 800a7d8:	e713      	b.n	800a602 <__gethex+0x12a>
 800a7da:	bf00      	nop
 800a7dc:	0800cf10 	.word	0x0800cf10
 800a7e0:	0800ce94 	.word	0x0800ce94
 800a7e4:	0800cea5 	.word	0x0800cea5
 800a7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1eb      	bne.n	800a7c6 <__gethex+0x2ee>
 800a7ee:	e7d8      	b.n	800a7a2 <__gethex+0x2ca>
 800a7f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1d5      	bne.n	800a7a2 <__gethex+0x2ca>
 800a7f6:	e7e6      	b.n	800a7c6 <__gethex+0x2ee>
 800a7f8:	1e6f      	subs	r7, r5, #1
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	d131      	bne.n	800a864 <__gethex+0x38c>
 800a800:	b127      	cbz	r7, 800a80c <__gethex+0x334>
 800a802:	4639      	mov	r1, r7
 800a804:	4620      	mov	r0, r4
 800a806:	f000 fe47 	bl	800b498 <__any_on>
 800a80a:	4682      	mov	sl, r0
 800a80c:	117b      	asrs	r3, r7, #5
 800a80e:	2101      	movs	r1, #1
 800a810:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a814:	f007 071f 	and.w	r7, r7, #31
 800a818:	fa01 f707 	lsl.w	r7, r1, r7
 800a81c:	421f      	tst	r7, r3
 800a81e:	4629      	mov	r1, r5
 800a820:	4620      	mov	r0, r4
 800a822:	bf18      	it	ne
 800a824:	f04a 0a02 	orrne.w	sl, sl, #2
 800a828:	1b76      	subs	r6, r6, r5
 800a82a:	f7ff fded 	bl	800a408 <rshift>
 800a82e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a832:	2702      	movs	r7, #2
 800a834:	f1ba 0f00 	cmp.w	sl, #0
 800a838:	d048      	beq.n	800a8cc <__gethex+0x3f4>
 800a83a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d015      	beq.n	800a86e <__gethex+0x396>
 800a842:	2b03      	cmp	r3, #3
 800a844:	d017      	beq.n	800a876 <__gethex+0x39e>
 800a846:	2b01      	cmp	r3, #1
 800a848:	d109      	bne.n	800a85e <__gethex+0x386>
 800a84a:	f01a 0f02 	tst.w	sl, #2
 800a84e:	d006      	beq.n	800a85e <__gethex+0x386>
 800a850:	f8d9 0000 	ldr.w	r0, [r9]
 800a854:	ea4a 0a00 	orr.w	sl, sl, r0
 800a858:	f01a 0f01 	tst.w	sl, #1
 800a85c:	d10e      	bne.n	800a87c <__gethex+0x3a4>
 800a85e:	f047 0710 	orr.w	r7, r7, #16
 800a862:	e033      	b.n	800a8cc <__gethex+0x3f4>
 800a864:	f04f 0a01 	mov.w	sl, #1
 800a868:	e7d0      	b.n	800a80c <__gethex+0x334>
 800a86a:	2701      	movs	r7, #1
 800a86c:	e7e2      	b.n	800a834 <__gethex+0x35c>
 800a86e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a870:	f1c3 0301 	rsb	r3, r3, #1
 800a874:	9315      	str	r3, [sp, #84]	; 0x54
 800a876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0f0      	beq.n	800a85e <__gethex+0x386>
 800a87c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a880:	f104 0314 	add.w	r3, r4, #20
 800a884:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a888:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a88c:	f04f 0c00 	mov.w	ip, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f853 2b04 	ldr.w	r2, [r3], #4
 800a896:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a89a:	d01c      	beq.n	800a8d6 <__gethex+0x3fe>
 800a89c:	3201      	adds	r2, #1
 800a89e:	6002      	str	r2, [r0, #0]
 800a8a0:	2f02      	cmp	r7, #2
 800a8a2:	f104 0314 	add.w	r3, r4, #20
 800a8a6:	d13f      	bne.n	800a928 <__gethex+0x450>
 800a8a8:	f8d8 2000 	ldr.w	r2, [r8]
 800a8ac:	3a01      	subs	r2, #1
 800a8ae:	42b2      	cmp	r2, r6
 800a8b0:	d10a      	bne.n	800a8c8 <__gethex+0x3f0>
 800a8b2:	1171      	asrs	r1, r6, #5
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8ba:	f006 061f 	and.w	r6, r6, #31
 800a8be:	fa02 f606 	lsl.w	r6, r2, r6
 800a8c2:	421e      	tst	r6, r3
 800a8c4:	bf18      	it	ne
 800a8c6:	4617      	movne	r7, r2
 800a8c8:	f047 0720 	orr.w	r7, r7, #32
 800a8cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8ce:	601c      	str	r4, [r3, #0]
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	601d      	str	r5, [r3, #0]
 800a8d4:	e695      	b.n	800a602 <__gethex+0x12a>
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8dc:	d8d8      	bhi.n	800a890 <__gethex+0x3b8>
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	459b      	cmp	fp, r3
 800a8e2:	db19      	blt.n	800a918 <__gethex+0x440>
 800a8e4:	6861      	ldr	r1, [r4, #4]
 800a8e6:	ee18 0a10 	vmov	r0, s16
 800a8ea:	3101      	adds	r1, #1
 800a8ec:	f000 f93a 	bl	800ab64 <_Balloc>
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	b918      	cbnz	r0, 800a8fc <__gethex+0x424>
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <__gethex+0x488>)
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	2184      	movs	r1, #132	; 0x84
 800a8fa:	e6a8      	b.n	800a64e <__gethex+0x176>
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	3202      	adds	r2, #2
 800a900:	f104 010c 	add.w	r1, r4, #12
 800a904:	0092      	lsls	r2, r2, #2
 800a906:	300c      	adds	r0, #12
 800a908:	f000 f91e 	bl	800ab48 <memcpy>
 800a90c:	4621      	mov	r1, r4
 800a90e:	ee18 0a10 	vmov	r0, s16
 800a912:	f000 f967 	bl	800abe4 <_Bfree>
 800a916:	464c      	mov	r4, r9
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a920:	6122      	str	r2, [r4, #16]
 800a922:	2201      	movs	r2, #1
 800a924:	615a      	str	r2, [r3, #20]
 800a926:	e7bb      	b.n	800a8a0 <__gethex+0x3c8>
 800a928:	6922      	ldr	r2, [r4, #16]
 800a92a:	455a      	cmp	r2, fp
 800a92c:	dd0b      	ble.n	800a946 <__gethex+0x46e>
 800a92e:	2101      	movs	r1, #1
 800a930:	4620      	mov	r0, r4
 800a932:	f7ff fd69 	bl	800a408 <rshift>
 800a936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a93a:	3501      	adds	r5, #1
 800a93c:	42ab      	cmp	r3, r5
 800a93e:	f6ff aed0 	blt.w	800a6e2 <__gethex+0x20a>
 800a942:	2701      	movs	r7, #1
 800a944:	e7c0      	b.n	800a8c8 <__gethex+0x3f0>
 800a946:	f016 061f 	ands.w	r6, r6, #31
 800a94a:	d0fa      	beq.n	800a942 <__gethex+0x46a>
 800a94c:	449a      	add	sl, r3
 800a94e:	f1c6 0620 	rsb	r6, r6, #32
 800a952:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a956:	f000 f9fb 	bl	800ad50 <__hi0bits>
 800a95a:	42b0      	cmp	r0, r6
 800a95c:	dbe7      	blt.n	800a92e <__gethex+0x456>
 800a95e:	e7f0      	b.n	800a942 <__gethex+0x46a>
 800a960:	0800ce94 	.word	0x0800ce94

0800a964 <L_shift>:
 800a964:	f1c2 0208 	rsb	r2, r2, #8
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	b570      	push	{r4, r5, r6, lr}
 800a96c:	f1c2 0620 	rsb	r6, r2, #32
 800a970:	6843      	ldr	r3, [r0, #4]
 800a972:	6804      	ldr	r4, [r0, #0]
 800a974:	fa03 f506 	lsl.w	r5, r3, r6
 800a978:	432c      	orrs	r4, r5
 800a97a:	40d3      	lsrs	r3, r2
 800a97c:	6004      	str	r4, [r0, #0]
 800a97e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a982:	4288      	cmp	r0, r1
 800a984:	d3f4      	bcc.n	800a970 <L_shift+0xc>
 800a986:	bd70      	pop	{r4, r5, r6, pc}

0800a988 <__match>:
 800a988:	b530      	push	{r4, r5, lr}
 800a98a:	6803      	ldr	r3, [r0, #0]
 800a98c:	3301      	adds	r3, #1
 800a98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a992:	b914      	cbnz	r4, 800a99a <__match+0x12>
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	2001      	movs	r0, #1
 800a998:	bd30      	pop	{r4, r5, pc}
 800a99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a99e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9a2:	2d19      	cmp	r5, #25
 800a9a4:	bf98      	it	ls
 800a9a6:	3220      	addls	r2, #32
 800a9a8:	42a2      	cmp	r2, r4
 800a9aa:	d0f0      	beq.n	800a98e <__match+0x6>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e7f3      	b.n	800a998 <__match+0x10>

0800a9b0 <__hexnan>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	680b      	ldr	r3, [r1, #0]
 800a9b6:	6801      	ldr	r1, [r0, #0]
 800a9b8:	115e      	asrs	r6, r3, #5
 800a9ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9be:	f013 031f 	ands.w	r3, r3, #31
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	bf18      	it	ne
 800a9c6:	3604      	addne	r6, #4
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	1f37      	subs	r7, r6, #4
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	4690      	mov	r8, r2
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9d6:	46b9      	mov	r9, r7
 800a9d8:	463c      	mov	r4, r7
 800a9da:	9502      	str	r5, [sp, #8]
 800a9dc:	46ab      	mov	fp, r5
 800a9de:	784a      	ldrb	r2, [r1, #1]
 800a9e0:	1c4b      	adds	r3, r1, #1
 800a9e2:	9303      	str	r3, [sp, #12]
 800a9e4:	b342      	cbz	r2, 800aa38 <__hexnan+0x88>
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	9204      	str	r2, [sp, #16]
 800a9ec:	f7ff fd5e 	bl	800a4ac <__hexdig_fun>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d14f      	bne.n	800aa94 <__hexnan+0xe4>
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	9905      	ldr	r1, [sp, #20]
 800a9f8:	2a20      	cmp	r2, #32
 800a9fa:	d818      	bhi.n	800aa2e <__hexnan+0x7e>
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	459b      	cmp	fp, r3
 800aa00:	dd13      	ble.n	800aa2a <__hexnan+0x7a>
 800aa02:	454c      	cmp	r4, r9
 800aa04:	d206      	bcs.n	800aa14 <__hexnan+0x64>
 800aa06:	2d07      	cmp	r5, #7
 800aa08:	dc04      	bgt.n	800aa14 <__hexnan+0x64>
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff ffa8 	bl	800a964 <L_shift>
 800aa14:	4544      	cmp	r4, r8
 800aa16:	d950      	bls.n	800aaba <__hexnan+0x10a>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa22:	f8cd b008 	str.w	fp, [sp, #8]
 800aa26:	464c      	mov	r4, r9
 800aa28:	461d      	mov	r5, r3
 800aa2a:	9903      	ldr	r1, [sp, #12]
 800aa2c:	e7d7      	b.n	800a9de <__hexnan+0x2e>
 800aa2e:	2a29      	cmp	r2, #41	; 0x29
 800aa30:	d156      	bne.n	800aae0 <__hexnan+0x130>
 800aa32:	3102      	adds	r1, #2
 800aa34:	f8ca 1000 	str.w	r1, [sl]
 800aa38:	f1bb 0f00 	cmp.w	fp, #0
 800aa3c:	d050      	beq.n	800aae0 <__hexnan+0x130>
 800aa3e:	454c      	cmp	r4, r9
 800aa40:	d206      	bcs.n	800aa50 <__hexnan+0xa0>
 800aa42:	2d07      	cmp	r5, #7
 800aa44:	dc04      	bgt.n	800aa50 <__hexnan+0xa0>
 800aa46:	462a      	mov	r2, r5
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff ff8a 	bl	800a964 <L_shift>
 800aa50:	4544      	cmp	r4, r8
 800aa52:	d934      	bls.n	800aabe <__hexnan+0x10e>
 800aa54:	f1a8 0204 	sub.w	r2, r8, #4
 800aa58:	4623      	mov	r3, r4
 800aa5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa62:	429f      	cmp	r7, r3
 800aa64:	d2f9      	bcs.n	800aa5a <__hexnan+0xaa>
 800aa66:	1b3b      	subs	r3, r7, r4
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	3401      	adds	r4, #1
 800aa70:	3e03      	subs	r6, #3
 800aa72:	42b4      	cmp	r4, r6
 800aa74:	bf88      	it	hi
 800aa76:	2304      	movhi	r3, #4
 800aa78:	4443      	add	r3, r8
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f843 2b04 	str.w	r2, [r3], #4
 800aa80:	429f      	cmp	r7, r3
 800aa82:	d2fb      	bcs.n	800aa7c <__hexnan+0xcc>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	b91b      	cbnz	r3, 800aa90 <__hexnan+0xe0>
 800aa88:	4547      	cmp	r7, r8
 800aa8a:	d127      	bne.n	800aadc <__hexnan+0x12c>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	2005      	movs	r0, #5
 800aa92:	e026      	b.n	800aae2 <__hexnan+0x132>
 800aa94:	3501      	adds	r5, #1
 800aa96:	2d08      	cmp	r5, #8
 800aa98:	f10b 0b01 	add.w	fp, fp, #1
 800aa9c:	dd06      	ble.n	800aaac <__hexnan+0xfc>
 800aa9e:	4544      	cmp	r4, r8
 800aaa0:	d9c3      	bls.n	800aa2a <__hexnan+0x7a>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaa8:	2501      	movs	r5, #1
 800aaaa:	3c04      	subs	r4, #4
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	f000 000f 	and.w	r0, r0, #15
 800aab2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	e7b7      	b.n	800aa2a <__hexnan+0x7a>
 800aaba:	2508      	movs	r5, #8
 800aabc:	e7b5      	b.n	800aa2a <__hexnan+0x7a>
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0df      	beq.n	800aa84 <__hexnan+0xd4>
 800aac4:	f04f 32ff 	mov.w	r2, #4294967295
 800aac8:	f1c3 0320 	rsb	r3, r3, #32
 800aacc:	fa22 f303 	lsr.w	r3, r2, r3
 800aad0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aad4:	401a      	ands	r2, r3
 800aad6:	f846 2c04 	str.w	r2, [r6, #-4]
 800aada:	e7d3      	b.n	800aa84 <__hexnan+0xd4>
 800aadc:	3f04      	subs	r7, #4
 800aade:	e7d1      	b.n	800aa84 <__hexnan+0xd4>
 800aae0:	2004      	movs	r0, #4
 800aae2:	b007      	add	sp, #28
 800aae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aae8 <_localeconv_r>:
 800aae8:	4800      	ldr	r0, [pc, #0]	; (800aaec <_localeconv_r+0x4>)
 800aaea:	4770      	bx	lr
 800aaec:	20000180 	.word	0x20000180

0800aaf0 <_lseek_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_lseek_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f7 ff2c 	bl	800295c <_lseek>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_lseek_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_lseek_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000820 	.word	0x20000820

0800ab14 <malloc>:
 800ab14:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <malloc+0xc>)
 800ab16:	4601      	mov	r1, r0
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f000 bd3d 	b.w	800b598 <_malloc_r>
 800ab1e:	bf00      	nop
 800ab20:	20000028 	.word	0x20000028

0800ab24 <__ascii_mbtowc>:
 800ab24:	b082      	sub	sp, #8
 800ab26:	b901      	cbnz	r1, 800ab2a <__ascii_mbtowc+0x6>
 800ab28:	a901      	add	r1, sp, #4
 800ab2a:	b142      	cbz	r2, 800ab3e <__ascii_mbtowc+0x1a>
 800ab2c:	b14b      	cbz	r3, 800ab42 <__ascii_mbtowc+0x1e>
 800ab2e:	7813      	ldrb	r3, [r2, #0]
 800ab30:	600b      	str	r3, [r1, #0]
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	1e10      	subs	r0, r2, #0
 800ab36:	bf18      	it	ne
 800ab38:	2001      	movne	r0, #1
 800ab3a:	b002      	add	sp, #8
 800ab3c:	4770      	bx	lr
 800ab3e:	4610      	mov	r0, r2
 800ab40:	e7fb      	b.n	800ab3a <__ascii_mbtowc+0x16>
 800ab42:	f06f 0001 	mvn.w	r0, #1
 800ab46:	e7f8      	b.n	800ab3a <__ascii_mbtowc+0x16>

0800ab48 <memcpy>:
 800ab48:	440a      	add	r2, r1
 800ab4a:	4291      	cmp	r1, r2
 800ab4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab50:	d100      	bne.n	800ab54 <memcpy+0xc>
 800ab52:	4770      	bx	lr
 800ab54:	b510      	push	{r4, lr}
 800ab56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab5e:	4291      	cmp	r1, r2
 800ab60:	d1f9      	bne.n	800ab56 <memcpy+0xe>
 800ab62:	bd10      	pop	{r4, pc}

0800ab64 <_Balloc>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	b976      	cbnz	r6, 800ab8c <_Balloc+0x28>
 800ab6e:	2010      	movs	r0, #16
 800ab70:	f7ff ffd0 	bl	800ab14 <malloc>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6260      	str	r0, [r4, #36]	; 0x24
 800ab78:	b920      	cbnz	r0, 800ab84 <_Balloc+0x20>
 800ab7a:	4b18      	ldr	r3, [pc, #96]	; (800abdc <_Balloc+0x78>)
 800ab7c:	4818      	ldr	r0, [pc, #96]	; (800abe0 <_Balloc+0x7c>)
 800ab7e:	2166      	movs	r1, #102	; 0x66
 800ab80:	f001 fb1c 	bl	800c1bc <__assert_func>
 800ab84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab88:	6006      	str	r6, [r0, #0]
 800ab8a:	60c6      	str	r6, [r0, #12]
 800ab8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab8e:	68f3      	ldr	r3, [r6, #12]
 800ab90:	b183      	cbz	r3, 800abb4 <_Balloc+0x50>
 800ab92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab9a:	b9b8      	cbnz	r0, 800abcc <_Balloc+0x68>
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	fa01 f605 	lsl.w	r6, r1, r5
 800aba2:	1d72      	adds	r2, r6, #5
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fc97 	bl	800b4da <_calloc_r>
 800abac:	b160      	cbz	r0, 800abc8 <_Balloc+0x64>
 800abae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abb2:	e00e      	b.n	800abd2 <_Balloc+0x6e>
 800abb4:	2221      	movs	r2, #33	; 0x21
 800abb6:	2104      	movs	r1, #4
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fc8e 	bl	800b4da <_calloc_r>
 800abbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc0:	60f0      	str	r0, [r6, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e4      	bne.n	800ab92 <_Balloc+0x2e>
 800abc8:	2000      	movs	r0, #0
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	6802      	ldr	r2, [r0, #0]
 800abce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abd2:	2300      	movs	r3, #0
 800abd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abd8:	e7f7      	b.n	800abca <_Balloc+0x66>
 800abda:	bf00      	nop
 800abdc:	0800ce1e 	.word	0x0800ce1e
 800abe0:	0800cf24 	.word	0x0800cf24

0800abe4 <_Bfree>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abe8:	4605      	mov	r5, r0
 800abea:	460c      	mov	r4, r1
 800abec:	b976      	cbnz	r6, 800ac0c <_Bfree+0x28>
 800abee:	2010      	movs	r0, #16
 800abf0:	f7ff ff90 	bl	800ab14 <malloc>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6268      	str	r0, [r5, #36]	; 0x24
 800abf8:	b920      	cbnz	r0, 800ac04 <_Bfree+0x20>
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <_Bfree+0x3c>)
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <_Bfree+0x40>)
 800abfe:	218a      	movs	r1, #138	; 0x8a
 800ac00:	f001 fadc 	bl	800c1bc <__assert_func>
 800ac04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac08:	6006      	str	r6, [r0, #0]
 800ac0a:	60c6      	str	r6, [r0, #12]
 800ac0c:	b13c      	cbz	r4, 800ac1e <_Bfree+0x3a>
 800ac0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac10:	6862      	ldr	r2, [r4, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac18:	6021      	str	r1, [r4, #0]
 800ac1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	0800ce1e 	.word	0x0800ce1e
 800ac24:	0800cf24 	.word	0x0800cf24

0800ac28 <__multadd>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	690e      	ldr	r6, [r1, #16]
 800ac2e:	4607      	mov	r7, r0
 800ac30:	4698      	mov	r8, r3
 800ac32:	460c      	mov	r4, r1
 800ac34:	f101 0014 	add.w	r0, r1, #20
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6805      	ldr	r5, [r0, #0]
 800ac3c:	b2a9      	uxth	r1, r5
 800ac3e:	fb02 8101 	mla	r1, r2, r1, r8
 800ac42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ac46:	0c2d      	lsrs	r5, r5, #16
 800ac48:	fb02 c505 	mla	r5, r2, r5, ip
 800ac4c:	b289      	uxth	r1, r1
 800ac4e:	3301      	adds	r3, #1
 800ac50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ac54:	429e      	cmp	r6, r3
 800ac56:	f840 1b04 	str.w	r1, [r0], #4
 800ac5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ac5e:	dcec      	bgt.n	800ac3a <__multadd+0x12>
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	d022      	beq.n	800acac <__multadd+0x84>
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	42b3      	cmp	r3, r6
 800ac6a:	dc19      	bgt.n	800aca0 <__multadd+0x78>
 800ac6c:	6861      	ldr	r1, [r4, #4]
 800ac6e:	4638      	mov	r0, r7
 800ac70:	3101      	adds	r1, #1
 800ac72:	f7ff ff77 	bl	800ab64 <_Balloc>
 800ac76:	4605      	mov	r5, r0
 800ac78:	b928      	cbnz	r0, 800ac86 <__multadd+0x5e>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <__multadd+0x8c>)
 800ac7e:	480e      	ldr	r0, [pc, #56]	; (800acb8 <__multadd+0x90>)
 800ac80:	21b5      	movs	r1, #181	; 0xb5
 800ac82:	f001 fa9b 	bl	800c1bc <__assert_func>
 800ac86:	6922      	ldr	r2, [r4, #16]
 800ac88:	3202      	adds	r2, #2
 800ac8a:	f104 010c 	add.w	r1, r4, #12
 800ac8e:	0092      	lsls	r2, r2, #2
 800ac90:	300c      	adds	r0, #12
 800ac92:	f7ff ff59 	bl	800ab48 <memcpy>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4638      	mov	r0, r7
 800ac9a:	f7ff ffa3 	bl	800abe4 <_Bfree>
 800ac9e:	462c      	mov	r4, r5
 800aca0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aca4:	3601      	adds	r6, #1
 800aca6:	f8c3 8014 	str.w	r8, [r3, #20]
 800acaa:	6126      	str	r6, [r4, #16]
 800acac:	4620      	mov	r0, r4
 800acae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb2:	bf00      	nop
 800acb4:	0800ce94 	.word	0x0800ce94
 800acb8:	0800cf24 	.word	0x0800cf24

0800acbc <__s2b>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	460c      	mov	r4, r1
 800acc2:	4615      	mov	r5, r2
 800acc4:	461f      	mov	r7, r3
 800acc6:	2209      	movs	r2, #9
 800acc8:	3308      	adds	r3, #8
 800acca:	4606      	mov	r6, r0
 800accc:	fb93 f3f2 	sdiv	r3, r3, r2
 800acd0:	2100      	movs	r1, #0
 800acd2:	2201      	movs	r2, #1
 800acd4:	429a      	cmp	r2, r3
 800acd6:	db09      	blt.n	800acec <__s2b+0x30>
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ff43 	bl	800ab64 <_Balloc>
 800acde:	b940      	cbnz	r0, 800acf2 <__s2b+0x36>
 800ace0:	4602      	mov	r2, r0
 800ace2:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <__s2b+0x8c>)
 800ace4:	4819      	ldr	r0, [pc, #100]	; (800ad4c <__s2b+0x90>)
 800ace6:	21ce      	movs	r1, #206	; 0xce
 800ace8:	f001 fa68 	bl	800c1bc <__assert_func>
 800acec:	0052      	lsls	r2, r2, #1
 800acee:	3101      	adds	r1, #1
 800acf0:	e7f0      	b.n	800acd4 <__s2b+0x18>
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	6143      	str	r3, [r0, #20]
 800acf6:	2d09      	cmp	r5, #9
 800acf8:	f04f 0301 	mov.w	r3, #1
 800acfc:	6103      	str	r3, [r0, #16]
 800acfe:	dd16      	ble.n	800ad2e <__s2b+0x72>
 800ad00:	f104 0909 	add.w	r9, r4, #9
 800ad04:	46c8      	mov	r8, r9
 800ad06:	442c      	add	r4, r5
 800ad08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	3b30      	subs	r3, #48	; 0x30
 800ad10:	220a      	movs	r2, #10
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7ff ff88 	bl	800ac28 <__multadd>
 800ad18:	45a0      	cmp	r8, r4
 800ad1a:	d1f5      	bne.n	800ad08 <__s2b+0x4c>
 800ad1c:	f1a5 0408 	sub.w	r4, r5, #8
 800ad20:	444c      	add	r4, r9
 800ad22:	1b2d      	subs	r5, r5, r4
 800ad24:	1963      	adds	r3, r4, r5
 800ad26:	42bb      	cmp	r3, r7
 800ad28:	db04      	blt.n	800ad34 <__s2b+0x78>
 800ad2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2e:	340a      	adds	r4, #10
 800ad30:	2509      	movs	r5, #9
 800ad32:	e7f6      	b.n	800ad22 <__s2b+0x66>
 800ad34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad38:	4601      	mov	r1, r0
 800ad3a:	3b30      	subs	r3, #48	; 0x30
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff ff72 	bl	800ac28 <__multadd>
 800ad44:	e7ee      	b.n	800ad24 <__s2b+0x68>
 800ad46:	bf00      	nop
 800ad48:	0800ce94 	.word	0x0800ce94
 800ad4c:	0800cf24 	.word	0x0800cf24

0800ad50 <__hi0bits>:
 800ad50:	0c03      	lsrs	r3, r0, #16
 800ad52:	041b      	lsls	r3, r3, #16
 800ad54:	b9d3      	cbnz	r3, 800ad8c <__hi0bits+0x3c>
 800ad56:	0400      	lsls	r0, r0, #16
 800ad58:	2310      	movs	r3, #16
 800ad5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad5e:	bf04      	itt	eq
 800ad60:	0200      	lsleq	r0, r0, #8
 800ad62:	3308      	addeq	r3, #8
 800ad64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad68:	bf04      	itt	eq
 800ad6a:	0100      	lsleq	r0, r0, #4
 800ad6c:	3304      	addeq	r3, #4
 800ad6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad72:	bf04      	itt	eq
 800ad74:	0080      	lsleq	r0, r0, #2
 800ad76:	3302      	addeq	r3, #2
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	db05      	blt.n	800ad88 <__hi0bits+0x38>
 800ad7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad80:	f103 0301 	add.w	r3, r3, #1
 800ad84:	bf08      	it	eq
 800ad86:	2320      	moveq	r3, #32
 800ad88:	4618      	mov	r0, r3
 800ad8a:	4770      	bx	lr
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e7e4      	b.n	800ad5a <__hi0bits+0xa>

0800ad90 <__lo0bits>:
 800ad90:	6803      	ldr	r3, [r0, #0]
 800ad92:	f013 0207 	ands.w	r2, r3, #7
 800ad96:	4601      	mov	r1, r0
 800ad98:	d00b      	beq.n	800adb2 <__lo0bits+0x22>
 800ad9a:	07da      	lsls	r2, r3, #31
 800ad9c:	d424      	bmi.n	800ade8 <__lo0bits+0x58>
 800ad9e:	0798      	lsls	r0, r3, #30
 800ada0:	bf49      	itett	mi
 800ada2:	085b      	lsrmi	r3, r3, #1
 800ada4:	089b      	lsrpl	r3, r3, #2
 800ada6:	2001      	movmi	r0, #1
 800ada8:	600b      	strmi	r3, [r1, #0]
 800adaa:	bf5c      	itt	pl
 800adac:	600b      	strpl	r3, [r1, #0]
 800adae:	2002      	movpl	r0, #2
 800adb0:	4770      	bx	lr
 800adb2:	b298      	uxth	r0, r3
 800adb4:	b9b0      	cbnz	r0, 800ade4 <__lo0bits+0x54>
 800adb6:	0c1b      	lsrs	r3, r3, #16
 800adb8:	2010      	movs	r0, #16
 800adba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adbe:	bf04      	itt	eq
 800adc0:	0a1b      	lsreq	r3, r3, #8
 800adc2:	3008      	addeq	r0, #8
 800adc4:	071a      	lsls	r2, r3, #28
 800adc6:	bf04      	itt	eq
 800adc8:	091b      	lsreq	r3, r3, #4
 800adca:	3004      	addeq	r0, #4
 800adcc:	079a      	lsls	r2, r3, #30
 800adce:	bf04      	itt	eq
 800add0:	089b      	lsreq	r3, r3, #2
 800add2:	3002      	addeq	r0, #2
 800add4:	07da      	lsls	r2, r3, #31
 800add6:	d403      	bmi.n	800ade0 <__lo0bits+0x50>
 800add8:	085b      	lsrs	r3, r3, #1
 800adda:	f100 0001 	add.w	r0, r0, #1
 800adde:	d005      	beq.n	800adec <__lo0bits+0x5c>
 800ade0:	600b      	str	r3, [r1, #0]
 800ade2:	4770      	bx	lr
 800ade4:	4610      	mov	r0, r2
 800ade6:	e7e8      	b.n	800adba <__lo0bits+0x2a>
 800ade8:	2000      	movs	r0, #0
 800adea:	4770      	bx	lr
 800adec:	2020      	movs	r0, #32
 800adee:	4770      	bx	lr

0800adf0 <__i2b>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	2101      	movs	r1, #1
 800adf6:	f7ff feb5 	bl	800ab64 <_Balloc>
 800adfa:	4602      	mov	r2, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <__i2b+0x1a>
 800adfe:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <__i2b+0x24>)
 800ae00:	4805      	ldr	r0, [pc, #20]	; (800ae18 <__i2b+0x28>)
 800ae02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae06:	f001 f9d9 	bl	800c1bc <__assert_func>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	6144      	str	r4, [r0, #20]
 800ae0e:	6103      	str	r3, [r0, #16]
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	bf00      	nop
 800ae14:	0800ce94 	.word	0x0800ce94
 800ae18:	0800cf24 	.word	0x0800cf24

0800ae1c <__multiply>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4614      	mov	r4, r2
 800ae22:	690a      	ldr	r2, [r1, #16]
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	bfb8      	it	lt
 800ae2a:	460b      	movlt	r3, r1
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	bfbc      	itt	lt
 800ae30:	4625      	movlt	r5, r4
 800ae32:	461c      	movlt	r4, r3
 800ae34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ae38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae3c:	68ab      	ldr	r3, [r5, #8]
 800ae3e:	6869      	ldr	r1, [r5, #4]
 800ae40:	eb0a 0709 	add.w	r7, sl, r9
 800ae44:	42bb      	cmp	r3, r7
 800ae46:	b085      	sub	sp, #20
 800ae48:	bfb8      	it	lt
 800ae4a:	3101      	addlt	r1, #1
 800ae4c:	f7ff fe8a 	bl	800ab64 <_Balloc>
 800ae50:	b930      	cbnz	r0, 800ae60 <__multiply+0x44>
 800ae52:	4602      	mov	r2, r0
 800ae54:	4b42      	ldr	r3, [pc, #264]	; (800af60 <__multiply+0x144>)
 800ae56:	4843      	ldr	r0, [pc, #268]	; (800af64 <__multiply+0x148>)
 800ae58:	f240 115d 	movw	r1, #349	; 0x15d
 800ae5c:	f001 f9ae 	bl	800c1bc <__assert_func>
 800ae60:	f100 0614 	add.w	r6, r0, #20
 800ae64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae68:	4633      	mov	r3, r6
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	d31e      	bcc.n	800aeae <__multiply+0x92>
 800ae70:	f105 0c14 	add.w	ip, r5, #20
 800ae74:	f104 0314 	add.w	r3, r4, #20
 800ae78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae80:	9202      	str	r2, [sp, #8]
 800ae82:	ebac 0205 	sub.w	r2, ip, r5
 800ae86:	3a15      	subs	r2, #21
 800ae88:	f022 0203 	bic.w	r2, r2, #3
 800ae8c:	3204      	adds	r2, #4
 800ae8e:	f105 0115 	add.w	r1, r5, #21
 800ae92:	458c      	cmp	ip, r1
 800ae94:	bf38      	it	cc
 800ae96:	2204      	movcc	r2, #4
 800ae98:	9201      	str	r2, [sp, #4]
 800ae9a:	9a02      	ldr	r2, [sp, #8]
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d808      	bhi.n	800aeb4 <__multiply+0x98>
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	dc55      	bgt.n	800af52 <__multiply+0x136>
 800aea6:	6107      	str	r7, [r0, #16]
 800aea8:	b005      	add	sp, #20
 800aeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeae:	f843 2b04 	str.w	r2, [r3], #4
 800aeb2:	e7db      	b.n	800ae6c <__multiply+0x50>
 800aeb4:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeb8:	f1ba 0f00 	cmp.w	sl, #0
 800aebc:	d020      	beq.n	800af00 <__multiply+0xe4>
 800aebe:	f105 0e14 	add.w	lr, r5, #20
 800aec2:	46b1      	mov	r9, r6
 800aec4:	2200      	movs	r2, #0
 800aec6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aeca:	f8d9 b000 	ldr.w	fp, [r9]
 800aece:	b2a1      	uxth	r1, r4
 800aed0:	fa1f fb8b 	uxth.w	fp, fp
 800aed4:	fb0a b101 	mla	r1, sl, r1, fp
 800aed8:	4411      	add	r1, r2
 800aeda:	f8d9 2000 	ldr.w	r2, [r9]
 800aede:	0c24      	lsrs	r4, r4, #16
 800aee0:	0c12      	lsrs	r2, r2, #16
 800aee2:	fb0a 2404 	mla	r4, sl, r4, r2
 800aee6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aeea:	b289      	uxth	r1, r1
 800aeec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aef0:	45f4      	cmp	ip, lr
 800aef2:	f849 1b04 	str.w	r1, [r9], #4
 800aef6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aefa:	d8e4      	bhi.n	800aec6 <__multiply+0xaa>
 800aefc:	9901      	ldr	r1, [sp, #4]
 800aefe:	5072      	str	r2, [r6, r1]
 800af00:	9a03      	ldr	r2, [sp, #12]
 800af02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af06:	3304      	adds	r3, #4
 800af08:	f1b9 0f00 	cmp.w	r9, #0
 800af0c:	d01f      	beq.n	800af4e <__multiply+0x132>
 800af0e:	6834      	ldr	r4, [r6, #0]
 800af10:	f105 0114 	add.w	r1, r5, #20
 800af14:	46b6      	mov	lr, r6
 800af16:	f04f 0a00 	mov.w	sl, #0
 800af1a:	880a      	ldrh	r2, [r1, #0]
 800af1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af20:	fb09 b202 	mla	r2, r9, r2, fp
 800af24:	4492      	add	sl, r2
 800af26:	b2a4      	uxth	r4, r4
 800af28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800af2c:	f84e 4b04 	str.w	r4, [lr], #4
 800af30:	f851 4b04 	ldr.w	r4, [r1], #4
 800af34:	f8be 2000 	ldrh.w	r2, [lr]
 800af38:	0c24      	lsrs	r4, r4, #16
 800af3a:	fb09 2404 	mla	r4, r9, r4, r2
 800af3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800af42:	458c      	cmp	ip, r1
 800af44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af48:	d8e7      	bhi.n	800af1a <__multiply+0xfe>
 800af4a:	9a01      	ldr	r2, [sp, #4]
 800af4c:	50b4      	str	r4, [r6, r2]
 800af4e:	3604      	adds	r6, #4
 800af50:	e7a3      	b.n	800ae9a <__multiply+0x7e>
 800af52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1a5      	bne.n	800aea6 <__multiply+0x8a>
 800af5a:	3f01      	subs	r7, #1
 800af5c:	e7a1      	b.n	800aea2 <__multiply+0x86>
 800af5e:	bf00      	nop
 800af60:	0800ce94 	.word	0x0800ce94
 800af64:	0800cf24 	.word	0x0800cf24

0800af68 <__pow5mult>:
 800af68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af6c:	4615      	mov	r5, r2
 800af6e:	f012 0203 	ands.w	r2, r2, #3
 800af72:	4606      	mov	r6, r0
 800af74:	460f      	mov	r7, r1
 800af76:	d007      	beq.n	800af88 <__pow5mult+0x20>
 800af78:	4c25      	ldr	r4, [pc, #148]	; (800b010 <__pow5mult+0xa8>)
 800af7a:	3a01      	subs	r2, #1
 800af7c:	2300      	movs	r3, #0
 800af7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af82:	f7ff fe51 	bl	800ac28 <__multadd>
 800af86:	4607      	mov	r7, r0
 800af88:	10ad      	asrs	r5, r5, #2
 800af8a:	d03d      	beq.n	800b008 <__pow5mult+0xa0>
 800af8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af8e:	b97c      	cbnz	r4, 800afb0 <__pow5mult+0x48>
 800af90:	2010      	movs	r0, #16
 800af92:	f7ff fdbf 	bl	800ab14 <malloc>
 800af96:	4602      	mov	r2, r0
 800af98:	6270      	str	r0, [r6, #36]	; 0x24
 800af9a:	b928      	cbnz	r0, 800afa8 <__pow5mult+0x40>
 800af9c:	4b1d      	ldr	r3, [pc, #116]	; (800b014 <__pow5mult+0xac>)
 800af9e:	481e      	ldr	r0, [pc, #120]	; (800b018 <__pow5mult+0xb0>)
 800afa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afa4:	f001 f90a 	bl	800c1bc <__assert_func>
 800afa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afac:	6004      	str	r4, [r0, #0]
 800afae:	60c4      	str	r4, [r0, #12]
 800afb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afb8:	b94c      	cbnz	r4, 800afce <__pow5mult+0x66>
 800afba:	f240 2171 	movw	r1, #625	; 0x271
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7ff ff16 	bl	800adf0 <__i2b>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afca:	4604      	mov	r4, r0
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	f04f 0900 	mov.w	r9, #0
 800afd2:	07eb      	lsls	r3, r5, #31
 800afd4:	d50a      	bpl.n	800afec <__pow5mult+0x84>
 800afd6:	4639      	mov	r1, r7
 800afd8:	4622      	mov	r2, r4
 800afda:	4630      	mov	r0, r6
 800afdc:	f7ff ff1e 	bl	800ae1c <__multiply>
 800afe0:	4639      	mov	r1, r7
 800afe2:	4680      	mov	r8, r0
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7ff fdfd 	bl	800abe4 <_Bfree>
 800afea:	4647      	mov	r7, r8
 800afec:	106d      	asrs	r5, r5, #1
 800afee:	d00b      	beq.n	800b008 <__pow5mult+0xa0>
 800aff0:	6820      	ldr	r0, [r4, #0]
 800aff2:	b938      	cbnz	r0, 800b004 <__pow5mult+0x9c>
 800aff4:	4622      	mov	r2, r4
 800aff6:	4621      	mov	r1, r4
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff ff0f 	bl	800ae1c <__multiply>
 800affe:	6020      	str	r0, [r4, #0]
 800b000:	f8c0 9000 	str.w	r9, [r0]
 800b004:	4604      	mov	r4, r0
 800b006:	e7e4      	b.n	800afd2 <__pow5mult+0x6a>
 800b008:	4638      	mov	r0, r7
 800b00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00e:	bf00      	nop
 800b010:	0800d078 	.word	0x0800d078
 800b014:	0800ce1e 	.word	0x0800ce1e
 800b018:	0800cf24 	.word	0x0800cf24

0800b01c <__lshift>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	460c      	mov	r4, r1
 800b022:	6849      	ldr	r1, [r1, #4]
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	4607      	mov	r7, r0
 800b02e:	4691      	mov	r9, r2
 800b030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b034:	f108 0601 	add.w	r6, r8, #1
 800b038:	42b3      	cmp	r3, r6
 800b03a:	db0b      	blt.n	800b054 <__lshift+0x38>
 800b03c:	4638      	mov	r0, r7
 800b03e:	f7ff fd91 	bl	800ab64 <_Balloc>
 800b042:	4605      	mov	r5, r0
 800b044:	b948      	cbnz	r0, 800b05a <__lshift+0x3e>
 800b046:	4602      	mov	r2, r0
 800b048:	4b28      	ldr	r3, [pc, #160]	; (800b0ec <__lshift+0xd0>)
 800b04a:	4829      	ldr	r0, [pc, #164]	; (800b0f0 <__lshift+0xd4>)
 800b04c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b050:	f001 f8b4 	bl	800c1bc <__assert_func>
 800b054:	3101      	adds	r1, #1
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	e7ee      	b.n	800b038 <__lshift+0x1c>
 800b05a:	2300      	movs	r3, #0
 800b05c:	f100 0114 	add.w	r1, r0, #20
 800b060:	f100 0210 	add.w	r2, r0, #16
 800b064:	4618      	mov	r0, r3
 800b066:	4553      	cmp	r3, sl
 800b068:	db33      	blt.n	800b0d2 <__lshift+0xb6>
 800b06a:	6920      	ldr	r0, [r4, #16]
 800b06c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b070:	f104 0314 	add.w	r3, r4, #20
 800b074:	f019 091f 	ands.w	r9, r9, #31
 800b078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b07c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b080:	d02b      	beq.n	800b0da <__lshift+0xbe>
 800b082:	f1c9 0e20 	rsb	lr, r9, #32
 800b086:	468a      	mov	sl, r1
 800b088:	2200      	movs	r2, #0
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	fa00 f009 	lsl.w	r0, r0, r9
 800b090:	4302      	orrs	r2, r0
 800b092:	f84a 2b04 	str.w	r2, [sl], #4
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	459c      	cmp	ip, r3
 800b09c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0a0:	d8f3      	bhi.n	800b08a <__lshift+0x6e>
 800b0a2:	ebac 0304 	sub.w	r3, ip, r4
 800b0a6:	3b15      	subs	r3, #21
 800b0a8:	f023 0303 	bic.w	r3, r3, #3
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	f104 0015 	add.w	r0, r4, #21
 800b0b2:	4584      	cmp	ip, r0
 800b0b4:	bf38      	it	cc
 800b0b6:	2304      	movcc	r3, #4
 800b0b8:	50ca      	str	r2, [r1, r3]
 800b0ba:	b10a      	cbz	r2, 800b0c0 <__lshift+0xa4>
 800b0bc:	f108 0602 	add.w	r6, r8, #2
 800b0c0:	3e01      	subs	r6, #1
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	612e      	str	r6, [r5, #16]
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	f7ff fd8c 	bl	800abe4 <_Bfree>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	e7c5      	b.n	800b066 <__lshift+0x4a>
 800b0da:	3904      	subs	r1, #4
 800b0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0e4:	459c      	cmp	ip, r3
 800b0e6:	d8f9      	bhi.n	800b0dc <__lshift+0xc0>
 800b0e8:	e7ea      	b.n	800b0c0 <__lshift+0xa4>
 800b0ea:	bf00      	nop
 800b0ec:	0800ce94 	.word	0x0800ce94
 800b0f0:	0800cf24 	.word	0x0800cf24

0800b0f4 <__mcmp>:
 800b0f4:	b530      	push	{r4, r5, lr}
 800b0f6:	6902      	ldr	r2, [r0, #16]
 800b0f8:	690c      	ldr	r4, [r1, #16]
 800b0fa:	1b12      	subs	r2, r2, r4
 800b0fc:	d10e      	bne.n	800b11c <__mcmp+0x28>
 800b0fe:	f100 0314 	add.w	r3, r0, #20
 800b102:	3114      	adds	r1, #20
 800b104:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b108:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b10c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b110:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b114:	42a5      	cmp	r5, r4
 800b116:	d003      	beq.n	800b120 <__mcmp+0x2c>
 800b118:	d305      	bcc.n	800b126 <__mcmp+0x32>
 800b11a:	2201      	movs	r2, #1
 800b11c:	4610      	mov	r0, r2
 800b11e:	bd30      	pop	{r4, r5, pc}
 800b120:	4283      	cmp	r3, r0
 800b122:	d3f3      	bcc.n	800b10c <__mcmp+0x18>
 800b124:	e7fa      	b.n	800b11c <__mcmp+0x28>
 800b126:	f04f 32ff 	mov.w	r2, #4294967295
 800b12a:	e7f7      	b.n	800b11c <__mcmp+0x28>

0800b12c <__mdiff>:
 800b12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	460c      	mov	r4, r1
 800b132:	4606      	mov	r6, r0
 800b134:	4611      	mov	r1, r2
 800b136:	4620      	mov	r0, r4
 800b138:	4617      	mov	r7, r2
 800b13a:	f7ff ffdb 	bl	800b0f4 <__mcmp>
 800b13e:	1e05      	subs	r5, r0, #0
 800b140:	d110      	bne.n	800b164 <__mdiff+0x38>
 800b142:	4629      	mov	r1, r5
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff fd0d 	bl	800ab64 <_Balloc>
 800b14a:	b930      	cbnz	r0, 800b15a <__mdiff+0x2e>
 800b14c:	4b39      	ldr	r3, [pc, #228]	; (800b234 <__mdiff+0x108>)
 800b14e:	4602      	mov	r2, r0
 800b150:	f240 2132 	movw	r1, #562	; 0x232
 800b154:	4838      	ldr	r0, [pc, #224]	; (800b238 <__mdiff+0x10c>)
 800b156:	f001 f831 	bl	800c1bc <__assert_func>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	bfa4      	itt	ge
 800b166:	463b      	movge	r3, r7
 800b168:	4627      	movge	r7, r4
 800b16a:	4630      	mov	r0, r6
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	bfa6      	itte	ge
 800b170:	461c      	movge	r4, r3
 800b172:	2500      	movge	r5, #0
 800b174:	2501      	movlt	r5, #1
 800b176:	f7ff fcf5 	bl	800ab64 <_Balloc>
 800b17a:	b920      	cbnz	r0, 800b186 <__mdiff+0x5a>
 800b17c:	4b2d      	ldr	r3, [pc, #180]	; (800b234 <__mdiff+0x108>)
 800b17e:	4602      	mov	r2, r0
 800b180:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b184:	e7e6      	b.n	800b154 <__mdiff+0x28>
 800b186:	693e      	ldr	r6, [r7, #16]
 800b188:	60c5      	str	r5, [r0, #12]
 800b18a:	6925      	ldr	r5, [r4, #16]
 800b18c:	f107 0114 	add.w	r1, r7, #20
 800b190:	f104 0914 	add.w	r9, r4, #20
 800b194:	f100 0e14 	add.w	lr, r0, #20
 800b198:	f107 0210 	add.w	r2, r7, #16
 800b19c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b1a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b1a4:	46f2      	mov	sl, lr
 800b1a6:	2700      	movs	r7, #0
 800b1a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1b0:	fa1f f883 	uxth.w	r8, r3
 800b1b4:	fa17 f78b 	uxtah	r7, r7, fp
 800b1b8:	0c1b      	lsrs	r3, r3, #16
 800b1ba:	eba7 0808 	sub.w	r8, r7, r8
 800b1be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1c6:	fa1f f888 	uxth.w	r8, r8
 800b1ca:	141f      	asrs	r7, r3, #16
 800b1cc:	454d      	cmp	r5, r9
 800b1ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b1d6:	d8e7      	bhi.n	800b1a8 <__mdiff+0x7c>
 800b1d8:	1b2b      	subs	r3, r5, r4
 800b1da:	3b15      	subs	r3, #21
 800b1dc:	f023 0303 	bic.w	r3, r3, #3
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	3415      	adds	r4, #21
 800b1e4:	42a5      	cmp	r5, r4
 800b1e6:	bf38      	it	cc
 800b1e8:	2304      	movcc	r3, #4
 800b1ea:	4419      	add	r1, r3
 800b1ec:	4473      	add	r3, lr
 800b1ee:	469e      	mov	lr, r3
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	4565      	cmp	r5, ip
 800b1f4:	d30e      	bcc.n	800b214 <__mdiff+0xe8>
 800b1f6:	f10c 0203 	add.w	r2, ip, #3
 800b1fa:	1a52      	subs	r2, r2, r1
 800b1fc:	f022 0203 	bic.w	r2, r2, #3
 800b200:	3903      	subs	r1, #3
 800b202:	458c      	cmp	ip, r1
 800b204:	bf38      	it	cc
 800b206:	2200      	movcc	r2, #0
 800b208:	441a      	add	r2, r3
 800b20a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b20e:	b17b      	cbz	r3, 800b230 <__mdiff+0x104>
 800b210:	6106      	str	r6, [r0, #16]
 800b212:	e7a5      	b.n	800b160 <__mdiff+0x34>
 800b214:	f855 8b04 	ldr.w	r8, [r5], #4
 800b218:	fa17 f488 	uxtah	r4, r7, r8
 800b21c:	1422      	asrs	r2, r4, #16
 800b21e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b222:	b2a4      	uxth	r4, r4
 800b224:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b228:	f84e 4b04 	str.w	r4, [lr], #4
 800b22c:	1417      	asrs	r7, r2, #16
 800b22e:	e7e0      	b.n	800b1f2 <__mdiff+0xc6>
 800b230:	3e01      	subs	r6, #1
 800b232:	e7ea      	b.n	800b20a <__mdiff+0xde>
 800b234:	0800ce94 	.word	0x0800ce94
 800b238:	0800cf24 	.word	0x0800cf24

0800b23c <__ulp>:
 800b23c:	b082      	sub	sp, #8
 800b23e:	ed8d 0b00 	vstr	d0, [sp]
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	4912      	ldr	r1, [pc, #72]	; (800b290 <__ulp+0x54>)
 800b246:	4019      	ands	r1, r3
 800b248:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b24c:	2900      	cmp	r1, #0
 800b24e:	dd05      	ble.n	800b25c <__ulp+0x20>
 800b250:	2200      	movs	r2, #0
 800b252:	460b      	mov	r3, r1
 800b254:	ec43 2b10 	vmov	d0, r2, r3
 800b258:	b002      	add	sp, #8
 800b25a:	4770      	bx	lr
 800b25c:	4249      	negs	r1, r1
 800b25e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b262:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	da04      	bge.n	800b27a <__ulp+0x3e>
 800b270:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b274:	fa41 f300 	asr.w	r3, r1, r0
 800b278:	e7ec      	b.n	800b254 <__ulp+0x18>
 800b27a:	f1a0 0114 	sub.w	r1, r0, #20
 800b27e:	291e      	cmp	r1, #30
 800b280:	bfda      	itte	le
 800b282:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b286:	fa20 f101 	lsrle.w	r1, r0, r1
 800b28a:	2101      	movgt	r1, #1
 800b28c:	460a      	mov	r2, r1
 800b28e:	e7e1      	b.n	800b254 <__ulp+0x18>
 800b290:	7ff00000 	.word	0x7ff00000

0800b294 <__b2d>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	6905      	ldr	r5, [r0, #16]
 800b298:	f100 0714 	add.w	r7, r0, #20
 800b29c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b2a0:	1f2e      	subs	r6, r5, #4
 800b2a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff fd52 	bl	800ad50 <__hi0bits>
 800b2ac:	f1c0 0320 	rsb	r3, r0, #32
 800b2b0:	280a      	cmp	r0, #10
 800b2b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b330 <__b2d+0x9c>
 800b2b6:	600b      	str	r3, [r1, #0]
 800b2b8:	dc14      	bgt.n	800b2e4 <__b2d+0x50>
 800b2ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2be:	fa24 f10e 	lsr.w	r1, r4, lr
 800b2c2:	42b7      	cmp	r7, r6
 800b2c4:	ea41 030c 	orr.w	r3, r1, ip
 800b2c8:	bf34      	ite	cc
 800b2ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2ce:	2100      	movcs	r1, #0
 800b2d0:	3015      	adds	r0, #21
 800b2d2:	fa04 f000 	lsl.w	r0, r4, r0
 800b2d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b2da:	ea40 0201 	orr.w	r2, r0, r1
 800b2de:	ec43 2b10 	vmov	d0, r2, r3
 800b2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e4:	42b7      	cmp	r7, r6
 800b2e6:	bf3a      	itte	cc
 800b2e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2f0:	2100      	movcs	r1, #0
 800b2f2:	380b      	subs	r0, #11
 800b2f4:	d017      	beq.n	800b326 <__b2d+0x92>
 800b2f6:	f1c0 0c20 	rsb	ip, r0, #32
 800b2fa:	fa04 f500 	lsl.w	r5, r4, r0
 800b2fe:	42be      	cmp	r6, r7
 800b300:	fa21 f40c 	lsr.w	r4, r1, ip
 800b304:	ea45 0504 	orr.w	r5, r5, r4
 800b308:	bf8c      	ite	hi
 800b30a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b30e:	2400      	movls	r4, #0
 800b310:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b314:	fa01 f000 	lsl.w	r0, r1, r0
 800b318:	fa24 f40c 	lsr.w	r4, r4, ip
 800b31c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b320:	ea40 0204 	orr.w	r2, r0, r4
 800b324:	e7db      	b.n	800b2de <__b2d+0x4a>
 800b326:	ea44 030c 	orr.w	r3, r4, ip
 800b32a:	460a      	mov	r2, r1
 800b32c:	e7d7      	b.n	800b2de <__b2d+0x4a>
 800b32e:	bf00      	nop
 800b330:	3ff00000 	.word	0x3ff00000

0800b334 <__d2b>:
 800b334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b338:	4689      	mov	r9, r1
 800b33a:	2101      	movs	r1, #1
 800b33c:	ec57 6b10 	vmov	r6, r7, d0
 800b340:	4690      	mov	r8, r2
 800b342:	f7ff fc0f 	bl	800ab64 <_Balloc>
 800b346:	4604      	mov	r4, r0
 800b348:	b930      	cbnz	r0, 800b358 <__d2b+0x24>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <__d2b+0xb0>)
 800b34e:	4826      	ldr	r0, [pc, #152]	; (800b3e8 <__d2b+0xb4>)
 800b350:	f240 310a 	movw	r1, #778	; 0x30a
 800b354:	f000 ff32 	bl	800c1bc <__assert_func>
 800b358:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b35c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b360:	bb35      	cbnz	r5, 800b3b0 <__d2b+0x7c>
 800b362:	2e00      	cmp	r6, #0
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	d028      	beq.n	800b3ba <__d2b+0x86>
 800b368:	4668      	mov	r0, sp
 800b36a:	9600      	str	r6, [sp, #0]
 800b36c:	f7ff fd10 	bl	800ad90 <__lo0bits>
 800b370:	9900      	ldr	r1, [sp, #0]
 800b372:	b300      	cbz	r0, 800b3b6 <__d2b+0x82>
 800b374:	9a01      	ldr	r2, [sp, #4]
 800b376:	f1c0 0320 	rsb	r3, r0, #32
 800b37a:	fa02 f303 	lsl.w	r3, r2, r3
 800b37e:	430b      	orrs	r3, r1
 800b380:	40c2      	lsrs	r2, r0
 800b382:	6163      	str	r3, [r4, #20]
 800b384:	9201      	str	r2, [sp, #4]
 800b386:	9b01      	ldr	r3, [sp, #4]
 800b388:	61a3      	str	r3, [r4, #24]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bf14      	ite	ne
 800b38e:	2202      	movne	r2, #2
 800b390:	2201      	moveq	r2, #1
 800b392:	6122      	str	r2, [r4, #16]
 800b394:	b1d5      	cbz	r5, 800b3cc <__d2b+0x98>
 800b396:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b39a:	4405      	add	r5, r0
 800b39c:	f8c9 5000 	str.w	r5, [r9]
 800b3a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3a4:	f8c8 0000 	str.w	r0, [r8]
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	b003      	add	sp, #12
 800b3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3b4:	e7d5      	b.n	800b362 <__d2b+0x2e>
 800b3b6:	6161      	str	r1, [r4, #20]
 800b3b8:	e7e5      	b.n	800b386 <__d2b+0x52>
 800b3ba:	a801      	add	r0, sp, #4
 800b3bc:	f7ff fce8 	bl	800ad90 <__lo0bits>
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	6163      	str	r3, [r4, #20]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	6122      	str	r2, [r4, #16]
 800b3c8:	3020      	adds	r0, #32
 800b3ca:	e7e3      	b.n	800b394 <__d2b+0x60>
 800b3cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3d4:	f8c9 0000 	str.w	r0, [r9]
 800b3d8:	6918      	ldr	r0, [r3, #16]
 800b3da:	f7ff fcb9 	bl	800ad50 <__hi0bits>
 800b3de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3e2:	e7df      	b.n	800b3a4 <__d2b+0x70>
 800b3e4:	0800ce94 	.word	0x0800ce94
 800b3e8:	0800cf24 	.word	0x0800cf24

0800b3ec <__ratio>:
 800b3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4688      	mov	r8, r1
 800b3f2:	4669      	mov	r1, sp
 800b3f4:	4681      	mov	r9, r0
 800b3f6:	f7ff ff4d 	bl	800b294 <__b2d>
 800b3fa:	a901      	add	r1, sp, #4
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	ec55 4b10 	vmov	r4, r5, d0
 800b402:	f7ff ff47 	bl	800b294 <__b2d>
 800b406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b40a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b40e:	eba3 0c02 	sub.w	ip, r3, r2
 800b412:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b416:	1a9b      	subs	r3, r3, r2
 800b418:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b41c:	ec51 0b10 	vmov	r0, r1, d0
 800b420:	2b00      	cmp	r3, #0
 800b422:	bfd6      	itet	le
 800b424:	460a      	movle	r2, r1
 800b426:	462a      	movgt	r2, r5
 800b428:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b42c:	468b      	mov	fp, r1
 800b42e:	462f      	mov	r7, r5
 800b430:	bfd4      	ite	le
 800b432:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b436:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b43a:	4620      	mov	r0, r4
 800b43c:	ee10 2a10 	vmov	r2, s0
 800b440:	465b      	mov	r3, fp
 800b442:	4639      	mov	r1, r7
 800b444:	f7f5 fa22 	bl	800088c <__aeabi_ddiv>
 800b448:	ec41 0b10 	vmov	d0, r0, r1
 800b44c:	b003      	add	sp, #12
 800b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b452 <__copybits>:
 800b452:	3901      	subs	r1, #1
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	1149      	asrs	r1, r1, #5
 800b458:	6914      	ldr	r4, [r2, #16]
 800b45a:	3101      	adds	r1, #1
 800b45c:	f102 0314 	add.w	r3, r2, #20
 800b460:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b464:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b468:	1f05      	subs	r5, r0, #4
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	d30c      	bcc.n	800b488 <__copybits+0x36>
 800b46e:	1aa3      	subs	r3, r4, r2
 800b470:	3b11      	subs	r3, #17
 800b472:	f023 0303 	bic.w	r3, r3, #3
 800b476:	3211      	adds	r2, #17
 800b478:	42a2      	cmp	r2, r4
 800b47a:	bf88      	it	hi
 800b47c:	2300      	movhi	r3, #0
 800b47e:	4418      	add	r0, r3
 800b480:	2300      	movs	r3, #0
 800b482:	4288      	cmp	r0, r1
 800b484:	d305      	bcc.n	800b492 <__copybits+0x40>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	f853 6b04 	ldr.w	r6, [r3], #4
 800b48c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b490:	e7eb      	b.n	800b46a <__copybits+0x18>
 800b492:	f840 3b04 	str.w	r3, [r0], #4
 800b496:	e7f4      	b.n	800b482 <__copybits+0x30>

0800b498 <__any_on>:
 800b498:	f100 0214 	add.w	r2, r0, #20
 800b49c:	6900      	ldr	r0, [r0, #16]
 800b49e:	114b      	asrs	r3, r1, #5
 800b4a0:	4298      	cmp	r0, r3
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	db11      	blt.n	800b4ca <__any_on+0x32>
 800b4a6:	dd0a      	ble.n	800b4be <__any_on+0x26>
 800b4a8:	f011 011f 	ands.w	r1, r1, #31
 800b4ac:	d007      	beq.n	800b4be <__any_on+0x26>
 800b4ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4b2:	fa24 f001 	lsr.w	r0, r4, r1
 800b4b6:	fa00 f101 	lsl.w	r1, r0, r1
 800b4ba:	428c      	cmp	r4, r1
 800b4bc:	d10b      	bne.n	800b4d6 <__any_on+0x3e>
 800b4be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d803      	bhi.n	800b4ce <__any_on+0x36>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	bd10      	pop	{r4, pc}
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	e7f7      	b.n	800b4be <__any_on+0x26>
 800b4ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4d2:	2900      	cmp	r1, #0
 800b4d4:	d0f5      	beq.n	800b4c2 <__any_on+0x2a>
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	e7f6      	b.n	800b4c8 <__any_on+0x30>

0800b4da <_calloc_r>:
 800b4da:	b513      	push	{r0, r1, r4, lr}
 800b4dc:	434a      	muls	r2, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	9201      	str	r2, [sp, #4]
 800b4e2:	f000 f859 	bl	800b598 <_malloc_r>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	b118      	cbz	r0, 800b4f2 <_calloc_r+0x18>
 800b4ea:	9a01      	ldr	r2, [sp, #4]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	f7fc fb25 	bl	8007b3c <memset>
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd10      	pop	{r4, pc}

0800b4f8 <_free_r>:
 800b4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4fa:	2900      	cmp	r1, #0
 800b4fc:	d048      	beq.n	800b590 <_free_r+0x98>
 800b4fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b502:	9001      	str	r0, [sp, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f1a1 0404 	sub.w	r4, r1, #4
 800b50a:	bfb8      	it	lt
 800b50c:	18e4      	addlt	r4, r4, r3
 800b50e:	f001 f859 	bl	800c5c4 <__malloc_lock>
 800b512:	4a20      	ldr	r2, [pc, #128]	; (800b594 <_free_r+0x9c>)
 800b514:	9801      	ldr	r0, [sp, #4]
 800b516:	6813      	ldr	r3, [r2, #0]
 800b518:	4615      	mov	r5, r2
 800b51a:	b933      	cbnz	r3, 800b52a <_free_r+0x32>
 800b51c:	6063      	str	r3, [r4, #4]
 800b51e:	6014      	str	r4, [r2, #0]
 800b520:	b003      	add	sp, #12
 800b522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b526:	f001 b853 	b.w	800c5d0 <__malloc_unlock>
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	d90b      	bls.n	800b546 <_free_r+0x4e>
 800b52e:	6821      	ldr	r1, [r4, #0]
 800b530:	1862      	adds	r2, r4, r1
 800b532:	4293      	cmp	r3, r2
 800b534:	bf04      	itt	eq
 800b536:	681a      	ldreq	r2, [r3, #0]
 800b538:	685b      	ldreq	r3, [r3, #4]
 800b53a:	6063      	str	r3, [r4, #4]
 800b53c:	bf04      	itt	eq
 800b53e:	1852      	addeq	r2, r2, r1
 800b540:	6022      	streq	r2, [r4, #0]
 800b542:	602c      	str	r4, [r5, #0]
 800b544:	e7ec      	b.n	800b520 <_free_r+0x28>
 800b546:	461a      	mov	r2, r3
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	b10b      	cbz	r3, 800b550 <_free_r+0x58>
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	d9fa      	bls.n	800b546 <_free_r+0x4e>
 800b550:	6811      	ldr	r1, [r2, #0]
 800b552:	1855      	adds	r5, r2, r1
 800b554:	42a5      	cmp	r5, r4
 800b556:	d10b      	bne.n	800b570 <_free_r+0x78>
 800b558:	6824      	ldr	r4, [r4, #0]
 800b55a:	4421      	add	r1, r4
 800b55c:	1854      	adds	r4, r2, r1
 800b55e:	42a3      	cmp	r3, r4
 800b560:	6011      	str	r1, [r2, #0]
 800b562:	d1dd      	bne.n	800b520 <_free_r+0x28>
 800b564:	681c      	ldr	r4, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	6053      	str	r3, [r2, #4]
 800b56a:	4421      	add	r1, r4
 800b56c:	6011      	str	r1, [r2, #0]
 800b56e:	e7d7      	b.n	800b520 <_free_r+0x28>
 800b570:	d902      	bls.n	800b578 <_free_r+0x80>
 800b572:	230c      	movs	r3, #12
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	e7d3      	b.n	800b520 <_free_r+0x28>
 800b578:	6825      	ldr	r5, [r4, #0]
 800b57a:	1961      	adds	r1, r4, r5
 800b57c:	428b      	cmp	r3, r1
 800b57e:	bf04      	itt	eq
 800b580:	6819      	ldreq	r1, [r3, #0]
 800b582:	685b      	ldreq	r3, [r3, #4]
 800b584:	6063      	str	r3, [r4, #4]
 800b586:	bf04      	itt	eq
 800b588:	1949      	addeq	r1, r1, r5
 800b58a:	6021      	streq	r1, [r4, #0]
 800b58c:	6054      	str	r4, [r2, #4]
 800b58e:	e7c7      	b.n	800b520 <_free_r+0x28>
 800b590:	b003      	add	sp, #12
 800b592:	bd30      	pop	{r4, r5, pc}
 800b594:	2000021c 	.word	0x2000021c

0800b598 <_malloc_r>:
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	1ccd      	adds	r5, r1, #3
 800b59c:	f025 0503 	bic.w	r5, r5, #3
 800b5a0:	3508      	adds	r5, #8
 800b5a2:	2d0c      	cmp	r5, #12
 800b5a4:	bf38      	it	cc
 800b5a6:	250c      	movcc	r5, #12
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	db01      	blt.n	800b5b2 <_malloc_r+0x1a>
 800b5ae:	42a9      	cmp	r1, r5
 800b5b0:	d903      	bls.n	800b5ba <_malloc_r+0x22>
 800b5b2:	230c      	movs	r3, #12
 800b5b4:	6033      	str	r3, [r6, #0]
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ba:	f001 f803 	bl	800c5c4 <__malloc_lock>
 800b5be:	4921      	ldr	r1, [pc, #132]	; (800b644 <_malloc_r+0xac>)
 800b5c0:	680a      	ldr	r2, [r1, #0]
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	b99c      	cbnz	r4, 800b5ee <_malloc_r+0x56>
 800b5c6:	4f20      	ldr	r7, [pc, #128]	; (800b648 <_malloc_r+0xb0>)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	b923      	cbnz	r3, 800b5d6 <_malloc_r+0x3e>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f000 fcd2 	bl	800bf78 <_sbrk_r>
 800b5d4:	6038      	str	r0, [r7, #0]
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f000 fccd 	bl	800bf78 <_sbrk_r>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	d123      	bne.n	800b62a <_malloc_r+0x92>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f000 fff2 	bl	800c5d0 <__malloc_unlock>
 800b5ec:	e7e3      	b.n	800b5b6 <_malloc_r+0x1e>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	1b5b      	subs	r3, r3, r5
 800b5f2:	d417      	bmi.n	800b624 <_malloc_r+0x8c>
 800b5f4:	2b0b      	cmp	r3, #11
 800b5f6:	d903      	bls.n	800b600 <_malloc_r+0x68>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	441c      	add	r4, r3
 800b5fc:	6025      	str	r5, [r4, #0]
 800b5fe:	e004      	b.n	800b60a <_malloc_r+0x72>
 800b600:	6863      	ldr	r3, [r4, #4]
 800b602:	42a2      	cmp	r2, r4
 800b604:	bf0c      	ite	eq
 800b606:	600b      	streq	r3, [r1, #0]
 800b608:	6053      	strne	r3, [r2, #4]
 800b60a:	4630      	mov	r0, r6
 800b60c:	f000 ffe0 	bl	800c5d0 <__malloc_unlock>
 800b610:	f104 000b 	add.w	r0, r4, #11
 800b614:	1d23      	adds	r3, r4, #4
 800b616:	f020 0007 	bic.w	r0, r0, #7
 800b61a:	1ac2      	subs	r2, r0, r3
 800b61c:	d0cc      	beq.n	800b5b8 <_malloc_r+0x20>
 800b61e:	1a1b      	subs	r3, r3, r0
 800b620:	50a3      	str	r3, [r4, r2]
 800b622:	e7c9      	b.n	800b5b8 <_malloc_r+0x20>
 800b624:	4622      	mov	r2, r4
 800b626:	6864      	ldr	r4, [r4, #4]
 800b628:	e7cc      	b.n	800b5c4 <_malloc_r+0x2c>
 800b62a:	1cc4      	adds	r4, r0, #3
 800b62c:	f024 0403 	bic.w	r4, r4, #3
 800b630:	42a0      	cmp	r0, r4
 800b632:	d0e3      	beq.n	800b5fc <_malloc_r+0x64>
 800b634:	1a21      	subs	r1, r4, r0
 800b636:	4630      	mov	r0, r6
 800b638:	f000 fc9e 	bl	800bf78 <_sbrk_r>
 800b63c:	3001      	adds	r0, #1
 800b63e:	d1dd      	bne.n	800b5fc <_malloc_r+0x64>
 800b640:	e7cf      	b.n	800b5e2 <_malloc_r+0x4a>
 800b642:	bf00      	nop
 800b644:	2000021c 	.word	0x2000021c
 800b648:	20000220 	.word	0x20000220

0800b64c <__ssputs_r>:
 800b64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	688e      	ldr	r6, [r1, #8]
 800b652:	429e      	cmp	r6, r3
 800b654:	4682      	mov	sl, r0
 800b656:	460c      	mov	r4, r1
 800b658:	4690      	mov	r8, r2
 800b65a:	461f      	mov	r7, r3
 800b65c:	d838      	bhi.n	800b6d0 <__ssputs_r+0x84>
 800b65e:	898a      	ldrh	r2, [r1, #12]
 800b660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b664:	d032      	beq.n	800b6cc <__ssputs_r+0x80>
 800b666:	6825      	ldr	r5, [r4, #0]
 800b668:	6909      	ldr	r1, [r1, #16]
 800b66a:	eba5 0901 	sub.w	r9, r5, r1
 800b66e:	6965      	ldr	r5, [r4, #20]
 800b670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b678:	3301      	adds	r3, #1
 800b67a:	444b      	add	r3, r9
 800b67c:	106d      	asrs	r5, r5, #1
 800b67e:	429d      	cmp	r5, r3
 800b680:	bf38      	it	cc
 800b682:	461d      	movcc	r5, r3
 800b684:	0553      	lsls	r3, r2, #21
 800b686:	d531      	bpl.n	800b6ec <__ssputs_r+0xa0>
 800b688:	4629      	mov	r1, r5
 800b68a:	f7ff ff85 	bl	800b598 <_malloc_r>
 800b68e:	4606      	mov	r6, r0
 800b690:	b950      	cbnz	r0, 800b6a8 <__ssputs_r+0x5c>
 800b692:	230c      	movs	r3, #12
 800b694:	f8ca 3000 	str.w	r3, [sl]
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a8:	6921      	ldr	r1, [r4, #16]
 800b6aa:	464a      	mov	r2, r9
 800b6ac:	f7ff fa4c 	bl	800ab48 <memcpy>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	6126      	str	r6, [r4, #16]
 800b6be:	6165      	str	r5, [r4, #20]
 800b6c0:	444e      	add	r6, r9
 800b6c2:	eba5 0509 	sub.w	r5, r5, r9
 800b6c6:	6026      	str	r6, [r4, #0]
 800b6c8:	60a5      	str	r5, [r4, #8]
 800b6ca:	463e      	mov	r6, r7
 800b6cc:	42be      	cmp	r6, r7
 800b6ce:	d900      	bls.n	800b6d2 <__ssputs_r+0x86>
 800b6d0:	463e      	mov	r6, r7
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	f000 ff5a 	bl	800c590 <memmove>
 800b6dc:	68a3      	ldr	r3, [r4, #8]
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	1b9b      	subs	r3, r3, r6
 800b6e2:	4432      	add	r2, r6
 800b6e4:	60a3      	str	r3, [r4, #8]
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e7db      	b.n	800b6a4 <__ssputs_r+0x58>
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	f000 ff75 	bl	800c5dc <_realloc_r>
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d1e1      	bne.n	800b6bc <__ssputs_r+0x70>
 800b6f8:	6921      	ldr	r1, [r4, #16]
 800b6fa:	4650      	mov	r0, sl
 800b6fc:	f7ff fefc 	bl	800b4f8 <_free_r>
 800b700:	e7c7      	b.n	800b692 <__ssputs_r+0x46>
	...

0800b704 <_svfiprintf_r>:
 800b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b708:	4698      	mov	r8, r3
 800b70a:	898b      	ldrh	r3, [r1, #12]
 800b70c:	061b      	lsls	r3, r3, #24
 800b70e:	b09d      	sub	sp, #116	; 0x74
 800b710:	4607      	mov	r7, r0
 800b712:	460d      	mov	r5, r1
 800b714:	4614      	mov	r4, r2
 800b716:	d50e      	bpl.n	800b736 <_svfiprintf_r+0x32>
 800b718:	690b      	ldr	r3, [r1, #16]
 800b71a:	b963      	cbnz	r3, 800b736 <_svfiprintf_r+0x32>
 800b71c:	2140      	movs	r1, #64	; 0x40
 800b71e:	f7ff ff3b 	bl	800b598 <_malloc_r>
 800b722:	6028      	str	r0, [r5, #0]
 800b724:	6128      	str	r0, [r5, #16]
 800b726:	b920      	cbnz	r0, 800b732 <_svfiprintf_r+0x2e>
 800b728:	230c      	movs	r3, #12
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	e0d1      	b.n	800b8d6 <_svfiprintf_r+0x1d2>
 800b732:	2340      	movs	r3, #64	; 0x40
 800b734:	616b      	str	r3, [r5, #20]
 800b736:	2300      	movs	r3, #0
 800b738:	9309      	str	r3, [sp, #36]	; 0x24
 800b73a:	2320      	movs	r3, #32
 800b73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b740:	f8cd 800c 	str.w	r8, [sp, #12]
 800b744:	2330      	movs	r3, #48	; 0x30
 800b746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8f0 <_svfiprintf_r+0x1ec>
 800b74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b74e:	f04f 0901 	mov.w	r9, #1
 800b752:	4623      	mov	r3, r4
 800b754:	469a      	mov	sl, r3
 800b756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b75a:	b10a      	cbz	r2, 800b760 <_svfiprintf_r+0x5c>
 800b75c:	2a25      	cmp	r2, #37	; 0x25
 800b75e:	d1f9      	bne.n	800b754 <_svfiprintf_r+0x50>
 800b760:	ebba 0b04 	subs.w	fp, sl, r4
 800b764:	d00b      	beq.n	800b77e <_svfiprintf_r+0x7a>
 800b766:	465b      	mov	r3, fp
 800b768:	4622      	mov	r2, r4
 800b76a:	4629      	mov	r1, r5
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff ff6d 	bl	800b64c <__ssputs_r>
 800b772:	3001      	adds	r0, #1
 800b774:	f000 80aa 	beq.w	800b8cc <_svfiprintf_r+0x1c8>
 800b778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b77a:	445a      	add	r2, fp
 800b77c:	9209      	str	r2, [sp, #36]	; 0x24
 800b77e:	f89a 3000 	ldrb.w	r3, [sl]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 80a2 	beq.w	800b8cc <_svfiprintf_r+0x1c8>
 800b788:	2300      	movs	r3, #0
 800b78a:	f04f 32ff 	mov.w	r2, #4294967295
 800b78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b792:	f10a 0a01 	add.w	sl, sl, #1
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	9307      	str	r3, [sp, #28]
 800b79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b79e:	931a      	str	r3, [sp, #104]	; 0x68
 800b7a0:	4654      	mov	r4, sl
 800b7a2:	2205      	movs	r2, #5
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	4851      	ldr	r0, [pc, #324]	; (800b8f0 <_svfiprintf_r+0x1ec>)
 800b7aa:	f7f4 fd39 	bl	8000220 <memchr>
 800b7ae:	9a04      	ldr	r2, [sp, #16]
 800b7b0:	b9d8      	cbnz	r0, 800b7ea <_svfiprintf_r+0xe6>
 800b7b2:	06d0      	lsls	r0, r2, #27
 800b7b4:	bf44      	itt	mi
 800b7b6:	2320      	movmi	r3, #32
 800b7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7bc:	0711      	lsls	r1, r2, #28
 800b7be:	bf44      	itt	mi
 800b7c0:	232b      	movmi	r3, #43	; 0x2b
 800b7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b7cc:	d015      	beq.n	800b7fa <_svfiprintf_r+0xf6>
 800b7ce:	9a07      	ldr	r2, [sp, #28]
 800b7d0:	4654      	mov	r4, sl
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	f04f 0c0a 	mov.w	ip, #10
 800b7d8:	4621      	mov	r1, r4
 800b7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7de:	3b30      	subs	r3, #48	; 0x30
 800b7e0:	2b09      	cmp	r3, #9
 800b7e2:	d94e      	bls.n	800b882 <_svfiprintf_r+0x17e>
 800b7e4:	b1b0      	cbz	r0, 800b814 <_svfiprintf_r+0x110>
 800b7e6:	9207      	str	r2, [sp, #28]
 800b7e8:	e014      	b.n	800b814 <_svfiprintf_r+0x110>
 800b7ea:	eba0 0308 	sub.w	r3, r0, r8
 800b7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	46a2      	mov	sl, r4
 800b7f8:	e7d2      	b.n	800b7a0 <_svfiprintf_r+0x9c>
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	1d19      	adds	r1, r3, #4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	9103      	str	r1, [sp, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	bfbb      	ittet	lt
 800b806:	425b      	neglt	r3, r3
 800b808:	f042 0202 	orrlt.w	r2, r2, #2
 800b80c:	9307      	strge	r3, [sp, #28]
 800b80e:	9307      	strlt	r3, [sp, #28]
 800b810:	bfb8      	it	lt
 800b812:	9204      	strlt	r2, [sp, #16]
 800b814:	7823      	ldrb	r3, [r4, #0]
 800b816:	2b2e      	cmp	r3, #46	; 0x2e
 800b818:	d10c      	bne.n	800b834 <_svfiprintf_r+0x130>
 800b81a:	7863      	ldrb	r3, [r4, #1]
 800b81c:	2b2a      	cmp	r3, #42	; 0x2a
 800b81e:	d135      	bne.n	800b88c <_svfiprintf_r+0x188>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	9203      	str	r2, [sp, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bfb8      	it	lt
 800b82c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b830:	3402      	adds	r4, #2
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b900 <_svfiprintf_r+0x1fc>
 800b838:	7821      	ldrb	r1, [r4, #0]
 800b83a:	2203      	movs	r2, #3
 800b83c:	4650      	mov	r0, sl
 800b83e:	f7f4 fcef 	bl	8000220 <memchr>
 800b842:	b140      	cbz	r0, 800b856 <_svfiprintf_r+0x152>
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	eba0 000a 	sub.w	r0, r0, sl
 800b84a:	fa03 f000 	lsl.w	r0, r3, r0
 800b84e:	9b04      	ldr	r3, [sp, #16]
 800b850:	4303      	orrs	r3, r0
 800b852:	3401      	adds	r4, #1
 800b854:	9304      	str	r3, [sp, #16]
 800b856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85a:	4826      	ldr	r0, [pc, #152]	; (800b8f4 <_svfiprintf_r+0x1f0>)
 800b85c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b860:	2206      	movs	r2, #6
 800b862:	f7f4 fcdd 	bl	8000220 <memchr>
 800b866:	2800      	cmp	r0, #0
 800b868:	d038      	beq.n	800b8dc <_svfiprintf_r+0x1d8>
 800b86a:	4b23      	ldr	r3, [pc, #140]	; (800b8f8 <_svfiprintf_r+0x1f4>)
 800b86c:	bb1b      	cbnz	r3, 800b8b6 <_svfiprintf_r+0x1b2>
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	3307      	adds	r3, #7
 800b872:	f023 0307 	bic.w	r3, r3, #7
 800b876:	3308      	adds	r3, #8
 800b878:	9303      	str	r3, [sp, #12]
 800b87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87c:	4433      	add	r3, r6
 800b87e:	9309      	str	r3, [sp, #36]	; 0x24
 800b880:	e767      	b.n	800b752 <_svfiprintf_r+0x4e>
 800b882:	fb0c 3202 	mla	r2, ip, r2, r3
 800b886:	460c      	mov	r4, r1
 800b888:	2001      	movs	r0, #1
 800b88a:	e7a5      	b.n	800b7d8 <_svfiprintf_r+0xd4>
 800b88c:	2300      	movs	r3, #0
 800b88e:	3401      	adds	r4, #1
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	4619      	mov	r1, r3
 800b894:	f04f 0c0a 	mov.w	ip, #10
 800b898:	4620      	mov	r0, r4
 800b89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b89e:	3a30      	subs	r2, #48	; 0x30
 800b8a0:	2a09      	cmp	r2, #9
 800b8a2:	d903      	bls.n	800b8ac <_svfiprintf_r+0x1a8>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0c5      	beq.n	800b834 <_svfiprintf_r+0x130>
 800b8a8:	9105      	str	r1, [sp, #20]
 800b8aa:	e7c3      	b.n	800b834 <_svfiprintf_r+0x130>
 800b8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e7f0      	b.n	800b898 <_svfiprintf_r+0x194>
 800b8b6:	ab03      	add	r3, sp, #12
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <_svfiprintf_r+0x1f8>)
 800b8be:	a904      	add	r1, sp, #16
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7fc f9e3 	bl	8007c8c <_printf_float>
 800b8c6:	1c42      	adds	r2, r0, #1
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	d1d6      	bne.n	800b87a <_svfiprintf_r+0x176>
 800b8cc:	89ab      	ldrh	r3, [r5, #12]
 800b8ce:	065b      	lsls	r3, r3, #25
 800b8d0:	f53f af2c 	bmi.w	800b72c <_svfiprintf_r+0x28>
 800b8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d6:	b01d      	add	sp, #116	; 0x74
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	ab03      	add	r3, sp, #12
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	462a      	mov	r2, r5
 800b8e2:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <_svfiprintf_r+0x1f8>)
 800b8e4:	a904      	add	r1, sp, #16
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	f7fc fc74 	bl	80081d4 <_printf_i>
 800b8ec:	e7eb      	b.n	800b8c6 <_svfiprintf_r+0x1c2>
 800b8ee:	bf00      	nop
 800b8f0:	0800d084 	.word	0x0800d084
 800b8f4:	0800d08e 	.word	0x0800d08e
 800b8f8:	08007c8d 	.word	0x08007c8d
 800b8fc:	0800b64d 	.word	0x0800b64d
 800b900:	0800d08a 	.word	0x0800d08a

0800b904 <_sungetc_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	1c4b      	adds	r3, r1, #1
 800b908:	4614      	mov	r4, r2
 800b90a:	d103      	bne.n	800b914 <_sungetc_r+0x10>
 800b90c:	f04f 35ff 	mov.w	r5, #4294967295
 800b910:	4628      	mov	r0, r5
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	8993      	ldrh	r3, [r2, #12]
 800b916:	f023 0320 	bic.w	r3, r3, #32
 800b91a:	8193      	strh	r3, [r2, #12]
 800b91c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b91e:	6852      	ldr	r2, [r2, #4]
 800b920:	b2cd      	uxtb	r5, r1
 800b922:	b18b      	cbz	r3, 800b948 <_sungetc_r+0x44>
 800b924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b926:	4293      	cmp	r3, r2
 800b928:	dd08      	ble.n	800b93c <_sungetc_r+0x38>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	6022      	str	r2, [r4, #0]
 800b930:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b934:	6863      	ldr	r3, [r4, #4]
 800b936:	3301      	adds	r3, #1
 800b938:	6063      	str	r3, [r4, #4]
 800b93a:	e7e9      	b.n	800b910 <_sungetc_r+0xc>
 800b93c:	4621      	mov	r1, r4
 800b93e:	f000 fbf5 	bl	800c12c <__submore>
 800b942:	2800      	cmp	r0, #0
 800b944:	d0f1      	beq.n	800b92a <_sungetc_r+0x26>
 800b946:	e7e1      	b.n	800b90c <_sungetc_r+0x8>
 800b948:	6921      	ldr	r1, [r4, #16]
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	b151      	cbz	r1, 800b964 <_sungetc_r+0x60>
 800b94e:	4299      	cmp	r1, r3
 800b950:	d208      	bcs.n	800b964 <_sungetc_r+0x60>
 800b952:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b956:	42a9      	cmp	r1, r5
 800b958:	d104      	bne.n	800b964 <_sungetc_r+0x60>
 800b95a:	3b01      	subs	r3, #1
 800b95c:	3201      	adds	r2, #1
 800b95e:	6023      	str	r3, [r4, #0]
 800b960:	6062      	str	r2, [r4, #4]
 800b962:	e7d5      	b.n	800b910 <_sungetc_r+0xc>
 800b964:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b96c:	6363      	str	r3, [r4, #52]	; 0x34
 800b96e:	2303      	movs	r3, #3
 800b970:	63a3      	str	r3, [r4, #56]	; 0x38
 800b972:	4623      	mov	r3, r4
 800b974:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7dc      	b.n	800b938 <_sungetc_r+0x34>

0800b97e <__ssrefill_r>:
 800b97e:	b510      	push	{r4, lr}
 800b980:	460c      	mov	r4, r1
 800b982:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b984:	b169      	cbz	r1, 800b9a2 <__ssrefill_r+0x24>
 800b986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b98a:	4299      	cmp	r1, r3
 800b98c:	d001      	beq.n	800b992 <__ssrefill_r+0x14>
 800b98e:	f7ff fdb3 	bl	800b4f8 <_free_r>
 800b992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	2000      	movs	r0, #0
 800b998:	6360      	str	r0, [r4, #52]	; 0x34
 800b99a:	b113      	cbz	r3, 800b9a2 <__ssrefill_r+0x24>
 800b99c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	81a3      	strh	r3, [r4, #12]
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	e7f3      	b.n	800b9a0 <__ssrefill_r+0x22>

0800b9b8 <__ssvfiscanf_r>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	460c      	mov	r4, r1
 800b9be:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b9c8:	49b2      	ldr	r1, [pc, #712]	; (800bc94 <__ssvfiscanf_r+0x2dc>)
 800b9ca:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9cc:	f10d 0804 	add.w	r8, sp, #4
 800b9d0:	49b1      	ldr	r1, [pc, #708]	; (800bc98 <__ssvfiscanf_r+0x2e0>)
 800b9d2:	4fb2      	ldr	r7, [pc, #712]	; (800bc9c <__ssvfiscanf_r+0x2e4>)
 800b9d4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bca0 <__ssvfiscanf_r+0x2e8>
 800b9d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b9dc:	4606      	mov	r6, r0
 800b9de:	91a1      	str	r1, [sp, #644]	; 0x284
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	f892 a000 	ldrb.w	sl, [r2]
 800b9e6:	f1ba 0f00 	cmp.w	sl, #0
 800b9ea:	f000 8151 	beq.w	800bc90 <__ssvfiscanf_r+0x2d8>
 800b9ee:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b9f2:	f013 0308 	ands.w	r3, r3, #8
 800b9f6:	f102 0501 	add.w	r5, r2, #1
 800b9fa:	d019      	beq.n	800ba30 <__ssvfiscanf_r+0x78>
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd0f      	ble.n	800ba22 <__ssvfiscanf_r+0x6a>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	5cba      	ldrb	r2, [r7, r2]
 800ba08:	0712      	lsls	r2, r2, #28
 800ba0a:	d401      	bmi.n	800ba10 <__ssvfiscanf_r+0x58>
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	e7e8      	b.n	800b9e2 <__ssvfiscanf_r+0x2a>
 800ba10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba12:	3201      	adds	r2, #1
 800ba14:	9245      	str	r2, [sp, #276]	; 0x114
 800ba16:	6862      	ldr	r2, [r4, #4]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	6062      	str	r2, [r4, #4]
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	e7ec      	b.n	800b9fc <__ssvfiscanf_r+0x44>
 800ba22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba24:	4621      	mov	r1, r4
 800ba26:	4630      	mov	r0, r6
 800ba28:	4798      	blx	r3
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d0e9      	beq.n	800ba02 <__ssvfiscanf_r+0x4a>
 800ba2e:	e7ed      	b.n	800ba0c <__ssvfiscanf_r+0x54>
 800ba30:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ba34:	f040 8083 	bne.w	800bb3e <__ssvfiscanf_r+0x186>
 800ba38:	9341      	str	r3, [sp, #260]	; 0x104
 800ba3a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba3c:	7853      	ldrb	r3, [r2, #1]
 800ba3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba40:	bf02      	ittt	eq
 800ba42:	2310      	moveq	r3, #16
 800ba44:	1c95      	addeq	r5, r2, #2
 800ba46:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba48:	220a      	movs	r2, #10
 800ba4a:	46ab      	mov	fp, r5
 800ba4c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ba50:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba54:	2b09      	cmp	r3, #9
 800ba56:	d91d      	bls.n	800ba94 <__ssvfiscanf_r+0xdc>
 800ba58:	4891      	ldr	r0, [pc, #580]	; (800bca0 <__ssvfiscanf_r+0x2e8>)
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	f7f4 fbe0 	bl	8000220 <memchr>
 800ba60:	b140      	cbz	r0, 800ba74 <__ssvfiscanf_r+0xbc>
 800ba62:	2301      	movs	r3, #1
 800ba64:	eba0 0009 	sub.w	r0, r0, r9
 800ba68:	fa03 f000 	lsl.w	r0, r3, r0
 800ba6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba6e:	4318      	orrs	r0, r3
 800ba70:	9041      	str	r0, [sp, #260]	; 0x104
 800ba72:	465d      	mov	r5, fp
 800ba74:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba78:	2b78      	cmp	r3, #120	; 0x78
 800ba7a:	d806      	bhi.n	800ba8a <__ssvfiscanf_r+0xd2>
 800ba7c:	2b57      	cmp	r3, #87	; 0x57
 800ba7e:	d810      	bhi.n	800baa2 <__ssvfiscanf_r+0xea>
 800ba80:	2b25      	cmp	r3, #37	; 0x25
 800ba82:	d05c      	beq.n	800bb3e <__ssvfiscanf_r+0x186>
 800ba84:	d856      	bhi.n	800bb34 <__ssvfiscanf_r+0x17c>
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d074      	beq.n	800bb74 <__ssvfiscanf_r+0x1bc>
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba8e:	230a      	movs	r3, #10
 800ba90:	9342      	str	r3, [sp, #264]	; 0x108
 800ba92:	e081      	b.n	800bb98 <__ssvfiscanf_r+0x1e0>
 800ba94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba96:	fb02 1303 	mla	r3, r2, r3, r1
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba9e:	465d      	mov	r5, fp
 800baa0:	e7d3      	b.n	800ba4a <__ssvfiscanf_r+0x92>
 800baa2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800baa6:	2a20      	cmp	r2, #32
 800baa8:	d8ef      	bhi.n	800ba8a <__ssvfiscanf_r+0xd2>
 800baaa:	a101      	add	r1, pc, #4	; (adr r1, 800bab0 <__ssvfiscanf_r+0xf8>)
 800baac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bab0:	0800bb83 	.word	0x0800bb83
 800bab4:	0800ba8b 	.word	0x0800ba8b
 800bab8:	0800ba8b 	.word	0x0800ba8b
 800babc:	0800bbe1 	.word	0x0800bbe1
 800bac0:	0800ba8b 	.word	0x0800ba8b
 800bac4:	0800ba8b 	.word	0x0800ba8b
 800bac8:	0800ba8b 	.word	0x0800ba8b
 800bacc:	0800ba8b 	.word	0x0800ba8b
 800bad0:	0800ba8b 	.word	0x0800ba8b
 800bad4:	0800ba8b 	.word	0x0800ba8b
 800bad8:	0800ba8b 	.word	0x0800ba8b
 800badc:	0800bbf7 	.word	0x0800bbf7
 800bae0:	0800bbcd 	.word	0x0800bbcd
 800bae4:	0800bb3b 	.word	0x0800bb3b
 800bae8:	0800bb3b 	.word	0x0800bb3b
 800baec:	0800bb3b 	.word	0x0800bb3b
 800baf0:	0800ba8b 	.word	0x0800ba8b
 800baf4:	0800bbd1 	.word	0x0800bbd1
 800baf8:	0800ba8b 	.word	0x0800ba8b
 800bafc:	0800ba8b 	.word	0x0800ba8b
 800bb00:	0800ba8b 	.word	0x0800ba8b
 800bb04:	0800ba8b 	.word	0x0800ba8b
 800bb08:	0800bc07 	.word	0x0800bc07
 800bb0c:	0800bbd9 	.word	0x0800bbd9
 800bb10:	0800bb7b 	.word	0x0800bb7b
 800bb14:	0800ba8b 	.word	0x0800ba8b
 800bb18:	0800ba8b 	.word	0x0800ba8b
 800bb1c:	0800bc03 	.word	0x0800bc03
 800bb20:	0800ba8b 	.word	0x0800ba8b
 800bb24:	0800bbcd 	.word	0x0800bbcd
 800bb28:	0800ba8b 	.word	0x0800ba8b
 800bb2c:	0800ba8b 	.word	0x0800ba8b
 800bb30:	0800bb83 	.word	0x0800bb83
 800bb34:	3b45      	subs	r3, #69	; 0x45
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d8a7      	bhi.n	800ba8a <__ssvfiscanf_r+0xd2>
 800bb3a:	2305      	movs	r3, #5
 800bb3c:	e02b      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dd0d      	ble.n	800bb60 <__ssvfiscanf_r+0x1a8>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	781a      	ldrb	r2, [r3, #0]
 800bb48:	4552      	cmp	r2, sl
 800bb4a:	f040 80a1 	bne.w	800bc90 <__ssvfiscanf_r+0x2d8>
 800bb4e:	3301      	adds	r3, #1
 800bb50:	6862      	ldr	r2, [r4, #4]
 800bb52:	6023      	str	r3, [r4, #0]
 800bb54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb56:	3a01      	subs	r2, #1
 800bb58:	3301      	adds	r3, #1
 800bb5a:	6062      	str	r2, [r4, #4]
 800bb5c:	9345      	str	r3, [sp, #276]	; 0x114
 800bb5e:	e755      	b.n	800ba0c <__ssvfiscanf_r+0x54>
 800bb60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb62:	4621      	mov	r1, r4
 800bb64:	4630      	mov	r0, r6
 800bb66:	4798      	blx	r3
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0eb      	beq.n	800bb44 <__ssvfiscanf_r+0x18c>
 800bb6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f040 8084 	bne.w	800bc7c <__ssvfiscanf_r+0x2c4>
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e086      	b.n	800bc88 <__ssvfiscanf_r+0x2d0>
 800bb7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb7c:	f042 0220 	orr.w	r2, r2, #32
 800bb80:	9241      	str	r2, [sp, #260]	; 0x104
 800bb82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb88:	9241      	str	r2, [sp, #260]	; 0x104
 800bb8a:	2210      	movs	r2, #16
 800bb8c:	2b6f      	cmp	r3, #111	; 0x6f
 800bb8e:	9242      	str	r2, [sp, #264]	; 0x108
 800bb90:	bf34      	ite	cc
 800bb92:	2303      	movcc	r3, #3
 800bb94:	2304      	movcs	r3, #4
 800bb96:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd41      	ble.n	800bc22 <__ssvfiscanf_r+0x26a>
 800bb9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bba0:	0659      	lsls	r1, r3, #25
 800bba2:	d404      	bmi.n	800bbae <__ssvfiscanf_r+0x1f6>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	781a      	ldrb	r2, [r3, #0]
 800bba8:	5cba      	ldrb	r2, [r7, r2]
 800bbaa:	0712      	lsls	r2, r2, #28
 800bbac:	d440      	bmi.n	800bc30 <__ssvfiscanf_r+0x278>
 800bbae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	dc4f      	bgt.n	800bc54 <__ssvfiscanf_r+0x29c>
 800bbb4:	466b      	mov	r3, sp
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	a941      	add	r1, sp, #260	; 0x104
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f000 f874 	bl	800bca8 <_scanf_chars>
 800bbc0:	2801      	cmp	r0, #1
 800bbc2:	d065      	beq.n	800bc90 <__ssvfiscanf_r+0x2d8>
 800bbc4:	2802      	cmp	r0, #2
 800bbc6:	f47f af21 	bne.w	800ba0c <__ssvfiscanf_r+0x54>
 800bbca:	e7cf      	b.n	800bb6c <__ssvfiscanf_r+0x1b4>
 800bbcc:	220a      	movs	r2, #10
 800bbce:	e7dd      	b.n	800bb8c <__ssvfiscanf_r+0x1d4>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	9342      	str	r3, [sp, #264]	; 0x108
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e7de      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bbd8:	2308      	movs	r3, #8
 800bbda:	9342      	str	r3, [sp, #264]	; 0x108
 800bbdc:	2304      	movs	r3, #4
 800bbde:	e7da      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f000 f9d8 	bl	800bf98 <__sccl>
 800bbe8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	9341      	str	r3, [sp, #260]	; 0x104
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e7cf      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bbf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfc:	9341      	str	r3, [sp, #260]	; 0x104
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e7c9      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bc02:	2302      	movs	r3, #2
 800bc04:	e7c7      	b.n	800bb96 <__ssvfiscanf_r+0x1de>
 800bc06:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc08:	06c3      	lsls	r3, r0, #27
 800bc0a:	f53f aeff 	bmi.w	800ba0c <__ssvfiscanf_r+0x54>
 800bc0e:	9b00      	ldr	r3, [sp, #0]
 800bc10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc12:	1d19      	adds	r1, r3, #4
 800bc14:	9100      	str	r1, [sp, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	07c0      	lsls	r0, r0, #31
 800bc1a:	bf4c      	ite	mi
 800bc1c:	801a      	strhmi	r2, [r3, #0]
 800bc1e:	601a      	strpl	r2, [r3, #0]
 800bc20:	e6f4      	b.n	800ba0c <__ssvfiscanf_r+0x54>
 800bc22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc24:	4621      	mov	r1, r4
 800bc26:	4630      	mov	r0, r6
 800bc28:	4798      	blx	r3
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d0b7      	beq.n	800bb9e <__ssvfiscanf_r+0x1e6>
 800bc2e:	e79d      	b.n	800bb6c <__ssvfiscanf_r+0x1b4>
 800bc30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc32:	3201      	adds	r2, #1
 800bc34:	9245      	str	r2, [sp, #276]	; 0x114
 800bc36:	6862      	ldr	r2, [r4, #4]
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	6062      	str	r2, [r4, #4]
 800bc3e:	dd02      	ble.n	800bc46 <__ssvfiscanf_r+0x28e>
 800bc40:	3301      	adds	r3, #1
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	e7ae      	b.n	800bba4 <__ssvfiscanf_r+0x1ec>
 800bc46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4798      	blx	r3
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0a8      	beq.n	800bba4 <__ssvfiscanf_r+0x1ec>
 800bc52:	e78b      	b.n	800bb6c <__ssvfiscanf_r+0x1b4>
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	dc06      	bgt.n	800bc66 <__ssvfiscanf_r+0x2ae>
 800bc58:	466b      	mov	r3, sp
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	a941      	add	r1, sp, #260	; 0x104
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f000 f87a 	bl	800bd58 <_scanf_i>
 800bc64:	e7ac      	b.n	800bbc0 <__ssvfiscanf_r+0x208>
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <__ssvfiscanf_r+0x2ec>)
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f43f aecf 	beq.w	800ba0c <__ssvfiscanf_r+0x54>
 800bc6e:	466b      	mov	r3, sp
 800bc70:	4622      	mov	r2, r4
 800bc72:	a941      	add	r1, sp, #260	; 0x104
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7fc fbd3 	bl	8008420 <_scanf_float>
 800bc7a:	e7a1      	b.n	800bbc0 <__ssvfiscanf_r+0x208>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc82:	bf18      	it	ne
 800bc84:	f04f 30ff 	movne.w	r0, #4294967295
 800bc88:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc92:	e7f9      	b.n	800bc88 <__ssvfiscanf_r+0x2d0>
 800bc94:	0800b905 	.word	0x0800b905
 800bc98:	0800b97f 	.word	0x0800b97f
 800bc9c:	0800cd11 	.word	0x0800cd11
 800bca0:	0800d08a 	.word	0x0800d08a
 800bca4:	08008421 	.word	0x08008421

0800bca8 <_scanf_chars>:
 800bca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcac:	4615      	mov	r5, r2
 800bcae:	688a      	ldr	r2, [r1, #8]
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	b932      	cbnz	r2, 800bcc4 <_scanf_chars+0x1c>
 800bcb6:	698a      	ldr	r2, [r1, #24]
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	bf0c      	ite	eq
 800bcbc:	2201      	moveq	r2, #1
 800bcbe:	f04f 32ff 	movne.w	r2, #4294967295
 800bcc2:	608a      	str	r2, [r1, #8]
 800bcc4:	6822      	ldr	r2, [r4, #0]
 800bcc6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bd54 <_scanf_chars+0xac>
 800bcca:	06d1      	lsls	r1, r2, #27
 800bccc:	bf5f      	itttt	pl
 800bcce:	681a      	ldrpl	r2, [r3, #0]
 800bcd0:	1d11      	addpl	r1, r2, #4
 800bcd2:	6019      	strpl	r1, [r3, #0]
 800bcd4:	6816      	ldrpl	r6, [r2, #0]
 800bcd6:	2700      	movs	r7, #0
 800bcd8:	69a0      	ldr	r0, [r4, #24]
 800bcda:	b188      	cbz	r0, 800bd00 <_scanf_chars+0x58>
 800bcdc:	2801      	cmp	r0, #1
 800bcde:	d107      	bne.n	800bcf0 <_scanf_chars+0x48>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	781a      	ldrb	r2, [r3, #0]
 800bce4:	6963      	ldr	r3, [r4, #20]
 800bce6:	5c9b      	ldrb	r3, [r3, r2]
 800bce8:	b953      	cbnz	r3, 800bd00 <_scanf_chars+0x58>
 800bcea:	bb27      	cbnz	r7, 800bd36 <_scanf_chars+0x8e>
 800bcec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf0:	2802      	cmp	r0, #2
 800bcf2:	d120      	bne.n	800bd36 <_scanf_chars+0x8e>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bcfc:	071b      	lsls	r3, r3, #28
 800bcfe:	d41a      	bmi.n	800bd36 <_scanf_chars+0x8e>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	06da      	lsls	r2, r3, #27
 800bd04:	bf5e      	ittt	pl
 800bd06:	682b      	ldrpl	r3, [r5, #0]
 800bd08:	781b      	ldrbpl	r3, [r3, #0]
 800bd0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd0e:	682a      	ldr	r2, [r5, #0]
 800bd10:	686b      	ldr	r3, [r5, #4]
 800bd12:	3201      	adds	r2, #1
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	68a2      	ldr	r2, [r4, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	3a01      	subs	r2, #1
 800bd1c:	606b      	str	r3, [r5, #4]
 800bd1e:	3701      	adds	r7, #1
 800bd20:	60a2      	str	r2, [r4, #8]
 800bd22:	b142      	cbz	r2, 800bd36 <_scanf_chars+0x8e>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	dcd7      	bgt.n	800bcd8 <_scanf_chars+0x30>
 800bd28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4640      	mov	r0, r8
 800bd30:	4798      	blx	r3
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d0d0      	beq.n	800bcd8 <_scanf_chars+0x30>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	f013 0310 	ands.w	r3, r3, #16
 800bd3c:	d105      	bne.n	800bd4a <_scanf_chars+0xa2>
 800bd3e:	68e2      	ldr	r2, [r4, #12]
 800bd40:	3201      	adds	r2, #1
 800bd42:	60e2      	str	r2, [r4, #12]
 800bd44:	69a2      	ldr	r2, [r4, #24]
 800bd46:	b102      	cbz	r2, 800bd4a <_scanf_chars+0xa2>
 800bd48:	7033      	strb	r3, [r6, #0]
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	441f      	add	r7, r3
 800bd4e:	6127      	str	r7, [r4, #16]
 800bd50:	2000      	movs	r0, #0
 800bd52:	e7cb      	b.n	800bcec <_scanf_chars+0x44>
 800bd54:	0800cd11 	.word	0x0800cd11

0800bd58 <_scanf_i>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	4698      	mov	r8, r3
 800bd5e:	4b74      	ldr	r3, [pc, #464]	; (800bf30 <_scanf_i+0x1d8>)
 800bd60:	460c      	mov	r4, r1
 800bd62:	4682      	mov	sl, r0
 800bd64:	4616      	mov	r6, r2
 800bd66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd72:	4b70      	ldr	r3, [pc, #448]	; (800bf34 <_scanf_i+0x1dc>)
 800bd74:	69a1      	ldr	r1, [r4, #24]
 800bd76:	4a70      	ldr	r2, [pc, #448]	; (800bf38 <_scanf_i+0x1e0>)
 800bd78:	2903      	cmp	r1, #3
 800bd7a:	bf18      	it	ne
 800bd7c:	461a      	movne	r2, r3
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	9201      	str	r2, [sp, #4]
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd88:	bf88      	it	hi
 800bd8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd8e:	4627      	mov	r7, r4
 800bd90:	bf82      	ittt	hi
 800bd92:	eb03 0905 	addhi.w	r9, r3, r5
 800bd96:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd9a:	60a3      	strhi	r3, [r4, #8]
 800bd9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bda0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bda4:	bf98      	it	ls
 800bda6:	f04f 0900 	movls.w	r9, #0
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	463d      	mov	r5, r7
 800bdae:	f04f 0b00 	mov.w	fp, #0
 800bdb2:	6831      	ldr	r1, [r6, #0]
 800bdb4:	ab03      	add	r3, sp, #12
 800bdb6:	7809      	ldrb	r1, [r1, #0]
 800bdb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	f7f4 fa2f 	bl	8000220 <memchr>
 800bdc2:	b328      	cbz	r0, 800be10 <_scanf_i+0xb8>
 800bdc4:	f1bb 0f01 	cmp.w	fp, #1
 800bdc8:	d159      	bne.n	800be7e <_scanf_i+0x126>
 800bdca:	6862      	ldr	r2, [r4, #4]
 800bdcc:	b92a      	cbnz	r2, 800bdda <_scanf_i+0x82>
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	2308      	movs	r3, #8
 800bdd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdd6:	6063      	str	r3, [r4, #4]
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	6822      	ldr	r2, [r4, #0]
 800bddc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bde0:	6022      	str	r2, [r4, #0]
 800bde2:	68a2      	ldr	r2, [r4, #8]
 800bde4:	1e51      	subs	r1, r2, #1
 800bde6:	60a1      	str	r1, [r4, #8]
 800bde8:	b192      	cbz	r2, 800be10 <_scanf_i+0xb8>
 800bdea:	6832      	ldr	r2, [r6, #0]
 800bdec:	1c51      	adds	r1, r2, #1
 800bdee:	6031      	str	r1, [r6, #0]
 800bdf0:	7812      	ldrb	r2, [r2, #0]
 800bdf2:	f805 2b01 	strb.w	r2, [r5], #1
 800bdf6:	6872      	ldr	r2, [r6, #4]
 800bdf8:	3a01      	subs	r2, #1
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	6072      	str	r2, [r6, #4]
 800bdfe:	dc07      	bgt.n	800be10 <_scanf_i+0xb8>
 800be00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be04:	4631      	mov	r1, r6
 800be06:	4650      	mov	r0, sl
 800be08:	4790      	blx	r2
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f040 8085 	bne.w	800bf1a <_scanf_i+0x1c2>
 800be10:	f10b 0b01 	add.w	fp, fp, #1
 800be14:	f1bb 0f03 	cmp.w	fp, #3
 800be18:	d1cb      	bne.n	800bdb2 <_scanf_i+0x5a>
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	b90b      	cbnz	r3, 800be22 <_scanf_i+0xca>
 800be1e:	230a      	movs	r3, #10
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	6863      	ldr	r3, [r4, #4]
 800be24:	4945      	ldr	r1, [pc, #276]	; (800bf3c <_scanf_i+0x1e4>)
 800be26:	6960      	ldr	r0, [r4, #20]
 800be28:	1ac9      	subs	r1, r1, r3
 800be2a:	f000 f8b5 	bl	800bf98 <__sccl>
 800be2e:	f04f 0b00 	mov.w	fp, #0
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d03d      	beq.n	800beb6 <_scanf_i+0x15e>
 800be3a:	6831      	ldr	r1, [r6, #0]
 800be3c:	6960      	ldr	r0, [r4, #20]
 800be3e:	f891 c000 	ldrb.w	ip, [r1]
 800be42:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be46:	2800      	cmp	r0, #0
 800be48:	d035      	beq.n	800beb6 <_scanf_i+0x15e>
 800be4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be4e:	d124      	bne.n	800be9a <_scanf_i+0x142>
 800be50:	0510      	lsls	r0, r2, #20
 800be52:	d522      	bpl.n	800be9a <_scanf_i+0x142>
 800be54:	f10b 0b01 	add.w	fp, fp, #1
 800be58:	f1b9 0f00 	cmp.w	r9, #0
 800be5c:	d003      	beq.n	800be66 <_scanf_i+0x10e>
 800be5e:	3301      	adds	r3, #1
 800be60:	f109 39ff 	add.w	r9, r9, #4294967295
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	6873      	ldr	r3, [r6, #4]
 800be68:	3b01      	subs	r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	6073      	str	r3, [r6, #4]
 800be6e:	dd1b      	ble.n	800bea8 <_scanf_i+0x150>
 800be70:	6833      	ldr	r3, [r6, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	6033      	str	r3, [r6, #0]
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	3b01      	subs	r3, #1
 800be7a:	60a3      	str	r3, [r4, #8]
 800be7c:	e7d9      	b.n	800be32 <_scanf_i+0xda>
 800be7e:	f1bb 0f02 	cmp.w	fp, #2
 800be82:	d1ae      	bne.n	800bde2 <_scanf_i+0x8a>
 800be84:	6822      	ldr	r2, [r4, #0]
 800be86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be8e:	d1bf      	bne.n	800be10 <_scanf_i+0xb8>
 800be90:	2310      	movs	r3, #16
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be98:	e7a2      	b.n	800bde0 <_scanf_i+0x88>
 800be9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be9e:	6022      	str	r2, [r4, #0]
 800bea0:	780b      	ldrb	r3, [r1, #0]
 800bea2:	f805 3b01 	strb.w	r3, [r5], #1
 800bea6:	e7de      	b.n	800be66 <_scanf_i+0x10e>
 800bea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800beac:	4631      	mov	r1, r6
 800beae:	4650      	mov	r0, sl
 800beb0:	4798      	blx	r3
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d0df      	beq.n	800be76 <_scanf_i+0x11e>
 800beb6:	6823      	ldr	r3, [r4, #0]
 800beb8:	05d9      	lsls	r1, r3, #23
 800beba:	d50d      	bpl.n	800bed8 <_scanf_i+0x180>
 800bebc:	42bd      	cmp	r5, r7
 800bebe:	d909      	bls.n	800bed4 <_scanf_i+0x17c>
 800bec0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bec8:	4632      	mov	r2, r6
 800beca:	4650      	mov	r0, sl
 800becc:	4798      	blx	r3
 800bece:	f105 39ff 	add.w	r9, r5, #4294967295
 800bed2:	464d      	mov	r5, r9
 800bed4:	42bd      	cmp	r5, r7
 800bed6:	d028      	beq.n	800bf2a <_scanf_i+0x1d2>
 800bed8:	6822      	ldr	r2, [r4, #0]
 800beda:	f012 0210 	ands.w	r2, r2, #16
 800bede:	d113      	bne.n	800bf08 <_scanf_i+0x1b0>
 800bee0:	702a      	strb	r2, [r5, #0]
 800bee2:	6863      	ldr	r3, [r4, #4]
 800bee4:	9e01      	ldr	r6, [sp, #4]
 800bee6:	4639      	mov	r1, r7
 800bee8:	4650      	mov	r0, sl
 800beea:	47b0      	blx	r6
 800beec:	f8d8 3000 	ldr.w	r3, [r8]
 800bef0:	6821      	ldr	r1, [r4, #0]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	f8c8 2000 	str.w	r2, [r8]
 800bef8:	f011 0f20 	tst.w	r1, #32
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	d00f      	beq.n	800bf20 <_scanf_i+0x1c8>
 800bf00:	6018      	str	r0, [r3, #0]
 800bf02:	68e3      	ldr	r3, [r4, #12]
 800bf04:	3301      	adds	r3, #1
 800bf06:	60e3      	str	r3, [r4, #12]
 800bf08:	1bed      	subs	r5, r5, r7
 800bf0a:	44ab      	add	fp, r5
 800bf0c:	6925      	ldr	r5, [r4, #16]
 800bf0e:	445d      	add	r5, fp
 800bf10:	6125      	str	r5, [r4, #16]
 800bf12:	2000      	movs	r0, #0
 800bf14:	b007      	add	sp, #28
 800bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1a:	f04f 0b00 	mov.w	fp, #0
 800bf1e:	e7ca      	b.n	800beb6 <_scanf_i+0x15e>
 800bf20:	07ca      	lsls	r2, r1, #31
 800bf22:	bf4c      	ite	mi
 800bf24:	8018      	strhmi	r0, [r3, #0]
 800bf26:	6018      	strpl	r0, [r3, #0]
 800bf28:	e7eb      	b.n	800bf02 <_scanf_i+0x1aa>
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	e7f2      	b.n	800bf14 <_scanf_i+0x1bc>
 800bf2e:	bf00      	nop
 800bf30:	0800cc60 	.word	0x0800cc60
 800bf34:	0800c129 	.word	0x0800c129
 800bf38:	080096d1 	.word	0x080096d1
 800bf3c:	0800d0ae 	.word	0x0800d0ae

0800bf40 <_read_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d07      	ldr	r5, [pc, #28]	; (800bf60 <_read_r+0x20>)
 800bf44:	4604      	mov	r4, r0
 800bf46:	4608      	mov	r0, r1
 800bf48:	4611      	mov	r1, r2
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	602a      	str	r2, [r5, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f7f6 fca4 	bl	800289c <_read>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_read_r+0x1e>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_read_r+0x1e>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	20000820 	.word	0x20000820
 800bf64:	00000000 	.word	0x00000000

0800bf68 <nan>:
 800bf68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf70 <nan+0x8>
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	00000000 	.word	0x00000000
 800bf74:	7ff80000 	.word	0x7ff80000

0800bf78 <_sbrk_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	; (800bf94 <_sbrk_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f6 fcf8 	bl	8002978 <_sbrk>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_sbrk_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_sbrk_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	20000820 	.word	0x20000820

0800bf98 <__sccl>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	780b      	ldrb	r3, [r1, #0]
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	2b5e      	cmp	r3, #94	; 0x5e
 800bfa0:	bf0b      	itete	eq
 800bfa2:	784b      	ldrbeq	r3, [r1, #1]
 800bfa4:	1c48      	addne	r0, r1, #1
 800bfa6:	1c88      	addeq	r0, r1, #2
 800bfa8:	2200      	movne	r2, #0
 800bfaa:	bf08      	it	eq
 800bfac:	2201      	moveq	r2, #1
 800bfae:	1e61      	subs	r1, r4, #1
 800bfb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bfb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d1fb      	bne.n	800bfb4 <__sccl+0x1c>
 800bfbc:	b90b      	cbnz	r3, 800bfc2 <__sccl+0x2a>
 800bfbe:	3801      	subs	r0, #1
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	f082 0101 	eor.w	r1, r2, #1
 800bfc6:	54e1      	strb	r1, [r4, r3]
 800bfc8:	1c42      	adds	r2, r0, #1
 800bfca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bfce:	2d2d      	cmp	r5, #45	; 0x2d
 800bfd0:	f102 36ff 	add.w	r6, r2, #4294967295
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	d006      	beq.n	800bfe6 <__sccl+0x4e>
 800bfd8:	2d5d      	cmp	r5, #93	; 0x5d
 800bfda:	d0f1      	beq.n	800bfc0 <__sccl+0x28>
 800bfdc:	b90d      	cbnz	r5, 800bfe2 <__sccl+0x4a>
 800bfde:	4630      	mov	r0, r6
 800bfe0:	e7ee      	b.n	800bfc0 <__sccl+0x28>
 800bfe2:	462b      	mov	r3, r5
 800bfe4:	e7ef      	b.n	800bfc6 <__sccl+0x2e>
 800bfe6:	7816      	ldrb	r6, [r2, #0]
 800bfe8:	2e5d      	cmp	r6, #93	; 0x5d
 800bfea:	d0fa      	beq.n	800bfe2 <__sccl+0x4a>
 800bfec:	42b3      	cmp	r3, r6
 800bfee:	dcf8      	bgt.n	800bfe2 <__sccl+0x4a>
 800bff0:	4618      	mov	r0, r3
 800bff2:	3001      	adds	r0, #1
 800bff4:	4286      	cmp	r6, r0
 800bff6:	5421      	strb	r1, [r4, r0]
 800bff8:	dcfb      	bgt.n	800bff2 <__sccl+0x5a>
 800bffa:	43d8      	mvns	r0, r3
 800bffc:	4430      	add	r0, r6
 800bffe:	1c5d      	adds	r5, r3, #1
 800c000:	42b3      	cmp	r3, r6
 800c002:	bfa8      	it	ge
 800c004:	2000      	movge	r0, #0
 800c006:	182b      	adds	r3, r5, r0
 800c008:	3202      	adds	r2, #2
 800c00a:	e7de      	b.n	800bfca <__sccl+0x32>

0800c00c <strncmp>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	b16a      	cbz	r2, 800c02c <strncmp+0x20>
 800c010:	3901      	subs	r1, #1
 800c012:	1884      	adds	r4, r0, r2
 800c014:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c018:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d103      	bne.n	800c028 <strncmp+0x1c>
 800c020:	42a0      	cmp	r0, r4
 800c022:	d001      	beq.n	800c028 <strncmp+0x1c>
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1f5      	bne.n	800c014 <strncmp+0x8>
 800c028:	1a98      	subs	r0, r3, r2
 800c02a:	bd10      	pop	{r4, pc}
 800c02c:	4610      	mov	r0, r2
 800c02e:	e7fc      	b.n	800c02a <strncmp+0x1e>

0800c030 <_strtoul_l.isra.0>:
 800c030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c034:	4e3b      	ldr	r6, [pc, #236]	; (800c124 <_strtoul_l.isra.0+0xf4>)
 800c036:	4686      	mov	lr, r0
 800c038:	468c      	mov	ip, r1
 800c03a:	4660      	mov	r0, ip
 800c03c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c040:	5da5      	ldrb	r5, [r4, r6]
 800c042:	f015 0508 	ands.w	r5, r5, #8
 800c046:	d1f8      	bne.n	800c03a <_strtoul_l.isra.0+0xa>
 800c048:	2c2d      	cmp	r4, #45	; 0x2d
 800c04a:	d134      	bne.n	800c0b6 <_strtoul_l.isra.0+0x86>
 800c04c:	f89c 4000 	ldrb.w	r4, [ip]
 800c050:	f04f 0801 	mov.w	r8, #1
 800c054:	f100 0c02 	add.w	ip, r0, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d05e      	beq.n	800c11a <_strtoul_l.isra.0+0xea>
 800c05c:	2b10      	cmp	r3, #16
 800c05e:	d10c      	bne.n	800c07a <_strtoul_l.isra.0+0x4a>
 800c060:	2c30      	cmp	r4, #48	; 0x30
 800c062:	d10a      	bne.n	800c07a <_strtoul_l.isra.0+0x4a>
 800c064:	f89c 0000 	ldrb.w	r0, [ip]
 800c068:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c06c:	2858      	cmp	r0, #88	; 0x58
 800c06e:	d14f      	bne.n	800c110 <_strtoul_l.isra.0+0xe0>
 800c070:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c074:	2310      	movs	r3, #16
 800c076:	f10c 0c02 	add.w	ip, ip, #2
 800c07a:	f04f 37ff 	mov.w	r7, #4294967295
 800c07e:	2500      	movs	r5, #0
 800c080:	fbb7 f7f3 	udiv	r7, r7, r3
 800c084:	fb03 f907 	mul.w	r9, r3, r7
 800c088:	ea6f 0909 	mvn.w	r9, r9
 800c08c:	4628      	mov	r0, r5
 800c08e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c092:	2e09      	cmp	r6, #9
 800c094:	d818      	bhi.n	800c0c8 <_strtoul_l.isra.0+0x98>
 800c096:	4634      	mov	r4, r6
 800c098:	42a3      	cmp	r3, r4
 800c09a:	dd24      	ble.n	800c0e6 <_strtoul_l.isra.0+0xb6>
 800c09c:	2d00      	cmp	r5, #0
 800c09e:	db1f      	blt.n	800c0e0 <_strtoul_l.isra.0+0xb0>
 800c0a0:	4287      	cmp	r7, r0
 800c0a2:	d31d      	bcc.n	800c0e0 <_strtoul_l.isra.0+0xb0>
 800c0a4:	d101      	bne.n	800c0aa <_strtoul_l.isra.0+0x7a>
 800c0a6:	45a1      	cmp	r9, r4
 800c0a8:	db1a      	blt.n	800c0e0 <_strtoul_l.isra.0+0xb0>
 800c0aa:	fb00 4003 	mla	r0, r0, r3, r4
 800c0ae:	2501      	movs	r5, #1
 800c0b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c0b4:	e7eb      	b.n	800c08e <_strtoul_l.isra.0+0x5e>
 800c0b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c0b8:	bf08      	it	eq
 800c0ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c0be:	46a8      	mov	r8, r5
 800c0c0:	bf08      	it	eq
 800c0c2:	f100 0c02 	addeq.w	ip, r0, #2
 800c0c6:	e7c7      	b.n	800c058 <_strtoul_l.isra.0+0x28>
 800c0c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c0cc:	2e19      	cmp	r6, #25
 800c0ce:	d801      	bhi.n	800c0d4 <_strtoul_l.isra.0+0xa4>
 800c0d0:	3c37      	subs	r4, #55	; 0x37
 800c0d2:	e7e1      	b.n	800c098 <_strtoul_l.isra.0+0x68>
 800c0d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c0d8:	2e19      	cmp	r6, #25
 800c0da:	d804      	bhi.n	800c0e6 <_strtoul_l.isra.0+0xb6>
 800c0dc:	3c57      	subs	r4, #87	; 0x57
 800c0de:	e7db      	b.n	800c098 <_strtoul_l.isra.0+0x68>
 800c0e0:	f04f 35ff 	mov.w	r5, #4294967295
 800c0e4:	e7e4      	b.n	800c0b0 <_strtoul_l.isra.0+0x80>
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	da07      	bge.n	800c0fa <_strtoul_l.isra.0+0xca>
 800c0ea:	2322      	movs	r3, #34	; 0x22
 800c0ec:	f8ce 3000 	str.w	r3, [lr]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	b942      	cbnz	r2, 800c108 <_strtoul_l.isra.0+0xd8>
 800c0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0fa:	f1b8 0f00 	cmp.w	r8, #0
 800c0fe:	d000      	beq.n	800c102 <_strtoul_l.isra.0+0xd2>
 800c100:	4240      	negs	r0, r0
 800c102:	2a00      	cmp	r2, #0
 800c104:	d0f7      	beq.n	800c0f6 <_strtoul_l.isra.0+0xc6>
 800c106:	b10d      	cbz	r5, 800c10c <_strtoul_l.isra.0+0xdc>
 800c108:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c10c:	6011      	str	r1, [r2, #0]
 800c10e:	e7f2      	b.n	800c0f6 <_strtoul_l.isra.0+0xc6>
 800c110:	2430      	movs	r4, #48	; 0x30
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1b1      	bne.n	800c07a <_strtoul_l.isra.0+0x4a>
 800c116:	2308      	movs	r3, #8
 800c118:	e7af      	b.n	800c07a <_strtoul_l.isra.0+0x4a>
 800c11a:	2c30      	cmp	r4, #48	; 0x30
 800c11c:	d0a2      	beq.n	800c064 <_strtoul_l.isra.0+0x34>
 800c11e:	230a      	movs	r3, #10
 800c120:	e7ab      	b.n	800c07a <_strtoul_l.isra.0+0x4a>
 800c122:	bf00      	nop
 800c124:	0800cd11 	.word	0x0800cd11

0800c128 <_strtoul_r>:
 800c128:	f7ff bf82 	b.w	800c030 <_strtoul_l.isra.0>

0800c12c <__submore>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	460c      	mov	r4, r1
 800c132:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c138:	4299      	cmp	r1, r3
 800c13a:	d11d      	bne.n	800c178 <__submore+0x4c>
 800c13c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c140:	f7ff fa2a 	bl	800b598 <_malloc_r>
 800c144:	b918      	cbnz	r0, 800c14e <__submore+0x22>
 800c146:	f04f 30ff 	mov.w	r0, #4294967295
 800c14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c152:	63a3      	str	r3, [r4, #56]	; 0x38
 800c154:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c158:	6360      	str	r0, [r4, #52]	; 0x34
 800c15a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c15e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c162:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c166:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c16a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c16e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	2000      	movs	r0, #0
 800c176:	e7e8      	b.n	800c14a <__submore+0x1e>
 800c178:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c17a:	0077      	lsls	r7, r6, #1
 800c17c:	463a      	mov	r2, r7
 800c17e:	f000 fa2d 	bl	800c5dc <_realloc_r>
 800c182:	4605      	mov	r5, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	d0de      	beq.n	800c146 <__submore+0x1a>
 800c188:	eb00 0806 	add.w	r8, r0, r6
 800c18c:	4601      	mov	r1, r0
 800c18e:	4632      	mov	r2, r6
 800c190:	4640      	mov	r0, r8
 800c192:	f7fe fcd9 	bl	800ab48 <memcpy>
 800c196:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c19a:	f8c4 8000 	str.w	r8, [r4]
 800c19e:	e7e9      	b.n	800c174 <__submore+0x48>

0800c1a0 <__ascii_wctomb>:
 800c1a0:	b149      	cbz	r1, 800c1b6 <__ascii_wctomb+0x16>
 800c1a2:	2aff      	cmp	r2, #255	; 0xff
 800c1a4:	bf85      	ittet	hi
 800c1a6:	238a      	movhi	r3, #138	; 0x8a
 800c1a8:	6003      	strhi	r3, [r0, #0]
 800c1aa:	700a      	strbls	r2, [r1, #0]
 800c1ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1b0:	bf98      	it	ls
 800c1b2:	2001      	movls	r0, #1
 800c1b4:	4770      	bx	lr
 800c1b6:	4608      	mov	r0, r1
 800c1b8:	4770      	bx	lr
	...

0800c1bc <__assert_func>:
 800c1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1be:	4614      	mov	r4, r2
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <__assert_func+0x2c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	68d8      	ldr	r0, [r3, #12]
 800c1ca:	b14c      	cbz	r4, 800c1e0 <__assert_func+0x24>
 800c1cc:	4b07      	ldr	r3, [pc, #28]	; (800c1ec <__assert_func+0x30>)
 800c1ce:	9100      	str	r1, [sp, #0]
 800c1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1d4:	4906      	ldr	r1, [pc, #24]	; (800c1f0 <__assert_func+0x34>)
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	f000 f9a6 	bl	800c528 <fiprintf>
 800c1dc:	f000 fc3e 	bl	800ca5c <abort>
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <__assert_func+0x38>)
 800c1e2:	461c      	mov	r4, r3
 800c1e4:	e7f3      	b.n	800c1ce <__assert_func+0x12>
 800c1e6:	bf00      	nop
 800c1e8:	20000028 	.word	0x20000028
 800c1ec:	0800d0b0 	.word	0x0800d0b0
 800c1f0:	0800d0bd 	.word	0x0800d0bd
 800c1f4:	0800d0eb 	.word	0x0800d0eb

0800c1f8 <__sflush_r>:
 800c1f8:	898a      	ldrh	r2, [r1, #12]
 800c1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fe:	4605      	mov	r5, r0
 800c200:	0710      	lsls	r0, r2, #28
 800c202:	460c      	mov	r4, r1
 800c204:	d458      	bmi.n	800c2b8 <__sflush_r+0xc0>
 800c206:	684b      	ldr	r3, [r1, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	dc05      	bgt.n	800c218 <__sflush_r+0x20>
 800c20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dc02      	bgt.n	800c218 <__sflush_r+0x20>
 800c212:	2000      	movs	r0, #0
 800c214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	d0f9      	beq.n	800c212 <__sflush_r+0x1a>
 800c21e:	2300      	movs	r3, #0
 800c220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c224:	682f      	ldr	r7, [r5, #0]
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	d032      	beq.n	800c290 <__sflush_r+0x98>
 800c22a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	075a      	lsls	r2, r3, #29
 800c230:	d505      	bpl.n	800c23e <__sflush_r+0x46>
 800c232:	6863      	ldr	r3, [r4, #4]
 800c234:	1ac0      	subs	r0, r0, r3
 800c236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c238:	b10b      	cbz	r3, 800c23e <__sflush_r+0x46>
 800c23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c23c:	1ac0      	subs	r0, r0, r3
 800c23e:	2300      	movs	r3, #0
 800c240:	4602      	mov	r2, r0
 800c242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c244:	6a21      	ldr	r1, [r4, #32]
 800c246:	4628      	mov	r0, r5
 800c248:	47b0      	blx	r6
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	d106      	bne.n	800c25e <__sflush_r+0x66>
 800c250:	6829      	ldr	r1, [r5, #0]
 800c252:	291d      	cmp	r1, #29
 800c254:	d82c      	bhi.n	800c2b0 <__sflush_r+0xb8>
 800c256:	4a2a      	ldr	r2, [pc, #168]	; (800c300 <__sflush_r+0x108>)
 800c258:	40ca      	lsrs	r2, r1
 800c25a:	07d6      	lsls	r6, r2, #31
 800c25c:	d528      	bpl.n	800c2b0 <__sflush_r+0xb8>
 800c25e:	2200      	movs	r2, #0
 800c260:	6062      	str	r2, [r4, #4]
 800c262:	04d9      	lsls	r1, r3, #19
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	6022      	str	r2, [r4, #0]
 800c268:	d504      	bpl.n	800c274 <__sflush_r+0x7c>
 800c26a:	1c42      	adds	r2, r0, #1
 800c26c:	d101      	bne.n	800c272 <__sflush_r+0x7a>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	b903      	cbnz	r3, 800c274 <__sflush_r+0x7c>
 800c272:	6560      	str	r0, [r4, #84]	; 0x54
 800c274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c276:	602f      	str	r7, [r5, #0]
 800c278:	2900      	cmp	r1, #0
 800c27a:	d0ca      	beq.n	800c212 <__sflush_r+0x1a>
 800c27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <__sflush_r+0x92>
 800c284:	4628      	mov	r0, r5
 800c286:	f7ff f937 	bl	800b4f8 <_free_r>
 800c28a:	2000      	movs	r0, #0
 800c28c:	6360      	str	r0, [r4, #52]	; 0x34
 800c28e:	e7c1      	b.n	800c214 <__sflush_r+0x1c>
 800c290:	6a21      	ldr	r1, [r4, #32]
 800c292:	2301      	movs	r3, #1
 800c294:	4628      	mov	r0, r5
 800c296:	47b0      	blx	r6
 800c298:	1c41      	adds	r1, r0, #1
 800c29a:	d1c7      	bne.n	800c22c <__sflush_r+0x34>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0c4      	beq.n	800c22c <__sflush_r+0x34>
 800c2a2:	2b1d      	cmp	r3, #29
 800c2a4:	d001      	beq.n	800c2aa <__sflush_r+0xb2>
 800c2a6:	2b16      	cmp	r3, #22
 800c2a8:	d101      	bne.n	800c2ae <__sflush_r+0xb6>
 800c2aa:	602f      	str	r7, [r5, #0]
 800c2ac:	e7b1      	b.n	800c212 <__sflush_r+0x1a>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	e7ad      	b.n	800c214 <__sflush_r+0x1c>
 800c2b8:	690f      	ldr	r7, [r1, #16]
 800c2ba:	2f00      	cmp	r7, #0
 800c2bc:	d0a9      	beq.n	800c212 <__sflush_r+0x1a>
 800c2be:	0793      	lsls	r3, r2, #30
 800c2c0:	680e      	ldr	r6, [r1, #0]
 800c2c2:	bf08      	it	eq
 800c2c4:	694b      	ldreq	r3, [r1, #20]
 800c2c6:	600f      	str	r7, [r1, #0]
 800c2c8:	bf18      	it	ne
 800c2ca:	2300      	movne	r3, #0
 800c2cc:	eba6 0807 	sub.w	r8, r6, r7
 800c2d0:	608b      	str	r3, [r1, #8]
 800c2d2:	f1b8 0f00 	cmp.w	r8, #0
 800c2d6:	dd9c      	ble.n	800c212 <__sflush_r+0x1a>
 800c2d8:	6a21      	ldr	r1, [r4, #32]
 800c2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2dc:	4643      	mov	r3, r8
 800c2de:	463a      	mov	r2, r7
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	dc06      	bgt.n	800c2f6 <__sflush_r+0xfe>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	e78e      	b.n	800c214 <__sflush_r+0x1c>
 800c2f6:	4407      	add	r7, r0
 800c2f8:	eba8 0800 	sub.w	r8, r8, r0
 800c2fc:	e7e9      	b.n	800c2d2 <__sflush_r+0xda>
 800c2fe:	bf00      	nop
 800c300:	20400001 	.word	0x20400001

0800c304 <_fflush_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	690b      	ldr	r3, [r1, #16]
 800c308:	4605      	mov	r5, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	b913      	cbnz	r3, 800c314 <_fflush_r+0x10>
 800c30e:	2500      	movs	r5, #0
 800c310:	4628      	mov	r0, r5
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	b118      	cbz	r0, 800c31e <_fflush_r+0x1a>
 800c316:	6983      	ldr	r3, [r0, #24]
 800c318:	b90b      	cbnz	r3, 800c31e <_fflush_r+0x1a>
 800c31a:	f000 f887 	bl	800c42c <__sinit>
 800c31e:	4b14      	ldr	r3, [pc, #80]	; (800c370 <_fflush_r+0x6c>)
 800c320:	429c      	cmp	r4, r3
 800c322:	d11b      	bne.n	800c35c <_fflush_r+0x58>
 800c324:	686c      	ldr	r4, [r5, #4]
 800c326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0ef      	beq.n	800c30e <_fflush_r+0xa>
 800c32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c330:	07d0      	lsls	r0, r2, #31
 800c332:	d404      	bmi.n	800c33e <_fflush_r+0x3a>
 800c334:	0599      	lsls	r1, r3, #22
 800c336:	d402      	bmi.n	800c33e <_fflush_r+0x3a>
 800c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c33a:	f000 f927 	bl	800c58c <__retarget_lock_acquire_recursive>
 800c33e:	4628      	mov	r0, r5
 800c340:	4621      	mov	r1, r4
 800c342:	f7ff ff59 	bl	800c1f8 <__sflush_r>
 800c346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c348:	07da      	lsls	r2, r3, #31
 800c34a:	4605      	mov	r5, r0
 800c34c:	d4e0      	bmi.n	800c310 <_fflush_r+0xc>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	059b      	lsls	r3, r3, #22
 800c352:	d4dd      	bmi.n	800c310 <_fflush_r+0xc>
 800c354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c356:	f000 f91a 	bl	800c58e <__retarget_lock_release_recursive>
 800c35a:	e7d9      	b.n	800c310 <_fflush_r+0xc>
 800c35c:	4b05      	ldr	r3, [pc, #20]	; (800c374 <_fflush_r+0x70>)
 800c35e:	429c      	cmp	r4, r3
 800c360:	d101      	bne.n	800c366 <_fflush_r+0x62>
 800c362:	68ac      	ldr	r4, [r5, #8]
 800c364:	e7df      	b.n	800c326 <_fflush_r+0x22>
 800c366:	4b04      	ldr	r3, [pc, #16]	; (800c378 <_fflush_r+0x74>)
 800c368:	429c      	cmp	r4, r3
 800c36a:	bf08      	it	eq
 800c36c:	68ec      	ldreq	r4, [r5, #12]
 800c36e:	e7da      	b.n	800c326 <_fflush_r+0x22>
 800c370:	0800d10c 	.word	0x0800d10c
 800c374:	0800d12c 	.word	0x0800d12c
 800c378:	0800d0ec 	.word	0x0800d0ec

0800c37c <std>:
 800c37c:	2300      	movs	r3, #0
 800c37e:	b510      	push	{r4, lr}
 800c380:	4604      	mov	r4, r0
 800c382:	e9c0 3300 	strd	r3, r3, [r0]
 800c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c38a:	6083      	str	r3, [r0, #8]
 800c38c:	8181      	strh	r1, [r0, #12]
 800c38e:	6643      	str	r3, [r0, #100]	; 0x64
 800c390:	81c2      	strh	r2, [r0, #14]
 800c392:	6183      	str	r3, [r0, #24]
 800c394:	4619      	mov	r1, r3
 800c396:	2208      	movs	r2, #8
 800c398:	305c      	adds	r0, #92	; 0x5c
 800c39a:	f7fb fbcf 	bl	8007b3c <memset>
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x38>)
 800c3a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c3a2:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <std+0x3c>)
 800c3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <std+0x40>)
 800c3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <std+0x44>)
 800c3ac:	6224      	str	r4, [r4, #32]
 800c3ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	bf00      	nop
 800c3b4:	080088e5 	.word	0x080088e5
 800c3b8:	0800890b 	.word	0x0800890b
 800c3bc:	08008943 	.word	0x08008943
 800c3c0:	08008967 	.word	0x08008967

0800c3c4 <_cleanup_r>:
 800c3c4:	4901      	ldr	r1, [pc, #4]	; (800c3cc <_cleanup_r+0x8>)
 800c3c6:	f000 b8c1 	b.w	800c54c <_fwalk_reent>
 800c3ca:	bf00      	nop
 800c3cc:	0800c305 	.word	0x0800c305

0800c3d0 <__sfmoreglue>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	1e4a      	subs	r2, r1, #1
 800c3d4:	2568      	movs	r5, #104	; 0x68
 800c3d6:	4355      	muls	r5, r2
 800c3d8:	460e      	mov	r6, r1
 800c3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3de:	f7ff f8db 	bl	800b598 <_malloc_r>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b140      	cbz	r0, 800c3f8 <__sfmoreglue+0x28>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	60a0      	str	r0, [r4, #8]
 800c3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3f4:	f7fb fba2 	bl	8007b3c <memset>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}

0800c3fc <__sfp_lock_acquire>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sfp_lock_acquire+0x8>)
 800c3fe:	f000 b8c5 	b.w	800c58c <__retarget_lock_acquire_recursive>
 800c402:	bf00      	nop
 800c404:	2000082c 	.word	0x2000082c

0800c408 <__sfp_lock_release>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__sfp_lock_release+0x8>)
 800c40a:	f000 b8c0 	b.w	800c58e <__retarget_lock_release_recursive>
 800c40e:	bf00      	nop
 800c410:	2000082c 	.word	0x2000082c

0800c414 <__sinit_lock_acquire>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__sinit_lock_acquire+0x8>)
 800c416:	f000 b8b9 	b.w	800c58c <__retarget_lock_acquire_recursive>
 800c41a:	bf00      	nop
 800c41c:	20000827 	.word	0x20000827

0800c420 <__sinit_lock_release>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__sinit_lock_release+0x8>)
 800c422:	f000 b8b4 	b.w	800c58e <__retarget_lock_release_recursive>
 800c426:	bf00      	nop
 800c428:	20000827 	.word	0x20000827

0800c42c <__sinit>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4604      	mov	r4, r0
 800c430:	f7ff fff0 	bl	800c414 <__sinit_lock_acquire>
 800c434:	69a3      	ldr	r3, [r4, #24]
 800c436:	b11b      	cbz	r3, 800c440 <__sinit+0x14>
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43c:	f7ff bff0 	b.w	800c420 <__sinit_lock_release>
 800c440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c444:	6523      	str	r3, [r4, #80]	; 0x50
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <__sinit+0x68>)
 800c448:	4a13      	ldr	r2, [pc, #76]	; (800c498 <__sinit+0x6c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c44e:	42a3      	cmp	r3, r4
 800c450:	bf04      	itt	eq
 800c452:	2301      	moveq	r3, #1
 800c454:	61a3      	streq	r3, [r4, #24]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 f820 	bl	800c49c <__sfp>
 800c45c:	6060      	str	r0, [r4, #4]
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 f81c 	bl	800c49c <__sfp>
 800c464:	60a0      	str	r0, [r4, #8]
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f818 	bl	800c49c <__sfp>
 800c46c:	2200      	movs	r2, #0
 800c46e:	60e0      	str	r0, [r4, #12]
 800c470:	2104      	movs	r1, #4
 800c472:	6860      	ldr	r0, [r4, #4]
 800c474:	f7ff ff82 	bl	800c37c <std>
 800c478:	68a0      	ldr	r0, [r4, #8]
 800c47a:	2201      	movs	r2, #1
 800c47c:	2109      	movs	r1, #9
 800c47e:	f7ff ff7d 	bl	800c37c <std>
 800c482:	68e0      	ldr	r0, [r4, #12]
 800c484:	2202      	movs	r2, #2
 800c486:	2112      	movs	r1, #18
 800c488:	f7ff ff78 	bl	800c37c <std>
 800c48c:	2301      	movs	r3, #1
 800c48e:	61a3      	str	r3, [r4, #24]
 800c490:	e7d2      	b.n	800c438 <__sinit+0xc>
 800c492:	bf00      	nop
 800c494:	0800cc84 	.word	0x0800cc84
 800c498:	0800c3c5 	.word	0x0800c3c5

0800c49c <__sfp>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	4607      	mov	r7, r0
 800c4a0:	f7ff ffac 	bl	800c3fc <__sfp_lock_acquire>
 800c4a4:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <__sfp+0x84>)
 800c4a6:	681e      	ldr	r6, [r3, #0]
 800c4a8:	69b3      	ldr	r3, [r6, #24]
 800c4aa:	b913      	cbnz	r3, 800c4b2 <__sfp+0x16>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff ffbd 	bl	800c42c <__sinit>
 800c4b2:	3648      	adds	r6, #72	; 0x48
 800c4b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	d503      	bpl.n	800c4c4 <__sfp+0x28>
 800c4bc:	6833      	ldr	r3, [r6, #0]
 800c4be:	b30b      	cbz	r3, 800c504 <__sfp+0x68>
 800c4c0:	6836      	ldr	r6, [r6, #0]
 800c4c2:	e7f7      	b.n	800c4b4 <__sfp+0x18>
 800c4c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c8:	b9d5      	cbnz	r5, 800c500 <__sfp+0x64>
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <__sfp+0x88>)
 800c4cc:	60e3      	str	r3, [r4, #12]
 800c4ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c4d4:	f000 f859 	bl	800c58a <__retarget_lock_init_recursive>
 800c4d8:	f7ff ff96 	bl	800c408 <__sfp_lock_release>
 800c4dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e4:	6025      	str	r5, [r4, #0]
 800c4e6:	61a5      	str	r5, [r4, #24]
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4f0:	f7fb fb24 	bl	8007b3c <memset>
 800c4f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	3468      	adds	r4, #104	; 0x68
 800c502:	e7d9      	b.n	800c4b8 <__sfp+0x1c>
 800c504:	2104      	movs	r1, #4
 800c506:	4638      	mov	r0, r7
 800c508:	f7ff ff62 	bl	800c3d0 <__sfmoreglue>
 800c50c:	4604      	mov	r4, r0
 800c50e:	6030      	str	r0, [r6, #0]
 800c510:	2800      	cmp	r0, #0
 800c512:	d1d5      	bne.n	800c4c0 <__sfp+0x24>
 800c514:	f7ff ff78 	bl	800c408 <__sfp_lock_release>
 800c518:	230c      	movs	r3, #12
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	e7ee      	b.n	800c4fc <__sfp+0x60>
 800c51e:	bf00      	nop
 800c520:	0800cc84 	.word	0x0800cc84
 800c524:	ffff0001 	.word	0xffff0001

0800c528 <fiprintf>:
 800c528:	b40e      	push	{r1, r2, r3}
 800c52a:	b503      	push	{r0, r1, lr}
 800c52c:	4601      	mov	r1, r0
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	4805      	ldr	r0, [pc, #20]	; (800c548 <fiprintf+0x20>)
 800c532:	f853 2b04 	ldr.w	r2, [r3], #4
 800c536:	6800      	ldr	r0, [r0, #0]
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	f000 f89f 	bl	800c67c <_vfiprintf_r>
 800c53e:	b002      	add	sp, #8
 800c540:	f85d eb04 	ldr.w	lr, [sp], #4
 800c544:	b003      	add	sp, #12
 800c546:	4770      	bx	lr
 800c548:	20000028 	.word	0x20000028

0800c54c <_fwalk_reent>:
 800c54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c550:	4606      	mov	r6, r0
 800c552:	4688      	mov	r8, r1
 800c554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c558:	2700      	movs	r7, #0
 800c55a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c55e:	f1b9 0901 	subs.w	r9, r9, #1
 800c562:	d505      	bpl.n	800c570 <_fwalk_reent+0x24>
 800c564:	6824      	ldr	r4, [r4, #0]
 800c566:	2c00      	cmp	r4, #0
 800c568:	d1f7      	bne.n	800c55a <_fwalk_reent+0xe>
 800c56a:	4638      	mov	r0, r7
 800c56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c570:	89ab      	ldrh	r3, [r5, #12]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d907      	bls.n	800c586 <_fwalk_reent+0x3a>
 800c576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c57a:	3301      	adds	r3, #1
 800c57c:	d003      	beq.n	800c586 <_fwalk_reent+0x3a>
 800c57e:	4629      	mov	r1, r5
 800c580:	4630      	mov	r0, r6
 800c582:	47c0      	blx	r8
 800c584:	4307      	orrs	r7, r0
 800c586:	3568      	adds	r5, #104	; 0x68
 800c588:	e7e9      	b.n	800c55e <_fwalk_reent+0x12>

0800c58a <__retarget_lock_init_recursive>:
 800c58a:	4770      	bx	lr

0800c58c <__retarget_lock_acquire_recursive>:
 800c58c:	4770      	bx	lr

0800c58e <__retarget_lock_release_recursive>:
 800c58e:	4770      	bx	lr

0800c590 <memmove>:
 800c590:	4288      	cmp	r0, r1
 800c592:	b510      	push	{r4, lr}
 800c594:	eb01 0402 	add.w	r4, r1, r2
 800c598:	d902      	bls.n	800c5a0 <memmove+0x10>
 800c59a:	4284      	cmp	r4, r0
 800c59c:	4623      	mov	r3, r4
 800c59e:	d807      	bhi.n	800c5b0 <memmove+0x20>
 800c5a0:	1e43      	subs	r3, r0, #1
 800c5a2:	42a1      	cmp	r1, r4
 800c5a4:	d008      	beq.n	800c5b8 <memmove+0x28>
 800c5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ae:	e7f8      	b.n	800c5a2 <memmove+0x12>
 800c5b0:	4402      	add	r2, r0
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	428a      	cmp	r2, r1
 800c5b6:	d100      	bne.n	800c5ba <memmove+0x2a>
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5c2:	e7f7      	b.n	800c5b4 <memmove+0x24>

0800c5c4 <__malloc_lock>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__malloc_lock+0x8>)
 800c5c6:	f7ff bfe1 	b.w	800c58c <__retarget_lock_acquire_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20000828 	.word	0x20000828

0800c5d0 <__malloc_unlock>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	; (800c5d8 <__malloc_unlock+0x8>)
 800c5d2:	f7ff bfdc 	b.w	800c58e <__retarget_lock_release_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	20000828 	.word	0x20000828

0800c5dc <_realloc_r>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	4607      	mov	r7, r0
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	460e      	mov	r6, r1
 800c5e4:	b921      	cbnz	r1, 800c5f0 <_realloc_r+0x14>
 800c5e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	f7fe bfd4 	b.w	800b598 <_malloc_r>
 800c5f0:	b922      	cbnz	r2, 800c5fc <_realloc_r+0x20>
 800c5f2:	f7fe ff81 	bl	800b4f8 <_free_r>
 800c5f6:	4625      	mov	r5, r4
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5fc:	f000 fa9a 	bl	800cb34 <_malloc_usable_size_r>
 800c600:	42a0      	cmp	r0, r4
 800c602:	d20f      	bcs.n	800c624 <_realloc_r+0x48>
 800c604:	4621      	mov	r1, r4
 800c606:	4638      	mov	r0, r7
 800c608:	f7fe ffc6 	bl	800b598 <_malloc_r>
 800c60c:	4605      	mov	r5, r0
 800c60e:	2800      	cmp	r0, #0
 800c610:	d0f2      	beq.n	800c5f8 <_realloc_r+0x1c>
 800c612:	4631      	mov	r1, r6
 800c614:	4622      	mov	r2, r4
 800c616:	f7fe fa97 	bl	800ab48 <memcpy>
 800c61a:	4631      	mov	r1, r6
 800c61c:	4638      	mov	r0, r7
 800c61e:	f7fe ff6b 	bl	800b4f8 <_free_r>
 800c622:	e7e9      	b.n	800c5f8 <_realloc_r+0x1c>
 800c624:	4635      	mov	r5, r6
 800c626:	e7e7      	b.n	800c5f8 <_realloc_r+0x1c>

0800c628 <__sfputc_r>:
 800c628:	6893      	ldr	r3, [r2, #8]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	b410      	push	{r4}
 800c630:	6093      	str	r3, [r2, #8]
 800c632:	da08      	bge.n	800c646 <__sfputc_r+0x1e>
 800c634:	6994      	ldr	r4, [r2, #24]
 800c636:	42a3      	cmp	r3, r4
 800c638:	db01      	blt.n	800c63e <__sfputc_r+0x16>
 800c63a:	290a      	cmp	r1, #10
 800c63c:	d103      	bne.n	800c646 <__sfputc_r+0x1e>
 800c63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c642:	f000 b94b 	b.w	800c8dc <__swbuf_r>
 800c646:	6813      	ldr	r3, [r2, #0]
 800c648:	1c58      	adds	r0, r3, #1
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	7019      	strb	r1, [r3, #0]
 800c64e:	4608      	mov	r0, r1
 800c650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <__sfputs_r>:
 800c656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c658:	4606      	mov	r6, r0
 800c65a:	460f      	mov	r7, r1
 800c65c:	4614      	mov	r4, r2
 800c65e:	18d5      	adds	r5, r2, r3
 800c660:	42ac      	cmp	r4, r5
 800c662:	d101      	bne.n	800c668 <__sfputs_r+0x12>
 800c664:	2000      	movs	r0, #0
 800c666:	e007      	b.n	800c678 <__sfputs_r+0x22>
 800c668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66c:	463a      	mov	r2, r7
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ffda 	bl	800c628 <__sfputc_r>
 800c674:	1c43      	adds	r3, r0, #1
 800c676:	d1f3      	bne.n	800c660 <__sfputs_r+0xa>
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c67c <_vfiprintf_r>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	460d      	mov	r5, r1
 800c682:	b09d      	sub	sp, #116	; 0x74
 800c684:	4614      	mov	r4, r2
 800c686:	4698      	mov	r8, r3
 800c688:	4606      	mov	r6, r0
 800c68a:	b118      	cbz	r0, 800c694 <_vfiprintf_r+0x18>
 800c68c:	6983      	ldr	r3, [r0, #24]
 800c68e:	b90b      	cbnz	r3, 800c694 <_vfiprintf_r+0x18>
 800c690:	f7ff fecc 	bl	800c42c <__sinit>
 800c694:	4b89      	ldr	r3, [pc, #548]	; (800c8bc <_vfiprintf_r+0x240>)
 800c696:	429d      	cmp	r5, r3
 800c698:	d11b      	bne.n	800c6d2 <_vfiprintf_r+0x56>
 800c69a:	6875      	ldr	r5, [r6, #4]
 800c69c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c69e:	07d9      	lsls	r1, r3, #31
 800c6a0:	d405      	bmi.n	800c6ae <_vfiprintf_r+0x32>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	059a      	lsls	r2, r3, #22
 800c6a6:	d402      	bmi.n	800c6ae <_vfiprintf_r+0x32>
 800c6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6aa:	f7ff ff6f 	bl	800c58c <__retarget_lock_acquire_recursive>
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	071b      	lsls	r3, r3, #28
 800c6b2:	d501      	bpl.n	800c6b8 <_vfiprintf_r+0x3c>
 800c6b4:	692b      	ldr	r3, [r5, #16]
 800c6b6:	b9eb      	cbnz	r3, 800c6f4 <_vfiprintf_r+0x78>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f000 f960 	bl	800c980 <__swsetup_r>
 800c6c0:	b1c0      	cbz	r0, 800c6f4 <_vfiprintf_r+0x78>
 800c6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c4:	07dc      	lsls	r4, r3, #31
 800c6c6:	d50e      	bpl.n	800c6e6 <_vfiprintf_r+0x6a>
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6cc:	b01d      	add	sp, #116	; 0x74
 800c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d2:	4b7b      	ldr	r3, [pc, #492]	; (800c8c0 <_vfiprintf_r+0x244>)
 800c6d4:	429d      	cmp	r5, r3
 800c6d6:	d101      	bne.n	800c6dc <_vfiprintf_r+0x60>
 800c6d8:	68b5      	ldr	r5, [r6, #8]
 800c6da:	e7df      	b.n	800c69c <_vfiprintf_r+0x20>
 800c6dc:	4b79      	ldr	r3, [pc, #484]	; (800c8c4 <_vfiprintf_r+0x248>)
 800c6de:	429d      	cmp	r5, r3
 800c6e0:	bf08      	it	eq
 800c6e2:	68f5      	ldreq	r5, [r6, #12]
 800c6e4:	e7da      	b.n	800c69c <_vfiprintf_r+0x20>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	0598      	lsls	r0, r3, #22
 800c6ea:	d4ed      	bmi.n	800c6c8 <_vfiprintf_r+0x4c>
 800c6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ee:	f7ff ff4e 	bl	800c58e <__retarget_lock_release_recursive>
 800c6f2:	e7e9      	b.n	800c6c8 <_vfiprintf_r+0x4c>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f8:	2320      	movs	r3, #32
 800c6fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c702:	2330      	movs	r3, #48	; 0x30
 800c704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8c8 <_vfiprintf_r+0x24c>
 800c708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c70c:	f04f 0901 	mov.w	r9, #1
 800c710:	4623      	mov	r3, r4
 800c712:	469a      	mov	sl, r3
 800c714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c718:	b10a      	cbz	r2, 800c71e <_vfiprintf_r+0xa2>
 800c71a:	2a25      	cmp	r2, #37	; 0x25
 800c71c:	d1f9      	bne.n	800c712 <_vfiprintf_r+0x96>
 800c71e:	ebba 0b04 	subs.w	fp, sl, r4
 800c722:	d00b      	beq.n	800c73c <_vfiprintf_r+0xc0>
 800c724:	465b      	mov	r3, fp
 800c726:	4622      	mov	r2, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff ff93 	bl	800c656 <__sfputs_r>
 800c730:	3001      	adds	r0, #1
 800c732:	f000 80aa 	beq.w	800c88a <_vfiprintf_r+0x20e>
 800c736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c738:	445a      	add	r2, fp
 800c73a:	9209      	str	r2, [sp, #36]	; 0x24
 800c73c:	f89a 3000 	ldrb.w	r3, [sl]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 80a2 	beq.w	800c88a <_vfiprintf_r+0x20e>
 800c746:	2300      	movs	r3, #0
 800c748:	f04f 32ff 	mov.w	r2, #4294967295
 800c74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c750:	f10a 0a01 	add.w	sl, sl, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	9307      	str	r3, [sp, #28]
 800c758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c75c:	931a      	str	r3, [sp, #104]	; 0x68
 800c75e:	4654      	mov	r4, sl
 800c760:	2205      	movs	r2, #5
 800c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c766:	4858      	ldr	r0, [pc, #352]	; (800c8c8 <_vfiprintf_r+0x24c>)
 800c768:	f7f3 fd5a 	bl	8000220 <memchr>
 800c76c:	9a04      	ldr	r2, [sp, #16]
 800c76e:	b9d8      	cbnz	r0, 800c7a8 <_vfiprintf_r+0x12c>
 800c770:	06d1      	lsls	r1, r2, #27
 800c772:	bf44      	itt	mi
 800c774:	2320      	movmi	r3, #32
 800c776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c77a:	0713      	lsls	r3, r2, #28
 800c77c:	bf44      	itt	mi
 800c77e:	232b      	movmi	r3, #43	; 0x2b
 800c780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c784:	f89a 3000 	ldrb.w	r3, [sl]
 800c788:	2b2a      	cmp	r3, #42	; 0x2a
 800c78a:	d015      	beq.n	800c7b8 <_vfiprintf_r+0x13c>
 800c78c:	9a07      	ldr	r2, [sp, #28]
 800c78e:	4654      	mov	r4, sl
 800c790:	2000      	movs	r0, #0
 800c792:	f04f 0c0a 	mov.w	ip, #10
 800c796:	4621      	mov	r1, r4
 800c798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c79c:	3b30      	subs	r3, #48	; 0x30
 800c79e:	2b09      	cmp	r3, #9
 800c7a0:	d94e      	bls.n	800c840 <_vfiprintf_r+0x1c4>
 800c7a2:	b1b0      	cbz	r0, 800c7d2 <_vfiprintf_r+0x156>
 800c7a4:	9207      	str	r2, [sp, #28]
 800c7a6:	e014      	b.n	800c7d2 <_vfiprintf_r+0x156>
 800c7a8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	46a2      	mov	sl, r4
 800c7b6:	e7d2      	b.n	800c75e <_vfiprintf_r+0xe2>
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	1d19      	adds	r1, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	9103      	str	r1, [sp, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfbb      	ittet	lt
 800c7c4:	425b      	neglt	r3, r3
 800c7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ca:	9307      	strge	r3, [sp, #28]
 800c7cc:	9307      	strlt	r3, [sp, #28]
 800c7ce:	bfb8      	it	lt
 800c7d0:	9204      	strlt	r2, [sp, #16]
 800c7d2:	7823      	ldrb	r3, [r4, #0]
 800c7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7d6:	d10c      	bne.n	800c7f2 <_vfiprintf_r+0x176>
 800c7d8:	7863      	ldrb	r3, [r4, #1]
 800c7da:	2b2a      	cmp	r3, #42	; 0x2a
 800c7dc:	d135      	bne.n	800c84a <_vfiprintf_r+0x1ce>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	1d1a      	adds	r2, r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	9203      	str	r2, [sp, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bfb8      	it	lt
 800c7ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ee:	3402      	adds	r4, #2
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8d8 <_vfiprintf_r+0x25c>
 800c7f6:	7821      	ldrb	r1, [r4, #0]
 800c7f8:	2203      	movs	r2, #3
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	f7f3 fd10 	bl	8000220 <memchr>
 800c800:	b140      	cbz	r0, 800c814 <_vfiprintf_r+0x198>
 800c802:	2340      	movs	r3, #64	; 0x40
 800c804:	eba0 000a 	sub.w	r0, r0, sl
 800c808:	fa03 f000 	lsl.w	r0, r3, r0
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4303      	orrs	r3, r0
 800c810:	3401      	adds	r4, #1
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c818:	482c      	ldr	r0, [pc, #176]	; (800c8cc <_vfiprintf_r+0x250>)
 800c81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c81e:	2206      	movs	r2, #6
 800c820:	f7f3 fcfe 	bl	8000220 <memchr>
 800c824:	2800      	cmp	r0, #0
 800c826:	d03f      	beq.n	800c8a8 <_vfiprintf_r+0x22c>
 800c828:	4b29      	ldr	r3, [pc, #164]	; (800c8d0 <_vfiprintf_r+0x254>)
 800c82a:	bb1b      	cbnz	r3, 800c874 <_vfiprintf_r+0x1f8>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	3307      	adds	r3, #7
 800c830:	f023 0307 	bic.w	r3, r3, #7
 800c834:	3308      	adds	r3, #8
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83a:	443b      	add	r3, r7
 800c83c:	9309      	str	r3, [sp, #36]	; 0x24
 800c83e:	e767      	b.n	800c710 <_vfiprintf_r+0x94>
 800c840:	fb0c 3202 	mla	r2, ip, r2, r3
 800c844:	460c      	mov	r4, r1
 800c846:	2001      	movs	r0, #1
 800c848:	e7a5      	b.n	800c796 <_vfiprintf_r+0x11a>
 800c84a:	2300      	movs	r3, #0
 800c84c:	3401      	adds	r4, #1
 800c84e:	9305      	str	r3, [sp, #20]
 800c850:	4619      	mov	r1, r3
 800c852:	f04f 0c0a 	mov.w	ip, #10
 800c856:	4620      	mov	r0, r4
 800c858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c85c:	3a30      	subs	r2, #48	; 0x30
 800c85e:	2a09      	cmp	r2, #9
 800c860:	d903      	bls.n	800c86a <_vfiprintf_r+0x1ee>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0c5      	beq.n	800c7f2 <_vfiprintf_r+0x176>
 800c866:	9105      	str	r1, [sp, #20]
 800c868:	e7c3      	b.n	800c7f2 <_vfiprintf_r+0x176>
 800c86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c86e:	4604      	mov	r4, r0
 800c870:	2301      	movs	r3, #1
 800c872:	e7f0      	b.n	800c856 <_vfiprintf_r+0x1da>
 800c874:	ab03      	add	r3, sp, #12
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	462a      	mov	r2, r5
 800c87a:	4b16      	ldr	r3, [pc, #88]	; (800c8d4 <_vfiprintf_r+0x258>)
 800c87c:	a904      	add	r1, sp, #16
 800c87e:	4630      	mov	r0, r6
 800c880:	f7fb fa04 	bl	8007c8c <_printf_float>
 800c884:	4607      	mov	r7, r0
 800c886:	1c78      	adds	r0, r7, #1
 800c888:	d1d6      	bne.n	800c838 <_vfiprintf_r+0x1bc>
 800c88a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c88c:	07d9      	lsls	r1, r3, #31
 800c88e:	d405      	bmi.n	800c89c <_vfiprintf_r+0x220>
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	059a      	lsls	r2, r3, #22
 800c894:	d402      	bmi.n	800c89c <_vfiprintf_r+0x220>
 800c896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c898:	f7ff fe79 	bl	800c58e <__retarget_lock_release_recursive>
 800c89c:	89ab      	ldrh	r3, [r5, #12]
 800c89e:	065b      	lsls	r3, r3, #25
 800c8a0:	f53f af12 	bmi.w	800c6c8 <_vfiprintf_r+0x4c>
 800c8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a6:	e711      	b.n	800c6cc <_vfiprintf_r+0x50>
 800c8a8:	ab03      	add	r3, sp, #12
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <_vfiprintf_r+0x258>)
 800c8b0:	a904      	add	r1, sp, #16
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7fb fc8e 	bl	80081d4 <_printf_i>
 800c8b8:	e7e4      	b.n	800c884 <_vfiprintf_r+0x208>
 800c8ba:	bf00      	nop
 800c8bc:	0800d10c 	.word	0x0800d10c
 800c8c0:	0800d12c 	.word	0x0800d12c
 800c8c4:	0800d0ec 	.word	0x0800d0ec
 800c8c8:	0800d084 	.word	0x0800d084
 800c8cc:	0800d08e 	.word	0x0800d08e
 800c8d0:	08007c8d 	.word	0x08007c8d
 800c8d4:	0800c657 	.word	0x0800c657
 800c8d8:	0800d08a 	.word	0x0800d08a

0800c8dc <__swbuf_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	460e      	mov	r6, r1
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b118      	cbz	r0, 800c8ee <__swbuf_r+0x12>
 800c8e6:	6983      	ldr	r3, [r0, #24]
 800c8e8:	b90b      	cbnz	r3, 800c8ee <__swbuf_r+0x12>
 800c8ea:	f7ff fd9f 	bl	800c42c <__sinit>
 800c8ee:	4b21      	ldr	r3, [pc, #132]	; (800c974 <__swbuf_r+0x98>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d12b      	bne.n	800c94c <__swbuf_r+0x70>
 800c8f4:	686c      	ldr	r4, [r5, #4]
 800c8f6:	69a3      	ldr	r3, [r4, #24]
 800c8f8:	60a3      	str	r3, [r4, #8]
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	071a      	lsls	r2, r3, #28
 800c8fe:	d52f      	bpl.n	800c960 <__swbuf_r+0x84>
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	b36b      	cbz	r3, 800c960 <__swbuf_r+0x84>
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	6820      	ldr	r0, [r4, #0]
 800c908:	1ac0      	subs	r0, r0, r3
 800c90a:	6963      	ldr	r3, [r4, #20]
 800c90c:	b2f6      	uxtb	r6, r6
 800c90e:	4283      	cmp	r3, r0
 800c910:	4637      	mov	r7, r6
 800c912:	dc04      	bgt.n	800c91e <__swbuf_r+0x42>
 800c914:	4621      	mov	r1, r4
 800c916:	4628      	mov	r0, r5
 800c918:	f7ff fcf4 	bl	800c304 <_fflush_r>
 800c91c:	bb30      	cbnz	r0, 800c96c <__swbuf_r+0x90>
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	3b01      	subs	r3, #1
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	6022      	str	r2, [r4, #0]
 800c92a:	701e      	strb	r6, [r3, #0]
 800c92c:	6963      	ldr	r3, [r4, #20]
 800c92e:	3001      	adds	r0, #1
 800c930:	4283      	cmp	r3, r0
 800c932:	d004      	beq.n	800c93e <__swbuf_r+0x62>
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	07db      	lsls	r3, r3, #31
 800c938:	d506      	bpl.n	800c948 <__swbuf_r+0x6c>
 800c93a:	2e0a      	cmp	r6, #10
 800c93c:	d104      	bne.n	800c948 <__swbuf_r+0x6c>
 800c93e:	4621      	mov	r1, r4
 800c940:	4628      	mov	r0, r5
 800c942:	f7ff fcdf 	bl	800c304 <_fflush_r>
 800c946:	b988      	cbnz	r0, 800c96c <__swbuf_r+0x90>
 800c948:	4638      	mov	r0, r7
 800c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c94c:	4b0a      	ldr	r3, [pc, #40]	; (800c978 <__swbuf_r+0x9c>)
 800c94e:	429c      	cmp	r4, r3
 800c950:	d101      	bne.n	800c956 <__swbuf_r+0x7a>
 800c952:	68ac      	ldr	r4, [r5, #8]
 800c954:	e7cf      	b.n	800c8f6 <__swbuf_r+0x1a>
 800c956:	4b09      	ldr	r3, [pc, #36]	; (800c97c <__swbuf_r+0xa0>)
 800c958:	429c      	cmp	r4, r3
 800c95a:	bf08      	it	eq
 800c95c:	68ec      	ldreq	r4, [r5, #12]
 800c95e:	e7ca      	b.n	800c8f6 <__swbuf_r+0x1a>
 800c960:	4621      	mov	r1, r4
 800c962:	4628      	mov	r0, r5
 800c964:	f000 f80c 	bl	800c980 <__swsetup_r>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d0cb      	beq.n	800c904 <__swbuf_r+0x28>
 800c96c:	f04f 37ff 	mov.w	r7, #4294967295
 800c970:	e7ea      	b.n	800c948 <__swbuf_r+0x6c>
 800c972:	bf00      	nop
 800c974:	0800d10c 	.word	0x0800d10c
 800c978:	0800d12c 	.word	0x0800d12c
 800c97c:	0800d0ec 	.word	0x0800d0ec

0800c980 <__swsetup_r>:
 800c980:	4b32      	ldr	r3, [pc, #200]	; (800ca4c <__swsetup_r+0xcc>)
 800c982:	b570      	push	{r4, r5, r6, lr}
 800c984:	681d      	ldr	r5, [r3, #0]
 800c986:	4606      	mov	r6, r0
 800c988:	460c      	mov	r4, r1
 800c98a:	b125      	cbz	r5, 800c996 <__swsetup_r+0x16>
 800c98c:	69ab      	ldr	r3, [r5, #24]
 800c98e:	b913      	cbnz	r3, 800c996 <__swsetup_r+0x16>
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fd4b 	bl	800c42c <__sinit>
 800c996:	4b2e      	ldr	r3, [pc, #184]	; (800ca50 <__swsetup_r+0xd0>)
 800c998:	429c      	cmp	r4, r3
 800c99a:	d10f      	bne.n	800c9bc <__swsetup_r+0x3c>
 800c99c:	686c      	ldr	r4, [r5, #4]
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a4:	0719      	lsls	r1, r3, #28
 800c9a6:	d42c      	bmi.n	800ca02 <__swsetup_r+0x82>
 800c9a8:	06dd      	lsls	r5, r3, #27
 800c9aa:	d411      	bmi.n	800c9d0 <__swsetup_r+0x50>
 800c9ac:	2309      	movs	r3, #9
 800c9ae:	6033      	str	r3, [r6, #0]
 800c9b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9b4:	81a3      	strh	r3, [r4, #12]
 800c9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ba:	e03e      	b.n	800ca3a <__swsetup_r+0xba>
 800c9bc:	4b25      	ldr	r3, [pc, #148]	; (800ca54 <__swsetup_r+0xd4>)
 800c9be:	429c      	cmp	r4, r3
 800c9c0:	d101      	bne.n	800c9c6 <__swsetup_r+0x46>
 800c9c2:	68ac      	ldr	r4, [r5, #8]
 800c9c4:	e7eb      	b.n	800c99e <__swsetup_r+0x1e>
 800c9c6:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <__swsetup_r+0xd8>)
 800c9c8:	429c      	cmp	r4, r3
 800c9ca:	bf08      	it	eq
 800c9cc:	68ec      	ldreq	r4, [r5, #12]
 800c9ce:	e7e6      	b.n	800c99e <__swsetup_r+0x1e>
 800c9d0:	0758      	lsls	r0, r3, #29
 800c9d2:	d512      	bpl.n	800c9fa <__swsetup_r+0x7a>
 800c9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9d6:	b141      	cbz	r1, 800c9ea <__swsetup_r+0x6a>
 800c9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9dc:	4299      	cmp	r1, r3
 800c9de:	d002      	beq.n	800c9e6 <__swsetup_r+0x66>
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f7fe fd89 	bl	800b4f8 <_free_r>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	6063      	str	r3, [r4, #4]
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f043 0308 	orr.w	r3, r3, #8
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	b94b      	cbnz	r3, 800ca1a <__swsetup_r+0x9a>
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca10:	d003      	beq.n	800ca1a <__swsetup_r+0x9a>
 800ca12:	4621      	mov	r1, r4
 800ca14:	4630      	mov	r0, r6
 800ca16:	f000 f84d 	bl	800cab4 <__smakebuf_r>
 800ca1a:	89a0      	ldrh	r0, [r4, #12]
 800ca1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca20:	f010 0301 	ands.w	r3, r0, #1
 800ca24:	d00a      	beq.n	800ca3c <__swsetup_r+0xbc>
 800ca26:	2300      	movs	r3, #0
 800ca28:	60a3      	str	r3, [r4, #8]
 800ca2a:	6963      	ldr	r3, [r4, #20]
 800ca2c:	425b      	negs	r3, r3
 800ca2e:	61a3      	str	r3, [r4, #24]
 800ca30:	6923      	ldr	r3, [r4, #16]
 800ca32:	b943      	cbnz	r3, 800ca46 <__swsetup_r+0xc6>
 800ca34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca38:	d1ba      	bne.n	800c9b0 <__swsetup_r+0x30>
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	0781      	lsls	r1, r0, #30
 800ca3e:	bf58      	it	pl
 800ca40:	6963      	ldrpl	r3, [r4, #20]
 800ca42:	60a3      	str	r3, [r4, #8]
 800ca44:	e7f4      	b.n	800ca30 <__swsetup_r+0xb0>
 800ca46:	2000      	movs	r0, #0
 800ca48:	e7f7      	b.n	800ca3a <__swsetup_r+0xba>
 800ca4a:	bf00      	nop
 800ca4c:	20000028 	.word	0x20000028
 800ca50:	0800d10c 	.word	0x0800d10c
 800ca54:	0800d12c 	.word	0x0800d12c
 800ca58:	0800d0ec 	.word	0x0800d0ec

0800ca5c <abort>:
 800ca5c:	b508      	push	{r3, lr}
 800ca5e:	2006      	movs	r0, #6
 800ca60:	f000 f898 	bl	800cb94 <raise>
 800ca64:	2001      	movs	r0, #1
 800ca66:	f7f5 ff0f 	bl	8002888 <_exit>

0800ca6a <__swhatbuf_r>:
 800ca6a:	b570      	push	{r4, r5, r6, lr}
 800ca6c:	460e      	mov	r6, r1
 800ca6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca72:	2900      	cmp	r1, #0
 800ca74:	b096      	sub	sp, #88	; 0x58
 800ca76:	4614      	mov	r4, r2
 800ca78:	461d      	mov	r5, r3
 800ca7a:	da07      	bge.n	800ca8c <__swhatbuf_r+0x22>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	89b3      	ldrh	r3, [r6, #12]
 800ca82:	061a      	lsls	r2, r3, #24
 800ca84:	d410      	bmi.n	800caa8 <__swhatbuf_r+0x3e>
 800ca86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca8a:	e00e      	b.n	800caaa <__swhatbuf_r+0x40>
 800ca8c:	466a      	mov	r2, sp
 800ca8e:	f000 f89d 	bl	800cbcc <_fstat_r>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	dbf2      	blt.n	800ca7c <__swhatbuf_r+0x12>
 800ca96:	9a01      	ldr	r2, [sp, #4]
 800ca98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800caa0:	425a      	negs	r2, r3
 800caa2:	415a      	adcs	r2, r3
 800caa4:	602a      	str	r2, [r5, #0]
 800caa6:	e7ee      	b.n	800ca86 <__swhatbuf_r+0x1c>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	2000      	movs	r0, #0
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	b016      	add	sp, #88	; 0x58
 800cab0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cab4 <__smakebuf_r>:
 800cab4:	898b      	ldrh	r3, [r1, #12]
 800cab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cab8:	079d      	lsls	r5, r3, #30
 800caba:	4606      	mov	r6, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	d507      	bpl.n	800cad0 <__smakebuf_r+0x1c>
 800cac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	6123      	str	r3, [r4, #16]
 800cac8:	2301      	movs	r3, #1
 800caca:	6163      	str	r3, [r4, #20]
 800cacc:	b002      	add	sp, #8
 800cace:	bd70      	pop	{r4, r5, r6, pc}
 800cad0:	ab01      	add	r3, sp, #4
 800cad2:	466a      	mov	r2, sp
 800cad4:	f7ff ffc9 	bl	800ca6a <__swhatbuf_r>
 800cad8:	9900      	ldr	r1, [sp, #0]
 800cada:	4605      	mov	r5, r0
 800cadc:	4630      	mov	r0, r6
 800cade:	f7fe fd5b 	bl	800b598 <_malloc_r>
 800cae2:	b948      	cbnz	r0, 800caf8 <__smakebuf_r+0x44>
 800cae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae8:	059a      	lsls	r2, r3, #22
 800caea:	d4ef      	bmi.n	800cacc <__smakebuf_r+0x18>
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	f043 0302 	orr.w	r3, r3, #2
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	e7e3      	b.n	800cac0 <__smakebuf_r+0xc>
 800caf8:	4b0d      	ldr	r3, [pc, #52]	; (800cb30 <__smakebuf_r+0x7c>)
 800cafa:	62b3      	str	r3, [r6, #40]	; 0x28
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	6020      	str	r0, [r4, #0]
 800cb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb04:	81a3      	strh	r3, [r4, #12]
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	6163      	str	r3, [r4, #20]
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	6120      	str	r0, [r4, #16]
 800cb0e:	b15b      	cbz	r3, 800cb28 <__smakebuf_r+0x74>
 800cb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb14:	4630      	mov	r0, r6
 800cb16:	f000 f86b 	bl	800cbf0 <_isatty_r>
 800cb1a:	b128      	cbz	r0, 800cb28 <__smakebuf_r+0x74>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	f023 0303 	bic.w	r3, r3, #3
 800cb22:	f043 0301 	orr.w	r3, r3, #1
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	89a0      	ldrh	r0, [r4, #12]
 800cb2a:	4305      	orrs	r5, r0
 800cb2c:	81a5      	strh	r5, [r4, #12]
 800cb2e:	e7cd      	b.n	800cacc <__smakebuf_r+0x18>
 800cb30:	0800c3c5 	.word	0x0800c3c5

0800cb34 <_malloc_usable_size_r>:
 800cb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb38:	1f18      	subs	r0, r3, #4
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfbc      	itt	lt
 800cb3e:	580b      	ldrlt	r3, [r1, r0]
 800cb40:	18c0      	addlt	r0, r0, r3
 800cb42:	4770      	bx	lr

0800cb44 <_raise_r>:
 800cb44:	291f      	cmp	r1, #31
 800cb46:	b538      	push	{r3, r4, r5, lr}
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	d904      	bls.n	800cb58 <_raise_r+0x14>
 800cb4e:	2316      	movs	r3, #22
 800cb50:	6003      	str	r3, [r0, #0]
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb5a:	b112      	cbz	r2, 800cb62 <_raise_r+0x1e>
 800cb5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb60:	b94b      	cbnz	r3, 800cb76 <_raise_r+0x32>
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 f830 	bl	800cbc8 <_getpid_r>
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb72:	f000 b817 	b.w	800cba4 <_kill_r>
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d00a      	beq.n	800cb90 <_raise_r+0x4c>
 800cb7a:	1c59      	adds	r1, r3, #1
 800cb7c:	d103      	bne.n	800cb86 <_raise_r+0x42>
 800cb7e:	2316      	movs	r3, #22
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	2001      	movs	r0, #1
 800cb84:	e7e7      	b.n	800cb56 <_raise_r+0x12>
 800cb86:	2400      	movs	r4, #0
 800cb88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	4798      	blx	r3
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7e0      	b.n	800cb56 <_raise_r+0x12>

0800cb94 <raise>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <raise+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f7ff bfd3 	b.w	800cb44 <_raise_r>
 800cb9e:	bf00      	nop
 800cba0:	20000028 	.word	0x20000028

0800cba4 <_kill_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4d07      	ldr	r5, [pc, #28]	; (800cbc4 <_kill_r+0x20>)
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4604      	mov	r4, r0
 800cbac:	4608      	mov	r0, r1
 800cbae:	4611      	mov	r1, r2
 800cbb0:	602b      	str	r3, [r5, #0]
 800cbb2:	f7f5 fe59 	bl	8002868 <_kill>
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	d102      	bne.n	800cbc0 <_kill_r+0x1c>
 800cbba:	682b      	ldr	r3, [r5, #0]
 800cbbc:	b103      	cbz	r3, 800cbc0 <_kill_r+0x1c>
 800cbbe:	6023      	str	r3, [r4, #0]
 800cbc0:	bd38      	pop	{r3, r4, r5, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000820 	.word	0x20000820

0800cbc8 <_getpid_r>:
 800cbc8:	f7f5 be46 	b.w	8002858 <_getpid>

0800cbcc <_fstat_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	; (800cbec <_fstat_r+0x20>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	602b      	str	r3, [r5, #0]
 800cbda:	f7f5 fea4 	bl	8002926 <_fstat>
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	d102      	bne.n	800cbe8 <_fstat_r+0x1c>
 800cbe2:	682b      	ldr	r3, [r5, #0]
 800cbe4:	b103      	cbz	r3, 800cbe8 <_fstat_r+0x1c>
 800cbe6:	6023      	str	r3, [r4, #0]
 800cbe8:	bd38      	pop	{r3, r4, r5, pc}
 800cbea:	bf00      	nop
 800cbec:	20000820 	.word	0x20000820

0800cbf0 <_isatty_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d06      	ldr	r5, [pc, #24]	; (800cc0c <_isatty_r+0x1c>)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	602b      	str	r3, [r5, #0]
 800cbfc:	f7f5 fea3 	bl	8002946 <_isatty>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_isatty_r+0x1a>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_isatty_r+0x1a>
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	20000820 	.word	0x20000820

0800cc10 <_init>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr

0800cc1c <_fini>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	bf00      	nop
 800cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc22:	bc08      	pop	{r3}
 800cc24:	469e      	mov	lr, r3
 800cc26:	4770      	bx	lr
